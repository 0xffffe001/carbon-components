{"version":3,"sources":["webpack:///bluemix-components.min.js","webpack:///webpack/bootstrap b47c8ad274d4af316ac2","webpack:///./consumables/js/es2015/index.js","webpack:///./~/svgxuse/svgxuse.js","webpack:///./consumables/js/es2015/file-uploader.js","webpack:///./consumables/js/es2015/fab.js","webpack:///./consumables/js/polyfills/event-matches.js","webpack:///./consumables/js/es2015/content-switcher.js","webpack:///./consumables/js/polyfills/array-from.js","webpack:///./consumables/js/polyfills/object-assign.js","webpack:///./consumables/js/polyfills/toggle-class.js","webpack:///./consumables/js/es2015/tabs.js","webpack:///./consumables/js/polyfills/math-sign.js","webpack:///./consumables/js/es2015/overflow-menu.js","webpack:///./consumables/js/es2015/modals.js","webpack:///./consumables/js/polyfills/custom-event.js","webpack:///./consumables/js/es2015/header.js","webpack:///./consumables/js/es2015/toolbars.js","webpack:///./consumables/js/es2015/loading.js","webpack:///./consumables/js/es2015/dropdown.js","webpack:///./consumables/js/es2015/card.js","webpack:///./consumables/js/es2015/number-input.js","webpack:///./consumables/js/es2015/table.js"],"names":["BluemixComponents","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","Table","NumberInput","Card","Dropdown","Loading","Toolbars","HeaderNav","Modal","OverflowMenu","Tab","ContentSwitcher","FileUploader","FabButton","settings","undefined","_fileUploader","_fileUploader2","_fab","_fab2","_contentSwitcher","_contentSwitcher2","_tabs","_tabs2","_overflowMenu","_overflowMenu2","_modals","_modals2","_header","_header2","_toolbars","_toolbars2","_loading","_loading2","_dropdown","_dropdown2","_card","_card2","_numberInput","_numberInput2","_table","_table2","init","disableAutoInit","document","readyState","addEventListener","setTimeout","window","checkUseElems","tid","cache","create","debouncedCheck","clearTimeout","unobserveChanges","observeChanges","observer","MutationObserver","observe","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","useEl","setAttributeNS","hash","onloadFunc","xhr","svg","body","x","createElement","onload","innerHTML","responseText","getElementsByTagName","setAttribute","style","position","width","height","overflow","insertBefore","firstChild","onErrorTimeout","onerror","ontimeout","bcr","i","Request","isHidden","url","uses","fallback","XMLHttpRequest","withCredentials","XDomainRequest","length","getBoundingClientRect","getAttributeNS","split","left","right","top","bottom","getElementById","open","send","abort","winLoad","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","element","_this","this","options","arguments","nodeType","Node","ELEMENT_NODE","labelSelector","dataset","label","labelNode","parentNode","querySelector","nextElementSibling","constructor","components","set","event","updateLabel","fileName","files","multipleCaption","replace","pop","textContent","get","_this2","DOCUMENT_NODE","Error","fileInput","concat","querySelectorAll","forEach","WeakMap","_typeof","Symbol","iterator","_eventMatches","_eventMatches2","toggle","tagName","preventDefault","state","fab","_ret","handler","has","v","release","eventMatches","selector","matchesFuncName","traverse","currentTarget","filter","name","_toggleClass","_toggleClass2","assign","selectorButton","selectorButtonSelected","classActive","eventBeforeSelected","eventAfterSelected","handleClick","input","checked","_changeActive","button","setActive","item","itemLink","selectorLink","link","ownerDocument","removeAttribute","callback","eventStart","CustomEvent","bubbles","cancelable","detail","dispatchEvent","error","canceled","_this3","contentSwitcher","a","slice","inDst","dst","src","keys","prop","toggleClass","add","classList","contains","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","_ContentSwitcher","selectorMenu","selectorTrigger","selectorTriggerText","classHidden","handleKeyDown","selected","updateTriggerText","trigger","updateMenuState","triggerNode","offsetParent","direction","Left","Right","ArrowLeft","ArrowRight","keyIdentifier","buttons","nextIndex","Math","max","indexOf","nextIndexLooped","sign","focus","tabs","n","abs","handleDocumentClick","handleKeyPress","isOfSelf","shouldBeOpen","which","overflowMenu","classVisible","eventBeforeShown","eventAfterShown","eventBeforeHidden","eventAfterHidden","hookCloseActions","hide","keydownHandler","visible","finished","finishedTransition","transitionDuration","parseFloat","defaultView","getComputedStyle","isNaN","launchingElement","_changeState","_this4","_this5","modal","modalElements","modalTarget","show","shownAlready","offsetWidth","offsetHeight","console","warn","missingNativeCustomEvent","type","createEvent","initEvent","selectorTriggerLabel","selectorItem","selectorItemLink","selectorLabel","menuNode","toggleNav","e","select","isActive","defaultNotPrevented","triggerLabelNode","activatedElement","initiatingEvent","itemElement","remove","nav","headerElements","navTarget","searchFieldNode","listIconsSearchActionTarget","handleActionClick","searchActionNode","active","ie","ActiveXObject","loading","selectorItemSelected","classSelected","dropdown","parentElement","option","firstElementChild","selectorCard","cardKeyPress","card","activeElement","cards","cardList","numberInput","stepUp","stepDown","numberinput","selectorTitle","selectorRow","selectorCheckbox","classSortState","classCheckState","eventBeforeSortToggled","eventAfterSortToggled","eventBeforeCheckToggled","eventAfterCheckToggled","title","row","checkbox","toggleState","newState","table"],"mappings":"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","file":"bluemix-components.min.js","sourcesContent":["var BluemixComponents =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.Table = exports.NumberInput = exports.Card = exports.Dropdown = exports.Loading = exports.Toolbars = exports.HeaderNav = exports.Modal = exports.OverflowMenu = exports.Tab = exports.ContentSwitcher = exports.FileUploader = exports.FabButton = exports.settings = undefined;\n\t\n\t__webpack_require__(1);\n\t\n\tvar _fileUploader = __webpack_require__(2);\n\t\n\tvar _fileUploader2 = _interopRequireDefault(_fileUploader);\n\t\n\tvar _fab = __webpack_require__(3);\n\t\n\tvar _fab2 = _interopRequireDefault(_fab);\n\t\n\tvar _contentSwitcher = __webpack_require__(5);\n\t\n\tvar _contentSwitcher2 = _interopRequireDefault(_contentSwitcher);\n\t\n\tvar _tabs = __webpack_require__(9);\n\t\n\tvar _tabs2 = _interopRequireDefault(_tabs);\n\t\n\tvar _overflowMenu = __webpack_require__(11);\n\t\n\tvar _overflowMenu2 = _interopRequireDefault(_overflowMenu);\n\t\n\tvar _modals = __webpack_require__(12);\n\t\n\tvar _modals2 = _interopRequireDefault(_modals);\n\t\n\tvar _header = __webpack_require__(14);\n\t\n\tvar _header2 = _interopRequireDefault(_header);\n\t\n\tvar _toolbars = __webpack_require__(15);\n\t\n\tvar _toolbars2 = _interopRequireDefault(_toolbars);\n\t\n\tvar _loading = __webpack_require__(16);\n\t\n\tvar _loading2 = _interopRequireDefault(_loading);\n\t\n\tvar _dropdown = __webpack_require__(17);\n\t\n\tvar _dropdown2 = _interopRequireDefault(_dropdown);\n\t\n\tvar _card = __webpack_require__(18);\n\t\n\tvar _card2 = _interopRequireDefault(_card);\n\t\n\tvar _numberInput = __webpack_require__(19);\n\t\n\tvar _numberInput2 = _interopRequireDefault(_numberInput);\n\t\n\tvar _table = __webpack_require__(20);\n\t\n\tvar _table2 = _interopRequireDefault(_table);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// ====================//\n\t// Imports and Exports //\n\t// ====================//\n\t\n\t// Polyfills\n\t// -------------\n\t\n\t\n\tvar settings = {};\n\t\n\t/**\n\t * This module is used for the following purposes:\n\t * 1. Export ES2015 classes as modules (used with base-elements and components)\n\t * 2. Build an ES5-compatible files for prototyping.\n\t *    See /path/to/bluemix-components/dist/dist-demo.html for details.\n\t * @exports BluemixComponents\n\t * @example <caption>Consume ES2015 modules from this file using import (Usage pattern 1.)</caption>\n\t * import { Fab, FileUploader } from '/path/to/your/project/node_modules/@console/bluemix-components';\n\t */\n\t\n\t\n\t// Base Elements & Components\n\t// -------------\n\t// - JavaScript classes for use with components and base-elements.\n\t// - The following statements import classes from actual locations to\n\t//   be consumed from this file instead of their actual locations.\n\texports.\n\t/**\n\t * Settings.\n\t * @type Object\n\t * @property {boolean} [disableAutoInit]\n\t *   Disables automatic instantiation of components.\n\t *   By default (`BluemixComponents.disableAutoInit` is `false`),\n\t *   bluemix-components attempts to instantiate components automatically\n\t *   by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n\t *   or upon DOM events (e.g. clicking) on such elements.\n\t *   See each components' static `.init()` methods for details.\n\t */\n\tsettings = settings;\n\texports.\n\t\n\t/**\n\t * Floating action button.\n\t * @type FabButton\n\t */\n\tFabButton = _fab2.default;\n\texports.\n\t\n\t/**\n\t * File uploader.\n\t * @type FileUploader\n\t */\n\tFileUploader = _fileUploader2.default;\n\texports.\n\t\n\t/**\n\t * Content switcher.\n\t * @type ContentSwitcher\n\t */\n\tContentSwitcher = _contentSwitcher2.default;\n\texports.\n\t\n\t/**\n\t * Container of tabs.\n\t * @type Tab\n\t */\n\tTab = _tabs2.default;\n\texports.\n\t\n\t/**\n\t * Overflow menu.\n\t * @type OverflowMenu\n\t */\n\tOverflowMenu = _overflowMenu2.default;\n\texports.\n\t\n\t/**\n\t * Modal dialog.\n\t * @type Modal\n\t */\n\tModal = _modals2.default;\n\texports.\n\t\n\t/**\n\t * Header with taxonomy menu.\n\t * @type HeaderNav\n\t */\n\tHeaderNav = _header2.default;\n\texports.\n\t\n\t/**\n\t * Search button in tool bar.\n\t * @type Toolbars\n\t */\n\tToolbars = _toolbars2.default;\n\texports.\n\t\n\t/**\n\t * Spinner indicating loading state.\n\t * @type Loading\n\t */\n\tLoading = _loading2.default;\n\texports.\n\t\n\t/**\n\t * A selector with drop downs.\n\t * @type Dropdown\n\t */\n\tDropdown = _dropdown2.default;\n\texports.\n\t\n\t/**\n\t * The container for cards.\n\t * @type Card\n\t */\n\tCard = _card2.default;\n\texports.\n\t\n\t/**\n\t * Number input UI.\n\t * @type NumberInput\n\t */\n\tNumberInput = _numberInput2.default;\n\texports.\n\t\n\t/**\n\t * Data table.\n\t * @type Table\n\t */\n\tTable = _table2.default;\n\t\n\t/**\n\t * Instantiates components automatically\n\t * by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n\t * or upon DOM events (e.g. clicking) on such elements.\n\t * See each components' static `.init()` methods for details.\n\t * @private\n\t */\n\t\n\tvar init = function init() {\n\t  if (!settings.disableAutoInit) {\n\t    _fab2.default.init();\n\t    _fileUploader2.default.init();\n\t    _contentSwitcher2.default.init();\n\t    _tabs2.default.init();\n\t    _overflowMenu2.default.init();\n\t    _modals2.default.init();\n\t    _header2.default.init();\n\t    _toolbars2.default.init();\n\t    _loading2.default.init();\n\t    _dropdown2.default.init();\n\t    _card2.default.init();\n\t    _numberInput2.default.init();\n\t    _table2.default.init();\n\t  }\n\t};\n\t\n\tif (document.readyState === 'loading') {\n\t  document.addEventListener('DOMContentLoaded', init);\n\t} else {\n\t  // DOMContentLoaded has been fired already\n\t  // Let consumer have chance to see if it wants automatic instantiation disabled, and then run automatic instantiation otherwise\n\t  setTimeout(init, 0);\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * @copyright Copyright (c) 2016 IcoMoon.io\n\t * @license   Licensed under MIT license\n\t *            See https://github.com/Keyamoon/svgxuse\n\t * @version   1.1.16\n\t */\n\t/*jslint browser: true */\n\t/*global XDomainRequest, MutationObserver, window */\n\t(function () {\n\t    'use strict';\n\t    if (window && window.addEventListener) {\n\t        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n\t        var checkUseElems,\n\t            tid; // timeout id\n\t        var debouncedCheck = function () {\n\t            clearTimeout(tid);\n\t            tid = setTimeout(checkUseElems, 100);\n\t        };\n\t        var unobserveChanges = function () {\n\t            return;\n\t        };\n\t        var observeChanges = function () {\n\t            var observer;\n\t            window.addEventListener('resize', debouncedCheck, false);\n\t            window.addEventListener('orientationchange', debouncedCheck, false);\n\t            if (window.MutationObserver) {\n\t                observer = new MutationObserver(debouncedCheck);\n\t                observer.observe(document.documentElement, {\n\t                    childList: true,\n\t                    subtree: true,\n\t                    attributes: true\n\t                });\n\t                unobserveChanges = function () {\n\t                    try {\n\t                        observer.disconnect();\n\t                        window.removeEventListener('resize', debouncedCheck, false);\n\t                        window.removeEventListener('orientationchange', debouncedCheck, false);\n\t                    } catch (ignore) {}\n\t                };\n\t            } else {\n\t                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n\t                unobserveChanges = function () {\n\t                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n\t                    window.removeEventListener('resize', debouncedCheck, false);\n\t                    window.removeEventListener('orientationchange', debouncedCheck, false);\n\t                };\n\t            }\n\t        };\n\t        var xlinkNS = 'http://www.w3.org/1999/xlink';\n\t        checkUseElems = function () {\n\t            var base,\n\t                bcr,\n\t                fallback = '', // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n\t                hash,\n\t                i,\n\t                Request,\n\t                inProgressCount = 0,\n\t                isHidden,\n\t                url,\n\t                uses,\n\t                xhr;\n\t            if (window.XMLHttpRequest) {\n\t                Request = new XMLHttpRequest();\n\t                if (Request.withCredentials !== undefined) {\n\t                    Request = XMLHttpRequest;\n\t                } else {\n\t                    Request = XDomainRequest || undefined;\n\t                }\n\t            }\n\t            if (Request === undefined) {\n\t                return;\n\t            }\n\t            function observeIfDone() {\n\t                // If done with making changes, start watching for chagnes in DOM again\n\t                inProgressCount -= 1;\n\t                if (inProgressCount === 0) { // if all xhrs were resolved\n\t                    observeChanges(); // watch for changes to DOM\n\t                }\n\t            }\n\t            function attrUpdateFunc(spec) {\n\t                return function () {\n\t                    if (cache[spec.base] !== true) {\n\t                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n\t                    }\n\t                };\n\t            }\n\t            function onloadFunc(xhr) {\n\t                return function () {\n\t                    var body = document.body;\n\t                    var x = document.createElement('x');\n\t                    var svg;\n\t                    xhr.onload = null;\n\t                    x.innerHTML = xhr.responseText;\n\t                    svg = x.getElementsByTagName('svg')[0];\n\t                    if (svg) {\n\t                        svg.setAttribute('aria-hidden', 'true');\n\t                        svg.style.position = 'absolute';\n\t                        svg.style.width = 0;\n\t                        svg.style.height = 0;\n\t                        svg.style.overflow = 'hidden';\n\t                        body.insertBefore(svg, body.firstChild);\n\t                    }\n\t                    observeIfDone();\n\t                };\n\t            }\n\t            function onErrorTimeout(xhr) {\n\t                return function () {\n\t                    xhr.onerror = null;\n\t                    xhr.ontimeout = null;\n\t                    observeIfDone();\n\t                };\n\t            }\n\t            unobserveChanges(); // stop watching for changes to DOM\n\t            // find all use elements\n\t            uses = document.getElementsByTagName('use');\n\t            for (i = 0; i < uses.length; i += 1) {\n\t                try {\n\t                    bcr = uses[i].getBoundingClientRect();\n\t                } catch (ignore) {\n\t                    // failed to get bounding rectangle of the use element\n\t                    bcr = false;\n\t                }\n\t                url = uses[i].getAttributeNS(xlinkNS, 'href').split('#');\n\t                base = url[0];\n\t                hash = url[1];\n\t                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n\t                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n\t                    // the use element is empty\n\t                    // if there is a reference to an external SVG, try to fetch it\n\t                    // use the optional fallback URL if there is no reference to an external SVG\n\t                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n\t                        base = fallback;\n\t                    }\n\t                    if (base.length) {\n\t                        // schedule updating xlink:href\n\t                        xhr = cache[base];\n\t                        if (xhr !== true) {\n\t                            // true signifies that prepending the SVG was not required\n\t                            setTimeout(attrUpdateFunc({\n\t                                useEl: uses[i],\n\t                                base: base,\n\t                                hash: hash\n\t                            }), 0);\n\t                        }\n\t                        if (xhr === undefined) {\n\t                            xhr = new Request();\n\t                            cache[base] = xhr;\n\t                            xhr.onload = onloadFunc(xhr);\n\t                            xhr.onerror = onErrorTimeout(xhr);\n\t                            xhr.ontimeout = onErrorTimeout(xhr);\n\t                            xhr.open('GET', base);\n\t                            xhr.send();\n\t                            inProgressCount += 1;\n\t                        }\n\t                    }\n\t                } else {\n\t                    if (!isHidden) {\n\t                        if (cache[base] === undefined) {\n\t                            // remember this URL if the use element was not empty and no request was sent\n\t                            cache[base] = true;\n\t                        } else if (cache[base].onload) {\n\t                            // if it turns out that prepending the SVG is not necessary,\n\t                            // abort the in-progress xhr.\n\t                            cache[base].abort();\n\t                            cache[base].onload = undefined;\n\t                            cache[base] = true;\n\t                        }\n\t                    }\n\t                }\n\t            }\n\t            uses = '';\n\t            inProgressCount += 1;\n\t            observeIfDone();\n\t        };\n\t        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n\t        window.addEventListener('load', function winLoad() {\n\t            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n\t            tid = setTimeout(checkUseElems, 0);\n\t        }, false);\n\t    }\n\t}());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FileUploader = function () {\n\t  /**\n\t   * File uploader.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a file uploader.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t   */\n\t\n\t  function FileUploader(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, FileUploader);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    var labelSelector = options.labelSelector || element.dataset.label;\n\t    this.labelNode = element.parentNode.querySelector(labelSelector) || element.nextElementSibling;\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    element.addEventListener('change', function (event) {\n\t      return _this.updateLabel(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates file uploader of the given element.\n\t   * @param {HTMLElement} element The element working as a file uploader.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t   */\n\t\n\t\n\t  _createClass(FileUploader, [{\n\t    key: 'updateLabel',\n\t\n\t\n\t    /**\n\t     * Updates the label for the file name upon file selection.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function updateLabel(event) {\n\t      var fileName = '';\n\t      var element = this.element;\n\t\n\t      if (element.files && element.files.length > 1) {\n\t        fileName = (element.dataset.multipleCaption || '').replace('{count}', element.files.length);\n\t      } else {\n\t        fileName = event.target.value.split('\\\\').pop();\n\t      }\n\t\n\t      if (fileName) {\n\t        this.labelNode.textContent = fileName;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates file uploader in the given node.\n\t     * If the given element indicates that it's an file uploader (having `data-file-uploader` attribute), instantiates it.\n\t     * Otherwise, instantiates file uploader by searching for file uploader in the given node.\n\t     * @param {HTMLElement} element The element working as a file uploader.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.fileInput !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-file-uploader]'))).forEach(function (element) {\n\t          return _this2.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return FileUploader;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} FileUploader#options\n\t * @property {string} [labelSelector] The CSS selector to find the label for the file name.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and file uploader instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = FileUploader;\n\tFileUploader.components = new WeakMap();\n\n/***/ },\n/* 3 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FabButton = function () {\n\t  /**\n\t   * Floating action button.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a floting action button.\n\t   */\n\t\n\t  function FabButton(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, FabButton);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    element.addEventListener('click', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates floating action buttons in the given element.\n\t   * If the given element indicates that it's an floating action button (having `data-fab` attribute), instantiates it.\n\t   * Otherwise, instantiates floating action buttons by clicking on floating action buttons in the given node.\n\t   * @param {Node} target The DOM node to instantiate floating action buttons in. Should be a document or an element.\n\t   * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t   */\n\t\n\t\n\t  _createClass(FabButton, [{\n\t    key: 'toggle',\n\t\n\t\n\t    /**\n\t     * Toggles this floating action button.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function toggle(event) {\n\t      if (this.element.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      if (this.element.dataset.state === 'closed') {\n\t        this.element.dataset.state = 'open';\n\t      } else {\n\t        this.element.dataset.state = 'closed';\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates floating action button of the given element.\n\t     * @param {HTMLElement} element The element.\n\t     */\n\t\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.fab !== undefined) {\n\t        this.create(target);\n\t      } else {\n\t        var _ret = function () {\n\t          var handler = function handler(event) {\n\t            var element = (0, _eventMatches2.default)(event, '[data-fab]');\n\t            if (element && !_this2.components.has(element)) {\n\t              _this2.create(element).toggle(event);\n\t            }\n\t          };\n\t          target.addEventListener('click', handler);\n\t          return {\n\t            v: {\n\t              release: function release() {\n\t                return target.removeEventListener('click', handler);\n\t              }\n\t            }\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t  }]);\n\t\n\t  return FabButton;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and floating action button instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = FabButton;\n\tFabButton.components = new WeakMap();\n\n/***/ },\n/* 4 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = eventMatches;\n\tvar matchesFuncName = ['matches', 'webkitMatchesSelector', 'msMatchesSelector'].filter(function (name) {\n\t  return typeof document.documentElement[name] === 'function';\n\t})[0];\n\t\n\tfunction eventMatches(event, selector) {\n\t  if (event.target[matchesFuncName](selector)) {\n\t    // If event target itself matches the given selector, return it\n\t    return event.target;\n\t  } else if (event.target[matchesFuncName](selector + ' *')) {\n\t    // If event target is a child node of a DOM element that matches the given selector, find the DOM element by going up the DOM tree\n\t    for (var traverse = event.target; traverse && traverse !== event.currentTarget; traverse = traverse.parentNode) {\n\t      if (traverse[matchesFuncName](selector)) {\n\t        return traverse;\n\t      }\n\t    }\n\t  }\n\t}\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(7);\n\t\n\tvar _toggleClass = __webpack_require__(8);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar ContentSwitcher = function () {\n\t  /**\n\t   * Set of content switcher buttons.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a switcher button is selected.\n\t   *   Cancellation of this event stops selection of content switcher button.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t   */\n\t\n\t  function ContentSwitcher(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, ContentSwitcher);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign({\n\t      selectorButton: 'input[type=\"radio\"]',\n\t      selectorButtonSelected: 'input[type=\"radio\"].bx--content-switcher--selected',\n\t      classActive: 'bx--content-switcher--selected',\n\t      eventBeforeSelected: 'content-switcher-beingselected',\n\t      eventAfterSelected: 'content-switcher-selected'\n\t    }, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t\n\t    [].concat(_toConsumableArray(element.querySelectorAll('input'))).forEach(function (input) {\n\t      if (input.checked) _this._changeActive(input);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a set of content switcher buttons of the given element.\n\t   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a switcher button is selected.\n\t   *   Cancellation of this event stops selection of content switcher button.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t   */\n\t\n\t\n\t  _createClass(ContentSwitcher, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Handles click on content switcher button set.\n\t     * If the click is on a content switcher button, activates it.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var button = (0, _eventMatches2.default)(event, this.options.selectorButton);\n\t      if (button) {\n\t        this.setActive(button);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n\t     * @private\n\t     * @param {HTMLElement} item The button to be selected.\n\t     */\n\t\n\t  }, {\n\t    key: '_changeActive',\n\t    value: function _changeActive(item) {\n\t      var _this2 = this;\n\t\n\t      // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n\t      var itemLink = item.querySelector(this.options.selectorLink);\n\t      if (itemLink) {\n\t        [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLink))).forEach(function (link) {\n\t          if (link !== itemLink) {\n\t            link.setAttribute('aria-selected', 'false');\n\t          }\n\t        });\n\t        itemLink.setAttribute('aria-selected', 'true');\n\t      }\n\t\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorButton))).forEach(function (button) {\n\t        if (button !== item) {\n\t          (0, _toggleClass2.default)(button, _this2.options.classActive, false);\n\t          [].concat(_toConsumableArray(button.ownerDocument.querySelectorAll(button.dataset.target))).forEach(function (element) {\n\t            return element.setAttribute('hidden', '');\n\t          });\n\t        }\n\t      });\n\t      (0, _toggleClass2.default)(item, this.options.classActive, true);\n\t      [].concat(_toConsumableArray(item.ownerDocument.querySelectorAll(item.dataset.target))).forEach(function (element) {\n\t        return element.removeAttribute('hidden');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n\t     * @typedef {Object} ContentSwitcher~cancelError\n\t     * @property {boolean} canceled `true` always.\n\t     * @property {boolean} item The content switcher button that was about to be selected.\n\t     */\n\t\n\t    /**\n\t     * The callback called once switching is finished or is canceled.\n\t     * @callback ContentSwitcher~setActiveCallback\n\t     * @param {ContentSwitcher~cancelError} error Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n\t     * @param {HTMLElement} item The newly selected button. `null` if when selection is canceled.\n\t     */\n\t\n\t    /**\n\t     * Selects a content switcher button.\n\t     * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n\t     * DOM elements associated with unselected buttons in the same way will be hidden.\n\t     * @param {HTMLElement} item The button to be selected.\n\t     * @param {ContentSwitcher~setActiveCallback} callback The callback called once selection is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'setActive',\n\t    value: function setActive(item, callback) {\n\t      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { item: item }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeActive(item);\n\t        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { item: item }\n\t        }));\n\t        if (callback) {\n\t          callback(null, item);\n\t        }\n\t      } else {\n\t        var error = new Error('Switching active item has been canceled.');\n\t        error.canceled = true;\n\t        error.item = item;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates content switcher button sets in the given node.\n\t     * If the given element indicates that it's an content switcher button set (having `data-content-switcher` attribute), instantiates it.\n\t     * Otherwise, instantiates content switcher button sets by searching for content switcher button sets in the given node.\n\t     * @param {Node} target The DOM node to instantiate content switcher button sets in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t     * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t     * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a switcher button is selected.\n\t     *   Cancellation of this event stops selection of content switcher button.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.contentSwitcher !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(document.querySelectorAll('[data-content-switcher]'))).forEach(function (element) {\n\t          return _this3.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContentSwitcher;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} ContentSwitcher#options\n\t * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n\t * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t * @property {string} [classActive] The CSS class for switcher button's selected state.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a switcher button is selected.\n\t *   Cancellation of this event stops selection of content switcher button.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and content switcher set instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = ContentSwitcher;\n\tContentSwitcher.components = new WeakMap();\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tArray.from = Array.from || function fromArray(a) {\n\t  return Array.prototype.slice.call(a);\n\t};\n\n/***/ },\n/* 7 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.assign = Object.assign || function assignObject(inDst) {\n\t  if (inDst == null) {\n\t    // eslint-disable-line eqeqeq\n\t    // Throw if the given destination is null or undefined\n\t    throw new TypeError('Can\\'t convert to object: ${dst}');\n\t  }\n\t\n\t  var dst = Object(inDst);\n\t\n\t  [].concat(Array.prototype.slice.call(arguments)).slice(1).forEach(function (src) {\n\t    Object.keys(src).forEach(function (prop) {\n\t      dst[prop] = src[prop];\n\t    });\n\t  });\n\t\n\t  return dst;\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = toggleClass;\n\tfunction toggleClass(element, name, add) {\n\t  if (element.classList.contains(name) === !add) {\n\t    element.classList[add ? 'add' : 'remove'](name);\n\t  }\n\t}\n\n/***/ },\n/* 9 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(10);\n\t\n\t__webpack_require__(7);\n\t\n\tvar _contentSwitcher = __webpack_require__(5);\n\t\n\tvar _contentSwitcher2 = _interopRequireDefault(_contentSwitcher);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Tab = function (_ContentSwitcher) {\n\t  _inherits(Tab, _ContentSwitcher);\n\t\n\t  /**\n\t   * Container of tabs.\n\t   * @extends ContentSwitcher\n\t   * @param {HTMLElement} element The element working as a container of tabs.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n\t   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n\t   * @param {string} [options.classActive] The CSS class for tab's selected state.\n\t   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a tab is selected.\n\t   *   Cancellation of this event stops selection of tab.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t   */\n\t\n\t  function Tab(element) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, Tab);\n\t\n\t    var _this = _possibleConstructorReturn(this, Object.getPrototypeOf(Tab).call(this, element, Object.assign({\n\t      selectorMenu: '.bx--tabs__nav',\n\t      selectorTrigger: '.bx--tabs__trigger',\n\t      selectorTriggerText: '.bx--tabs__trigger-text',\n\t      selectorButton: '.bx--tabs__nav-item',\n\t      selectorButtonSelected: '.bx--tabs__nav-item.bx--tabs--selected',\n\t      selectorLink: '.bx--tabs__nav-link',\n\t      classActive: 'bx--tabs--selected',\n\t      classHidden: 'bx--tabs--hidden',\n\t      eventBeforeSelected: 'tab-beingselected',\n\t      eventAfterSelected: 'tab-selected'\n\t    }, options)));\n\t\n\t    _this.element.addEventListener('keydown', function (event) {\n\t      return _this.handleKeyDown(event);\n\t    });\n\t\n\t    var selected = _this.element.querySelector(_this.options.selectorButtonSelected);\n\t    if (selected) {\n\t      _this.updateTriggerText(selected);\n\t    }\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * Instantiates tab containers in the given node.\n\t   * If the given element indicates that it's an tab container (having `data-tabs` attribute), instantiates it.\n\t   * Otherwise, instantiates tab containers by searching for tab containers in the given node.\n\t   * @param {Node} target The DOM node to instantiate tab containers in. Should be a document or an element.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n\t   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n\t   * @param {string} [options.classActive] The CSS class for tab's selected state.\n\t   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a tab is selected.\n\t   *   Cancellation of this event stops selection of tab.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t   */\n\t\n\t\n\t  _createClass(Tab, [{\n\t    key: '_changeActive',\n\t    value: function _changeActive(item) {\n\t      _get(Object.getPrototypeOf(Tab.prototype), '_changeActive', this).call(this, item);\n\t      this.updateTriggerText(item);\n\t    }\n\t\n\t    /**\n\t     * Handles click on tab container.\n\t     * * If the click is on a tab, activates it.\n\t     * * If the click is on the button to open the drop down menu, does so.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleClick',\n\t    value: function handleClick(event) {\n\t      _get(Object.getPrototypeOf(Tab.prototype), 'handleClick', this).call(this, event);\n\t      var button = (0, _eventMatches2.default)(event, this.options.selectorButton);\n\t      var trigger = (0, _eventMatches2.default)(event, this.options.selectorTrigger);\n\t      if (button) {\n\t        _get(Object.getPrototypeOf(Tab.prototype), 'handleClick', this).call(this, event);\n\t        this.updateMenuState();\n\t      }\n\t      if (trigger) {\n\t        this.updateMenuState();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles arrow keys on tab container.\n\t     * * Up/Left keys are used to go to previous tab.\n\t     * * Down/Right keys are used to go to next tab.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleKeyDown',\n\t    value: function handleKeyDown(event) {\n\t      var _this2 = this;\n\t\n\t      var triggerNode = this.element.querySelector(this.options.selectorTrigger);\n\t      if (triggerNode && triggerNode.offsetParent) {\n\t        return;\n\t      }\n\t\n\t      var direction = {\n\t        Left: -1,\n\t        Right: 1,\n\t        ArrowLeft: -1,\n\t        ArrowRight: 1\n\t      }[event.key || event.keyIdentifier];\n\t\n\t      if (direction) {\n\t        var buttons = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorButton)));\n\t        var button = this.element.querySelector(this.options.selectorButtonSelected);\n\t        var nextIndex = Math.max(buttons.indexOf(button) + direction, -1 /* For `button` not found in `buttons` */);\n\t        var nextIndexLooped = nextIndex >= 0 && nextIndex < buttons.length ? nextIndex : nextIndex - Math.sign(nextIndex) * buttons.length;\n\t        this.setActive(buttons[nextIndexLooped], function (error, item) {\n\t          if (item) {\n\t            var link = item.querySelector(_this2.options.selectorLink);\n\t            if (link) {\n\t              link.focus();\n\t            }\n\t          }\n\t        });\n\t        event.preventDefault();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shows/hides the drop down menu used in narrow mode.\n\t     */\n\t\n\t  }, {\n\t    key: 'updateMenuState',\n\t    value: function updateMenuState() {\n\t      this.element.querySelector(this.options.selectorMenu).classList.toggle(this.options.classHidden);\n\t    }\n\t\n\t    /**\n\t     * Updates the text indicating the currently selected tab item.\n\t     * @param {HTMLElement} target The newly selected tab item.\n\t     */\n\t\n\t  }, {\n\t    key: 'updateTriggerText',\n\t    value: function updateTriggerText(target) {\n\t      this.element.querySelector(this.options.selectorTriggerText).textContent = target.textContent;\n\t    }\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.tabs !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-tabs]'))).forEach(function (element) {\n\t          return _this3.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Tab;\n\t}(_contentSwitcher2.default);\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} Tab#options\n\t * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t * @property {string} [selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t * @property {string} [selectorButton] The CSS selector to find tab containers.\n\t * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n\t * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n\t * @property {string} [classActive] The CSS class for tab's selected state.\n\t * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a tab is selected.\n\t *   Cancellation of this event stops selection of tab.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and tab container instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Tab;\n\tTab.components = new WeakMap();\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tMath.sign = Math.sign || function sign(x) {\n\t  var n = +x;\n\t  return n === 0 ? n : n / Math.abs(n);\n\t};\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(6);\n\t\n\tvar _toggleClass = __webpack_require__(8);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar OverflowMenu = function () {\n\t  function OverflowMenu(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, OverflowMenu);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.constructor.components.set(this.element, this);\n\t    this.element.ownerDocument.addEventListener('click', function (event) {\n\t      return _this.handleDocumentClick(event);\n\t    });\n\t    this.element.ownerDocument.addEventListener('keypress', function (event) {\n\t      return _this.handleKeyPress(event);\n\t    });\n\t  }\n\t\n\t  _createClass(OverflowMenu, [{\n\t    key: 'handleDocumentClick',\n\t    value: function handleDocumentClick(event) {\n\t      var isOfSelf = this.element.contains(event.target);\n\t      var shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\t\n\t      if (isOfSelf && this.element.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      (0, _toggleClass2.default)(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n\t    }\n\t  }, {\n\t    key: 'handleKeyPress',\n\t    value: function handleKeyPress(event) {\n\t      var key = event.key || event.which;\n\t      if (key === 'Enter' || key === 13) {\n\t        var isOfSelf = this.element.contains(event.target);\n\t        var shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\t\n\t        if (isOfSelf && this.element.tagName === 'A') {\n\t          event.preventDefault();\n\t        }\n\t\n\t        (0, _toggleClass2.default)(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.overflowMenu !== undefined) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-overflow-menu]'))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return OverflowMenu;\n\t}();\n\t\n\texports.default = OverflowMenu;\n\t\n\t\n\tOverflowMenu.components = new WeakMap();\n\n/***/ },\n/* 12 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(7);\n\t\n\t__webpack_require__(13);\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tvar _toggleClass = __webpack_require__(8);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Modal = function () {\n\t  /**\n\t   * Modal dialog.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a modal dialog.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.classVisible] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this modal is shown.\n\t   *   Cancellation of this event stops showing the modal.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this modal is hidden.\n\t   *   Cancellation of this event stops hiding the modal.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n\t   */\n\t\n\t  function Modal(element) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, Modal);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign({\n\t      classVisible: 'is-visible',\n\t      eventBeforeShown: 'modal-beingshown',\n\t      eventAfterShown: 'modal-shown',\n\t      eventBeforeHidden: 'modal-beinghidden',\n\t      eventAfterHidden: 'modal-hidden'\n\t    }, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.hookCloseActions();\n\t  }\n\t\n\t  /**\n\t   * Instantiates modal dialog of the given element.\n\t   * @param {HTMLElement} element The element working as a modal dialog.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.classVisible] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this modal is shown.\n\t   *   Cancellation of this event stops showing the modal.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this modal is hidden.\n\t   *   Cancellation of this event stops hiding the modal.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n\t   */\n\t\n\t\n\t  _createClass(Modal, [{\n\t    key: 'hookCloseActions',\n\t\n\t\n\t    /**\n\t     * Adds event listeners for closing this dialog.\n\t     */\n\t    value: function hookCloseActions() {\n\t      var _this = this;\n\t\n\t      this.element.addEventListener('click', function (event) {\n\t        if (event.currentTarget === event.target) _this.hide();\n\t      });\n\t\n\t      if (this.keydownHandler) {\n\t        this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n\t        this.keydownHandler = null;\n\t      }\n\t\n\t      this.keydownHandler = function (event) {\n\t        if (event.which === 27) {\n\t          _this.hide();\n\t        }\n\t      };\n\t\n\t      this.element.ownerDocument.body.addEventListener('keydown', this.keydownHandler);\n\t\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll('[data-modal-close]'))).forEach(function (element) {\n\t        element.addEventListener('click', function () {\n\t          _this.hide();\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Internal method of {@linkcode Modal#show .show()} and  {@linkcode Modal#hide .hide()}, to change show/hidden state.\n\t     * @private\n\t     * @param {boolean} visible `true` to make this modal dialog visible.\n\t     * @param {Function} callback Callback called when change in state completes.\n\t     */\n\t\n\t  }, {\n\t    key: '_changeState',\n\t    value: function _changeState(visible, callback) {\n\t      var _this2 = this;\n\t\n\t      var finished = void 0;\n\t      var finishedTransition = function finishedTransition() {\n\t        if (!finished) {\n\t          finished = true;\n\t          _this2.element.removeEventListener('transitionend', finishedTransition);\n\t          callback();\n\t        }\n\t      };\n\t\n\t      this.element.addEventListener('transitionend', finishedTransition);\n\t      (0, _toggleClass2.default)(this.element, this.options.classVisible, visible);\n\t      var transitionDuration = parseFloat(this.element.ownerDocument.defaultView.getComputedStyle(this.element).transitionDuration);\n\t      if (isNaN(transitionDuration) || transitionDuration === 0) {\n\t        finishedTransition();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * The callback called once showing/hiding this dialog is finished or is canceled.\n\t     * @callback Modal~stateChangeCallback\n\t     * @param {Error} error\n\t     *   An error object with `true` in its `canceled` property if the showing/hiding this dialog is canceled.\n\t     *   Cancellation happens if the handler of a custom event, that is fired before showing/hiding this dialog happens,\n\t     *   calls `.preventDefault()` against the event.\n\t     * @param {boolean} newState The new toggle state.\n\t     */\n\t\n\t    /**\n\t     * Shows this modal dialog.\n\t     * @param {HTMLElement} [launchingElement] The DOM element that triggered calling this function.\n\t     * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'show',\n\t    value: function show(launchingElement, callback) {\n\t      var _this3 = this;\n\t\n\t      if (typeof launchingElement === 'function') {\n\t        callback = launchingElement; // eslint-disable-line no-param-reassign\n\t        launchingElement = null; // eslint-disable-line no-param-reassign\n\t      }\n\t\n\t      if (launchingElement && !launchingElement.nodeType) {\n\t        throw new TypeError('DOM Node should be given for launchingElement.');\n\t      }\n\t\n\t      if (this.element.classList.contains(this.options.classVisible)) {\n\t        if (callback) {\n\t          callback(null, true);\n\t        }\n\t        return;\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options.eventBeforeShown, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { launchingElement: launchingElement }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeState(true, function () {\n\t          _this3.element.dispatchEvent(new CustomEvent(_this3.options.eventAfterShown, {\n\t            bubbles: true,\n\t            cancelable: true,\n\t            detail: { launchingElement: launchingElement }\n\t          }));\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        });\n\t      } else {\n\t        var error = new Error('Showing dialog has been canceled.');\n\t        error.canceled = true;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Hides this modal dialog.\n\t     * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'hide',\n\t    value: function hide(callback) {\n\t      var _this4 = this;\n\t\n\t      if (!this.element.classList.contains(this.options.classVisible)) {\n\t        if (callback) {\n\t          callback(null, true);\n\t        }\n\t        return;\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options.eventBeforeHidden, {\n\t        bubbles: true,\n\t        cancelable: true\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeState(false, function () {\n\t          _this4.element.dispatchEvent(new CustomEvent(_this4.options.eventAfterHidden), {\n\t            bubbles: true,\n\t            cancelable: true\n\t          });\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        });\n\t      } else {\n\t        var error = new Error('Hiding dialog has been canceled.');\n\t        error.canceled = true;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.keydownHandler) {\n\t        this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n\t        this.keydownHandler = null;\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * @deprecated\n\t     */\n\t\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates modal dialogs in the given element.\n\t     * If the given element indicates that it's an modal dialog (having `data-modal` attribute), instantiates it.\n\t     * Otherwise, instantiates modal dialogs by clicking on launcher buttons\n\t     * (buttons with `data-modal-target` attribute) of modal dialogs in the given node.\n\t     * @implements Component\n\t     * @param {Node} target The DOM node to instantiate modal dialogs in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.classVisible] The CSS class for the visible state.\n\t     * @param {string} [options.eventBeforeShown]\n\t     *   The name of the custom event fired before this modal is shown.\n\t     *   Cancellation of this event stops showing the modal.\n\t     * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n\t     * @param {string} [options.eventBeforeHidden]\n\t     *   The name of the custom event fired before this modal is hidden.\n\t     *   Cancellation of this event stops hiding the modal.\n\t     * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n\t     * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this5 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.modal !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        var _ret = function () {\n\t          var handler = function handler(event) {\n\t            var element = (0, _eventMatches2.default)(event, '[data-modal-target]');\n\t\n\t            if (element) {\n\t              var modalElements = [].concat(_toConsumableArray(element.ownerDocument.querySelectorAll(element.dataset.modalTarget)));\n\t              if (modalElements.length > 1) {\n\t                throw new Error('Target modal must be unique.');\n\t              }\n\t\n\t              if (modalElements.length === 1) {\n\t                (function () {\n\t                  if (element.tagName === 'A') {\n\t                    event.preventDefault();\n\t                  }\n\t\n\t                  var modal = _this5.create(modalElements[0], options);\n\t                  modal.show(element, function (error, shownAlready) {\n\t                    if (!error && !shownAlready && modal.element.offsetWidth > 0 && modal.element.offsetHeight > 0) {\n\t                      modal.element.focus();\n\t                    }\n\t                  });\n\t                })();\n\t              }\n\t            }\n\t          };\n\t          target.addEventListener('click', handler);\n\t          return {\n\t            v: {\n\t              release: function release() {\n\t                return target.removeEventListener('click', handler);\n\t              }\n\t            }\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'hook',\n\t    value: function hook() {\n\t      console.warn('Modals.hook() is deprecated. Use Modals.init() instead.'); // eslint-disable-line no-console\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} Modal#options\n\t * @property {string} [classVisible] The CSS class for the visible state.\n\t * @property {string} [eventBeforeShown]\n\t *   The name of the custom event fired before this modal is shown.\n\t *   Cancellation of this event stops showing the modal.\n\t * @property {string} [eventAfterShown] The name of the custom event fired after this modal is shown.\n\t * @property {string} [eventBeforeHidden]\n\t *   The name of the custom event fired before this modal is hidden.\n\t *   Cancellation of this event stops hiding the modal.\n\t * @property {string} [eventAfterHidden] The name of the custom event fired after this modal is hidden.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and modal instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Modal;\n\tModal.components = new WeakMap();\n\n/***/ },\n/* 13 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar missingNativeCustomEvent = function () {\n\t  try {\n\t    new CustomEvent('test-event'); // eslint-disable-line no-new\n\t  } catch (error) {\n\t    return true;\n\t  }\n\t}();\n\tif (missingNativeCustomEvent) {\n\t  window.CustomEvent = function CustomEvent(type) {\n\t    var init = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    var event = document.createEvent('HTMLEvents');\n\t    event.initEvent(type, init.bubbles, init.cancelable);\n\t    if (init.detail) {\n\t      event.detail = init.detail;\n\t    }\n\t    return event;\n\t  };\n\t}\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(7);\n\t\n\t__webpack_require__(13);\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar HeaderNav = function () {\n\t  /**\n\t   * Header with taxonomy menu.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a taxonomy menu.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t   * @param {string} [options.classActive] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this taxonomy menu is shown.\n\t   *   Cancellation of this event stops showing the taxonomy menu.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this taxonomy menu is hidden.\n\t   *   Cancellation of this event stops hiding the taxonomy menu.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a menu item is selected.\n\t   *   Cancellation of this event stops the selection.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t   */\n\t\n\t  function HeaderNav(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, HeaderNav);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign({\n\t      selectorTriggerLabel: '.current-taxonomy',\n\t      classActive: 'taxonomy-nav--active',\n\t      selectorMenu: '.taxonomy-menu',\n\t      selectorItem: '.taxonomy-item',\n\t      selectorItemLink: '.taxonomy-item--taxonomy-menu',\n\t      selectorLabel: '.taxonomy-item__label',\n\t      eventBeforeShown: 'header-beingshown',\n\t      eventAfterShown: 'header-shown',\n\t      eventBeforeHidden: 'header-beinghidden',\n\t      eventAfterHidden: 'header-hidden',\n\t      eventBeforeSelected: 'header-beingselected',\n\t      eventAfterSelected: 'header-selected'\n\t    }, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.menuNode = this.element.querySelector(this.options.selectorMenu);\n\t\n\t    this.element.addEventListener('keydown', function (event) {\n\t      return _this.toggleNav(event);\n\t    });\n\t\n\t    [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItemLink))).forEach(function (item) {\n\t      item.addEventListener('click', function (e) {\n\t        return _this.select(e);\n\t      });\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates taxonomy menus in the given element.\n\t   * If the given element indicates that it's an taxonomy menu (having `data-nav` attribute), instantiates it.\n\t   * Otherwise, instantiates taxonomy menus by clicking on launcher buttons\n\t   * (buttons with `data-nav-target` attribute) of taxonomy menus in the given node.\n\t   * @implements Component\n\t   * @param {Node} target The DOM node to instantiate taxonomy menus in. Should be a document or an element.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t   * @param {string} [options.classActive] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this taxonomy menu is shown.\n\t   *   Cancellation of this event stops showing the taxonomy menu.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this taxonomy menu is hidden.\n\t   *   Cancellation of this event stops hiding the taxonomy menu.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a menu item is selected.\n\t   *   Cancellation of this event stops the selection.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t   * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t   */\n\t\n\t\n\t  _createClass(HeaderNav, [{\n\t    key: 'toggleNav',\n\t\n\t\n\t    /**\n\t     * Shows/hides this taxonomy menu.\n\t     * @param {Event} event The event triggering this function.\n\t     */\n\t    value: function toggleNav(event) {\n\t      var isActive = this.element.classList.contains(this.options.classActive);\n\t      var add = void 0;\n\t      if (event.type === 'click' || event.type === 'keydown' && event.which === 40) {\n\t        // Toggle button or ESC key on nav\n\t        add = !isActive;\n\t      } else if (event.type === 'keydown' && event.which === 27) {\n\t        // Down arrow on launch button\n\t        add = false;\n\t      } else {\n\t        return;\n\t      }\n\t\n\t      var launchingElement = (0, _eventMatches2.default)(event, '[data-nav-target]') || event.currentTarget;\n\t      if (launchingElement.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options[add ? 'eventBeforeShown' : 'eventBeforeHidden'], {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { launchingElement: launchingElement }\n\t      });\n\t      var defaultNotPrevented = this.element.dispatchEvent(eventStart);\n\t\n\t      if (add) {\n\t        this.triggerNode = launchingElement;\n\t        this.triggerLabelNode = this.triggerNode.querySelector(this.options.selectorTriggerLabel);\n\t      }\n\t\n\t      if (defaultNotPrevented) {\n\t        this.element.classList[add ? 'add' : 'remove'](this.options.classActive);\n\t        (this.element.classList.contains(this.options.classActive) ? this.menuNode : this.triggerNode).focus();\n\t        this.element.dispatchEvent(new CustomEvent(this.options[add ? 'eventAfterShown' : 'eventAfterHidden'], {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { launchingElement: launchingElement }\n\t        }));\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Selects a menu item.\n\t     * @param {Event} event The event triggering this function.\n\t     */\n\t\n\t  }, {\n\t    key: 'select',\n\t    value: function select(event) {\n\t      var activatedElement = event.currentTarget;\n\t      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: {\n\t          initiatingEvent: event,\n\t          itemElement: activatedElement\n\t        }\n\t      });\n\t\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItem))).forEach(function (element) {\n\t          if (element.contains(activatedElement)) {\n\t            element.classList.add('selected');\n\t          } else if (element.classList.contains('selected')) {\n\t            element.classList.remove('selected');\n\t          }\n\t        });\n\t        activatedElement.classList.add('selected');\n\t        if (this.triggerLabelNode) {\n\t          this.triggerLabelNode.textContent = activatedElement.querySelector(this.options.selectorLabel).textContent;\n\t        }\n\t        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { itemElement: activatedElement }\n\t        }));\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * @deprecated\n\t     */\n\t\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.nav !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        var _ret = function () {\n\t          var handler = function handler(event) {\n\t            var element = (0, _eventMatches2.default)(event, '[data-nav-target]');\n\t\n\t            if (element) {\n\t              var headerElements = [].concat(_toConsumableArray(element.ownerDocument.querySelectorAll(element.dataset.navTarget)));\n\t              if (headerElements.length > 1) {\n\t                throw new Error('Target header must be unique.');\n\t              }\n\t\n\t              if (headerElements.length === 1) {\n\t                if (element.tagName === 'A') {\n\t                  event.preventDefault();\n\t                }\n\t                _this2.create(headerElements[0], options).toggleNav(event);\n\t              }\n\t            }\n\t          };\n\t\n\t          target.addEventListener('click', handler);\n\t          target.addEventListener('keydown', handler);\n\t\n\t          return {\n\t            v: {\n\t              release: function release() {\n\t                target.removeEventListener('keydown', handler);\n\t                target.removeEventListener('click', handler);\n\t              }\n\t            }\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Instantiates taxonomy menu of the given element.\n\t     * @param {HTMLElement} element The element working as a taxonomy menu.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t     * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t     * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t     * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t     * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t     * @param {string} [options.classActive] The CSS class for the visible state.\n\t     * @param {string} [options.eventBeforeShown]\n\t     *   The name of the custom event fired before this taxonomy menu is shown.\n\t     *   Cancellation of this event stops showing the taxonomy menu.\n\t     * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t     * @param {string} [options.eventBeforeHidden]\n\t     *   The name of the custom event fired before this taxonomy menu is hidden.\n\t     *   Cancellation of this event stops hiding the taxonomy menu.\n\t     * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a menu item is selected.\n\t     *   Cancellation of this event stops the selection.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t  }, {\n\t    key: 'hook',\n\t    value: function hook() {\n\t      console.warn('HeaderNav.hook() is deprecated. Use HeaderNav.init() instead.'); // eslint-disable-line no-console\n\t    }\n\t  }]);\n\t\n\t  return HeaderNav;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} HeaderNav#options\n\t * @property {string} [selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t * @property {string} [selectorMenu] The CSS selector to find the container of the menu items.\n\t * @property {string} [selectorItem] The CSS selector to find the menu items.\n\t * @property {string} [selectorItemLink] The CSS selector to find the link in the menu items.\n\t * @property {string} [selectorLabel] The CSS selector to find the label of the menu items.\n\t * @property {string} [classActive] The CSS class for the visible state.\n\t * @property {string} [eventBeforeShown]\n\t *   The name of the custom event fired before this taxonomy menu is shown.\n\t *   Cancellation of this event stops showing the taxonomy menu.\n\t * @property {string} [eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t * @property {string} [eventBeforeHidden]\n\t *   The name of the custom event fired before this taxonomy menu is hidden.\n\t *   Cancellation of this event stops hiding the taxonomy menu.\n\t * @property {string} [eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a menu item is selected.\n\t *   Cancellation of this event stops the selection.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and taxonomy menu instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = HeaderNav;\n\tHeaderNav.components = new WeakMap();\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Toolbars = function () {\n\t  /**\n\t   * Search button in tool bar.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as an search button.\n\t   */\n\t\n\t  function Toolbars(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Toolbars);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.searchFieldNode = this.element.ownerDocument.querySelector(this.element.dataset.listIconsSearchActionTarget);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleActionClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a search button of the given element.\n\t   * @param {HTMLElement} element The element working as a search button.\n\t   */\n\t\n\t\n\t  _createClass(Toolbars, [{\n\t    key: 'handleActionClick',\n\t\n\t\n\t    /**\n\t     * Show/hide search box.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleActionClick(event) {\n\t      var searchActionNode = event.currentTarget;\n\t\n\t      if (searchActionNode.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      this.element.classList.toggle('show-search');\n\t      if (this.searchFieldNode) {\n\t        this.searchFieldNode.classList.toggle('show-search');\n\t        this.searchFieldNode.value = '';\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates search buttons in the given node.\n\t     * If the given element indicates that it's an search button (having `data-list-icons-search-action-target` attribute), instantiates it.\n\t     * Otherwise, instantiates search buttons by searching for search buttons in the given node.\n\t     * @param {Node} target The DOM node to instantiate search buttons in. Should be a document or an element.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.listIconsSearchActionTarget !== undefined) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-list-icons-search-action-target]'))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Toolbars;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and search button instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Toolbars;\n\tToolbars.components = new WeakMap();\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _toggleClass = __webpack_require__(8);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Loading = function () {\n\t  /**\n\t   * Spinner indicating loading state.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a spinner.\n\t   * @param {Object} options The component options.\n\t   * @param {boolean} options.active `true` if this spinner should roll.\n\t   */\n\t\n\t  function Loading(element) {\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? { active: true } : arguments[1];\n\t\n\t    _classCallCheck(this, Loading);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.active = 'active' in options ? options.active : true;\n\t    this.ie = false;\n\t\n\t    // Check if browser is Internet Explorer\n\t    if (options.ie || window.ActiveXObject || 'ActiveXObject' in window) {\n\t      this.ie = true;\n\t      this.element.classList.add('bx--dropdown--ie');\n\t    }\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    // Initialize spinner\n\t    this.set(this.active);\n\t  }\n\t\n\t  /**\n\t   * Instantiates spinner of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   */\n\t\n\t\n\t  _createClass(Loading, [{\n\t    key: 'set',\n\t\n\t\n\t    /**\n\t     * Sets active/inactive state.\n\t     * @param {boolean} active `true` if this spinner should roll.\n\t     */\n\t    value: function set(active) {\n\t      if (typeof active !== 'boolean') {\n\t        throw new TypeError('set expects a boolean.');\n\t      }\n\t\n\t      this.active = active;\n\t\n\t      if (this.ie) {\n\t        (0, _toggleClass2.default)(this.element, 'bx--loading--stop--ie', !this.active);\n\t      }\n\t      (0, _toggleClass2.default)(this.element, 'bx--loading--stop', !this.active);\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Toggles active/inactive state.\n\t     * @param {boolean} active `true` if this spinner should roll.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggle',\n\t    value: function toggle() {\n\t      return this.set(!this.active);\n\t    }\n\t\n\t    /**\n\t     * @returns {boolean} `true` if this spinner is rolling roll.\n\t     */\n\t\n\t  }, {\n\t    key: 'isActive',\n\t    value: function isActive() {\n\t      return this.active;\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates spinner in the given node.\n\t     * If the given element indicates that it's an spinner (having `data-loading` attribute), instantiates it.\n\t     * Otherwise, instantiates spinners by searching for spinners in the given node.\n\t     * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.loading !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-loading]'))).forEach(function (element) {\n\t          return _this.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Loading;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and spinner instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Loading;\n\tLoading.components = new WeakMap();\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(7);\n\t\n\t__webpack_require__(13);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Dropdown = function () {\n\t  /**\n\t   * A selector with drop downs.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a selector.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a drop down item is selected.\n\t   *   Cancellation of this event stops selection of drop down item.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t   */\n\t\n\t  function Dropdown(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, Dropdown);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign({\n\t      selectorItem: '[data-option] > .bx--dropdown__link',\n\t      selectorItemSelected: '[data-option] > .bx--dropdown__link.bx--dropdown--selected',\n\t      classSelected: 'bx--dropdown--selected',\n\t      eventBeforeSelected: 'dropdown-beingselected',\n\t      eventAfterSelected: 'dropdown-selected'\n\t    }, options);\n\t\n\t    this.element.dataset.dropdown = '';\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.ownerDocument.addEventListener('click', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t    this.element.addEventListener('keypress', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.selected(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates selector of the given element.\n\t   * @param {HTMLElement} element The element working as a selector.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a drop down item is selected.\n\t   *   Cancellation of this event stops selection of drop down item.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t   */\n\t\n\t\n\t  _createClass(Dropdown, [{\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * Opens and closes the dropdown menu.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggle',\n\t    value: function toggle(event) {\n\t      var isOfSelf = this.element.contains(event.target);\n\t\n\t      if (isOfSelf) {\n\t        this.element.classList.toggle('bx--dropdown--open');\n\t      } else if (!isOfSelf && this.element.classList.contains('bx--dropdown--open')) {\n\t        this.element.classList.remove('bx--dropdown--open');\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles clicking on the dropdown options, doing the following:\n\t     * * Change Dropdown text to selected option.\n\t     * * Remove selected option from options when selected.\n\t     * * Emit custom events.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'selected',\n\t    value: function selected(event) {\n\t      var _this2 = this;\n\t\n\t      var activatedElement = event.target;\n\t      if (activatedElement.parentElement.dataset.option !== undefined) {\n\t        var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { item: activatedElement }\n\t        });\n\t\n\t        if (this.element.dispatchEvent(eventStart)) {\n\t          this.element.firstElementChild.textContent = activatedElement.textContent;\n\t          this.element.dataset.value = activatedElement.parentElement.dataset.value;\n\t\n\t          [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItemSelected))).forEach(function (item) {\n\t            if (activatedElement !== item) {\n\t              item.classList.remove(_this2.options.classSelected);\n\t            }\n\t          });\n\t\n\t          activatedElement.classList.add(this.options.classSelected);\n\t\n\t          this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t            bubbles: true,\n\t            cancelable: true,\n\t            detail: { item: activatedElement }\n\t          }));\n\t        }\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates selectors in the given node.\n\t     * If the given element indicates that it's an selector (having `data-dropdown` attribute), instantiates it.\n\t     * Otherwise, instantiates selectors by searching for selectors in the given node.\n\t     * @param {Node} target The DOM node to instantiate selectors in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t     * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t     * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a drop down item is selected.\n\t     *   Cancellation of this event stops selection of drop down item.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.loading !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-dropdown]'))).forEach(function (element) {\n\t          return _this3.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Dropdown;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} Dropdown#options\n\t * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t * @property {string} [classSelected] The CSS class for the selected dropdown item.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a drop down item is selected.\n\t *   Cancellation of this event stops selection of drop down item.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and selector instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Dropdown;\n\tDropdown.components = new WeakMap();\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(6);\n\t\n\t__webpack_require__(7);\n\t\n\t__webpack_require__(10);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Card = function () {\n\t  /**\n\t   * The container for cards.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a container.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t   */\n\t\n\t  function Card(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, Card);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t    this.options = Object.assign({\n\t      selectorCard: '.bx--card'\n\t    }, options);\n\t    this.constructor.components.set(this.element, this);\n\t    this.element.addEventListener('keydown', function (event) {\n\t      return _this.cardKeyPress(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates card container of the given element.\n\t   * @param {HTMLElement} element The element working as a container.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t   */\n\t\n\t\n\t  _createClass(Card, [{\n\t    key: 'cardKeyPress',\n\t\n\t\n\t    /**\n\t     * Goes back/forward among cards,\n\t     * right arrow key for going forward, left arrow key for going backward.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function cardKeyPress(event) {\n\t      var direction = {\n\t        Left: -1,\n\t        Right: 1,\n\t        ArrowLeft: -1,\n\t        ArrowRight: 1\n\t      }[event.key || event.keyIdentifier];\n\t      var card = (0, _eventMatches2.default)(event, this.options.selectorCard);\n\t\n\t      if (direction && card && card === document.activeElement) {\n\t        var cards = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorCard)));\n\t        var nextIndex = Math.max(cards.indexOf(card) + direction, -1 /* For `card` not found in `cards` */);\n\t        var nextIndexLooped = nextIndex >= 0 && nextIndex < cards.length ? nextIndex : nextIndex - Math.sign(nextIndex) * cards.length;\n\t        cards[nextIndexLooped].focus();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates card container in the given node.\n\t     * If the given element indicates that it's an card container (having `data-card-list` attribute), instantiates it.\n\t     * Otherwise, instantiates card containers by searching for card containers in the given node.\n\t     * @param {Node} target The DOM node to instantiate card containers in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.cardList !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-card-list]'))).forEach(function (element) {\n\t          return _this2.create(element, options);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Card;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} Card#options\n\t * @property {string} [selectorCard] The CSS selector to find cards.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and card list instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Card;\n\tCard.components = new WeakMap();\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(6);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NumberInput = function () {\n\t  /**\n\t   * Number input UI.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a number input UI.\n\t   */\n\t\n\t  function NumberInput(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, NumberInput);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.constructor.components.set(this.element, this);\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates number input UI of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   */\n\t\n\t\n\t  _createClass(NumberInput, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Increase/decrease number by clicking on up/down icons.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var state = event.target.classList;\n\t      var numberInput = this.element.querySelector('.bx--number__input');\n\t\n\t      if (state.contains('bx--number__arrow--icon-up')) {\n\t        numberInput.stepUp();\n\t      } else if (state.contains('bx--number__arrow--icon-down')) {\n\t        numberInput.stepDown();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates number input UI in the given node.\n\t     * If the given element indicates that it's an number input UI (having `data-numberinput` attribute), instantiates it.\n\t     * Otherwise, instantiates number input UIs by searching for number input UIs in the given node.\n\t     * @param {Node} target The DOM node to instantiate number input UIs in. Should be a document or an element.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.numberinput !== undefined) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll('[data-numberinput]'))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return NumberInput;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and number input UI instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = NumberInput;\n\tNumberInput.components = new WeakMap();\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(4);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(7);\n\t\n\tvar _toggleClass = __webpack_require__(8);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Table = function () {\n\t  /**\n\t   * Data table.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a data table.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t   * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t   * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t   * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t   */\n\t\n\t  function Table(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length <= 1 || arguments[1] === undefined ? {} : arguments[1];\n\t\n\t    _classCallCheck(this, Table);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t\n\t    this.options = Object.assign({\n\t      selectorTitle: '.bx--table__column-title',\n\t      selectorRow: '.bx--table__row',\n\t      selectorCheckbox: '.bx--checkbox',\n\t      classSortState: 'bx--table__column-title--rotated',\n\t      classCheckState: 'bx--table__row--checked',\n\t      eventBeforeSortToggled: 'table-sort-beingtoggled',\n\t      eventAfterSortToggled: 'table-sort-toggled',\n\t      eventBeforeCheckToggled: 'table-check-beingtoggled',\n\t      eventAfterCheckToggled: 'table-check-toggled'\n\t    }, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a data table of the given element.\n\t   * @param {HTMLElement} element The element working as a data table.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t   * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t   * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t   * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t   */\n\t\n\t\n\t  _createClass(Table, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Handles click on data table.\n\t     * * If the click is on a column title, toggles its sorting state.\n\t     * * If the click is on a check box, toggles the check box.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var title = (0, _eventMatches2.default)(event, this.options.selectorTitle);\n\t      var row = (0, _eventMatches2.default)(event, this.options.selectorRow);\n\t      var checkbox = (0, _eventMatches2.default)(event, this.options.selectorCheckbox);\n\t      if (title) {\n\t        this.toggleState('Sort', title);\n\t      }\n\t      if (row && checkbox) {\n\t        this.toggleState('Check', row);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * The callback called once toggling is finished or is canceled.\n\t     * @callback Table~toggleStateCallback\n\t     * @param {Error} error\n\t     *   An error object with `true` in its `canceled` property if the toggling is canceled.\n\t     *   Cancellation happens if the handler of a custom event, that is fired before toggling happens,\n\t     *   calls `.preventDefault()` against the event.\n\t     * @param {HTMLElement} element The toggled element.\n\t     * @param {boolean} newState The new toggle state.\n\t     */\n\t\n\t    /**\n\t     * Toggles a sorting state or a check box's state.\n\t     * @param {string} type\n\t     *   Specifies what state to toggle:\n\t     *   * `\"Sort\"` for toggling a sorting state.\n\t     *   * `\"Check\"` for toggling a check box's state.\n\t     * @param {HTMLElement} element The DOM element to toggle its state.\n\t     * @param {Table~toggleStateCallback} callback The callback called once toggling is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggleState',\n\t    value: function toggleState(type, element, callback) {\n\t      var newState = !element.classList.contains(this.options['class' + type + 'State']);\n\t      var eventStart = new CustomEvent(this.options['eventBefore' + type + 'Toggled'], {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { newState: newState }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (element.dispatchEvent(eventStart)) {\n\t        (0, _toggleClass2.default)(element, this.options['class' + type + 'State'], newState);\n\t        // this._changeActive(item);\n\t        element.dispatchEvent(new CustomEvent(this.options['eventAfter' + type + 'Toggled'], {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { newState: newState }\n\t        }));\n\t        if (callback) {\n\t          callback(null, element, newState);\n\t        }\n\t      } else {\n\t        var error = new Error('Toggling on table has been canceled.');\n\t        error.canceled = true;\n\t        error.element = element;\n\t        error.newState = newState;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Sets up the given node to instantiate data tables in.\n\t     * If the given element indicates that it's an data table (having `data-table` attribute), instantiates it.\n\t     * Otherwise, lazily instantiates data table when it's clicked on.\n\t     * @param {Node} target The DOM node to instantiate data tables in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t     * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t     * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t     * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t     * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t     * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t     * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t     * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t     * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t     * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length <= 0 || arguments[0] === undefined ? document : arguments[0];\n\t      var options = arguments[1];\n\t\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.dataset.table !== undefined) {\n\t        this.create(target, options);\n\t      } else {\n\t        var _ret = function () {\n\t          var handler = function handler(event) {\n\t            var element = (0, _eventMatches2.default)(event, '[data-table]');\n\t            if (element && !_this2.components.has(element)) {\n\t              _this2.create(element, options).handleClick(event);\n\t            }\n\t          };\n\t          target.addEventListener('click', handler);\n\t          return {\n\t            v: {\n\t              release: function release() {\n\t                return target.removeEventListener('click', handler);\n\t              }\n\t            }\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Table;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @member {Object} Table#options\n\t * @property {string} [selectorTitle] The CSS selector to find column titles.\n\t * @property {string} [selectorRow] The CSS selector to find rows.\n\t * @property {string} [selectorCheckbox] The CSS selector to find check boxes.\n\t * @property {string} [classSortState] The CSS class for the sorting state.\n\t * @property {string} [classCheckState] The CSS class for the checked state.\n\t * @property {string} [eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t * @property {string} [eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t * @property {string} [eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t * @property {string} [eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t */\n\t\n\t/**\n\t * The map associating DOM element and data table instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Table;\n\tTable.components = new WeakMap();\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bluemix-components.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap b47c8ad274d4af316ac2\n **/","// ====================//\n// Imports and Exports //\n// ====================//\n\n\n// Polyfills\n// -------------\nimport 'svgxuse';\n\n// Base Elements & Components\n// -------------\n// - JavaScript classes for use with components and base-elements.\n// - The following statements import classes from actual locations to\n//   be consumed from this file instead of their actual locations.\nimport FileUploader from './file-uploader';\nimport FabButton from './fab';\nimport ContentSwitcher from './content-switcher';\nimport Tab from './tabs';\nimport OverflowMenu from './overflow-menu';\nimport Modal from './modals';\nimport HeaderNav from './header';\nimport Toolbars from './toolbars';\nimport Loading from './loading';\nimport Dropdown from './dropdown';\nimport Card from './card';\nimport NumberInput from './number-input';\nimport Table from './table';\n\nconst settings = {};\n\n/**\n * This module is used for the following purposes:\n * 1. Export ES2015 classes as modules (used with base-elements and components)\n * 2. Build an ES5-compatible files for prototyping.\n *    See /path/to/bluemix-components/dist/dist-demo.html for details.\n * @exports BluemixComponents\n * @example <caption>Consume ES2015 modules from this file using import (Usage pattern 1.)</caption>\n * import { Fab, FileUploader } from '/path/to/your/project/node_modules/@console/bluemix-components';\n */\nexport {\n  /**\n   * Settings.\n   * @type Object\n   * @property {boolean} [disableAutoInit]\n   *   Disables automatic instantiation of components.\n   *   By default (`BluemixComponents.disableAutoInit` is `false`),\n   *   bluemix-components attempts to instantiate components automatically\n   *   by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n   *   or upon DOM events (e.g. clicking) on such elements.\n   *   See each components' static `.init()` methods for details.\n   */\n  settings,\n\n  /**\n   * Floating action button.\n   * @type FabButton\n   */\n  FabButton,\n\n  /**\n   * File uploader.\n   * @type FileUploader\n   */\n  FileUploader,\n\n  /**\n   * Content switcher.\n   * @type ContentSwitcher\n   */\n  ContentSwitcher,\n\n  /**\n   * Container of tabs.\n   * @type Tab\n   */\n  Tab,\n\n  /**\n   * Overflow menu.\n   * @type OverflowMenu\n   */\n  OverflowMenu,\n\n  /**\n   * Modal dialog.\n   * @type Modal\n   */\n  Modal,\n\n  /**\n   * Header with taxonomy menu.\n   * @type HeaderNav\n   */\n  HeaderNav,\n\n  /**\n   * Search button in tool bar.\n   * @type Toolbars\n   */\n  Toolbars,\n\n  /**\n   * Spinner indicating loading state.\n   * @type Loading\n   */\n  Loading,\n\n  /**\n   * A selector with drop downs.\n   * @type Dropdown\n   */\n  Dropdown,\n\n  /**\n   * The container for cards.\n   * @type Card\n   */\n  Card,\n\n  /**\n   * Number input UI.\n   * @type NumberInput\n   */\n  NumberInput,\n\n  /**\n   * Data table.\n   * @type Table\n   */\n  Table,\n};\n\n/**\n * Instantiates components automatically\n * by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n * or upon DOM events (e.g. clicking) on such elements.\n * See each components' static `.init()` methods for details.\n * @private\n */\nconst init = () => {\n  if (!settings.disableAutoInit) {\n    FabButton.init();\n    FileUploader.init();\n    ContentSwitcher.init();\n    Tab.init();\n    OverflowMenu.init();\n    Modal.init();\n    HeaderNav.init();\n    Toolbars.init();\n    Loading.init();\n    Dropdown.init();\n    Card.init();\n    NumberInput.init();\n    Table.init();\n  }\n};\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  // DOMContentLoaded has been fired already\n  // Let consumer have chance to see if it wants automatic instantiation disabled, and then run automatic instantiation otherwise\n  setTimeout(init, 0);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/index.js\n **/","/*!\n * @copyright Copyright (c) 2016 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.1.16\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    'use strict';\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems,\n            tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener('resize', debouncedCheck, false);\n            window.addEventListener('orientationchange', debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener('resize', debouncedCheck, false);\n                        window.removeEventListener('orientationchange', debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n                    window.removeEventListener('resize', debouncedCheck, false);\n                    window.removeEventListener('orientationchange', debouncedCheck, false);\n                };\n            }\n        };\n        var xlinkNS = 'http://www.w3.org/1999/xlink';\n        checkUseElems = function () {\n            var base,\n                bcr,\n                fallback = '', // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n                hash,\n                i,\n                Request,\n                inProgressCount = 0,\n                isHidden,\n                url,\n                uses,\n                xhr;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                if (Request.withCredentials !== undefined) {\n                    Request = XMLHttpRequest;\n                } else {\n                    Request = XDomainRequest || undefined;\n                }\n            }\n            if (Request === undefined) {\n                return;\n            }\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement('x');\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName('svg')[0];\n                    if (svg) {\n                        svg.setAttribute('aria-hidden', 'true');\n                        svg.style.position = 'absolute';\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = 'hidden';\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName('use');\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                url = uses[i].getAttributeNS(xlinkNS, 'href').split('#');\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            xhr = new Request();\n                            cache[base] = xhr;\n                            xhr.onload = onloadFunc(xhr);\n                            xhr.onerror = onErrorTimeout(xhr);\n                            xhr.ontimeout = onErrorTimeout(xhr);\n                            xhr.open('GET', base);\n                            xhr.send();\n                            inProgressCount += 1;\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            cache[base].onload = undefined;\n                            cache[base] = true;\n                        }\n                    }\n                }\n            }\n            uses = '';\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener('load', function winLoad() {\n            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/svgxuse/svgxuse.js\n ** module id = 1\n ** module chunks = 0\n **/","export default class FileUploader {\n  /**\n   * File uploader.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    const labelSelector = options.labelSelector || element.dataset.label;\n    this.labelNode = element.parentNode.querySelector(labelSelector) || element.nextElementSibling;\n\n    this.constructor.components.set(this.element, this);\n\n    element.addEventListener('change', (event) => this.updateLabel(event));\n  }\n\n  /**\n   * Instantiates file uploader of the given element.\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates file uploader in the given node.\n   * If the given element indicates that it's an file uploader (having `data-file-uploader` attribute), instantiates it.\n   * Otherwise, instantiates file uploader by searching for file uploader in the given node.\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.fileInput !== undefined) {\n      this.create(target, options);\n    } else {\n      [... target.querySelectorAll('[data-file-uploader]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  /**\n   * Updates the label for the file name upon file selection.\n   * @param {Event} event The event triggering this method.\n   */\n  updateLabel(event) {\n    let fileName = '';\n    const element = this.element;\n\n    if (element.files && element.files.length > 1) {\n      fileName = (element.dataset.multipleCaption || '').replace('{count}', element.files.length);\n    } else {\n      fileName = event.target.value.split('\\\\').pop();\n    }\n\n    if (fileName) {\n      this.labelNode.textContent = fileName;\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * @member {Object} FileUploader#options\n * @property {string} [labelSelector] The CSS selector to find the label for the file name.\n */\n\n/**\n * The map associating DOM element and file uploader instance.\n * @type {WeakMap}\n */\nFileUploader.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/file-uploader.js\n **/","import eventMatches from '../polyfills/event-matches';\n\nexport default class FabButton {\n  /**\n   * Floating action button.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a floting action button.\n   */\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n\n    this.constructor.components.set(this.element, this);\n\n    element.addEventListener('click', (event) => this.toggle(event));\n  }\n\n  /**\n   * Instantiates floating action buttons in the given element.\n   * If the given element indicates that it's an floating action button (having `data-fab` attribute), instantiates it.\n   * Otherwise, instantiates floating action buttons by clicking on floating action buttons in the given node.\n   * @param {Node} target The DOM node to instantiate floating action buttons in. Should be a document or an element.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.fab !== undefined) {\n      this.create(target);\n    } else {\n      const handler = (event) => {\n        const element = eventMatches(event, '[data-fab]');\n        if (element && !this.components.has(element)) {\n          this.create(element).toggle(event);\n        }\n      };\n      target.addEventListener('click', handler);\n      return {\n        release: () => target.removeEventListener('click', handler),\n      };\n    }\n  }\n\n  /**\n   * Toggles this floating action button.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    if (this.element.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    if (this.element.dataset.state === 'closed') {\n      this.element.dataset.state = 'open';\n    } else {\n      this.element.dataset.state = 'closed';\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * Instantiates floating action button of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n}\n\n/**\n * The map associating DOM element and floating action button instance.\n * @type {WeakMap}\n */\nFabButton.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/fab.js\n **/","const matchesFuncName = [\n  'matches',\n  'webkitMatchesSelector',\n  'msMatchesSelector',\n].filter((name) => typeof document.documentElement[name] === 'function')[0];\n\nexport default function eventMatches(event, selector) {\n  if (event.target[matchesFuncName](selector)) {\n    // If event target itself matches the given selector, return it\n    return event.target;\n  } else if (event.target[matchesFuncName](selector + ' *')) {\n    // If event target is a child node of a DOM element that matches the given selector, find the DOM element by going up the DOM tree\n    for (let traverse = event.target; traverse && traverse !== event.currentTarget; traverse = traverse.parentNode) {\n      if (traverse[matchesFuncName](selector)) {\n        return traverse;\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/event-matches.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class ContentSwitcher {\n  /**\n   * Set of content switcher buttons.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign({\n      selectorButton: 'input[type=\"radio\"]',\n      selectorButtonSelected: 'input[type=\"radio\"].bx--content-switcher--selected',\n      classActive: 'bx--content-switcher--selected',\n      eventBeforeSelected: 'content-switcher-beingselected',\n      eventAfterSelected: 'content-switcher-selected',\n    }, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleClick(event));\n\n    [... element.querySelectorAll('input')].forEach((input) => {\n      if (input.checked) this._changeActive(input);\n    });\n  }\n\n  /**\n   * Instantiates a set of content switcher buttons of the given element.\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates content switcher button sets in the given node.\n   * If the given element indicates that it's an content switcher button set (having `data-content-switcher` attribute), instantiates it.\n   * Otherwise, instantiates content switcher button sets by searching for content switcher button sets in the given node.\n   * @param {Node} target The DOM node to instantiate content switcher button sets in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.contentSwitcher !== undefined) {\n      this.create(target, options);\n    } else {\n      [... document.querySelectorAll('[data-content-switcher]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  /**\n   * Handles click on content switcher button set.\n   * If the click is on a content switcher button, activates it.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const button = eventMatches(event, this.options.selectorButton);\n    if (button) {\n      this.setActive(button);\n    }\n  }\n\n  /**\n   * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n   * @private\n   * @param {HTMLElement} item The button to be selected.\n   */\n  _changeActive(item) {\n    // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n    const itemLink = item.querySelector(this.options.selectorLink);\n    if (itemLink) {\n      [... this.element.querySelectorAll(this.options.selectorLink)].forEach((link) => {\n        if (link !== itemLink) {\n          link.setAttribute('aria-selected', 'false');\n        }\n      });\n      itemLink.setAttribute('aria-selected', 'true');\n    }\n\n    [... this.element.querySelectorAll(this.options.selectorButton)].forEach((button) => {\n      if (button !== item) {\n        toggleClass(button, this.options.classActive, false);\n        [... button.ownerDocument.querySelectorAll(button.dataset.target)].forEach(element => element.setAttribute('hidden', ''));\n      }\n    });\n    toggleClass(item, this.options.classActive, true);\n    [... item.ownerDocument.querySelectorAll(item.dataset.target)].forEach(element => element.removeAttribute('hidden'));\n  }\n\n  /**\n   * Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n   * @typedef {Object} ContentSwitcher~cancelError\n   * @property {boolean} canceled `true` always.\n   * @property {boolean} item The content switcher button that was about to be selected.\n   */\n\n  /**\n   * The callback called once switching is finished or is canceled.\n   * @callback ContentSwitcher~setActiveCallback\n   * @param {ContentSwitcher~cancelError} error Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n   * @param {HTMLElement} item The newly selected button. `null` if when selection is canceled.\n   */\n\n  /**\n   * Selects a content switcher button.\n   * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n   * DOM elements associated with unselected buttons in the same way will be hidden.\n   * @param {HTMLElement} item The button to be selected.\n   * @param {ContentSwitcher~setActiveCallback} callback The callback called once selection is finished or is canceled.\n   */\n  setActive(item, callback) {\n    const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n      bubbles: true,\n      cancelable: true,\n      detail: { item },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeActive(item);\n      this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { item },\n      }));\n      if (callback) {\n        callback(null, item);\n      }\n    } else {\n      const error = new Error('Switching active item has been canceled.');\n      error.canceled = true;\n      error.item = item;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * @member {Object} ContentSwitcher#options\n * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n * @property {string} [classActive] The CSS class for switcher button's selected state.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a switcher button is selected.\n *   Cancellation of this event stops selection of content switcher button.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n */\n\n/**\n * The map associating DOM element and content switcher set instance.\n * @type {WeakMap}\n */\nContentSwitcher.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/content-switcher.js\n **/","Array.from = Array.from || function fromArray(a) {\n  return Array.prototype.slice.call(a);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/array-from.js\n **/","Object.assign = Object.assign || function assignObject(inDst) {\n  if (inDst == null) { // eslint-disable-line eqeqeq\n    // Throw if the given destination is null or undefined\n    throw new TypeError('Can\\'t convert to object: ${dst}');\n  }\n\n  const dst = Object(inDst);\n\n  [... arguments].slice(1).forEach((src) => {\n    Object.keys(src).forEach((prop) => {\n      dst[prop] = src[prop];\n    });\n  });\n\n  return dst;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/object-assign.js\n **/","export default function toggleClass(element, name, add) {\n  if (element.classList.contains(name) === !add) {\n    element.classList[add ? 'add' : 'remove'](name);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/toggle-class.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/math-sign';\nimport '../polyfills/object-assign';\nimport ContentSwitcher from './content-switcher';\n\nexport default class Tab extends ContentSwitcher {\n  /**\n   * Container of tabs.\n   * @extends ContentSwitcher\n   * @param {HTMLElement} element The element working as a container of tabs.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  constructor(element, options = {}) {\n    super(element, Object.assign({\n      selectorMenu: '.bx--tabs__nav',\n      selectorTrigger: '.bx--tabs__trigger',\n      selectorTriggerText: '.bx--tabs__trigger-text',\n      selectorButton: '.bx--tabs__nav-item',\n      selectorButtonSelected: '.bx--tabs__nav-item.bx--tabs--selected',\n      selectorLink: '.bx--tabs__nav-link',\n      classActive: 'bx--tabs--selected',\n      classHidden: 'bx--tabs--hidden',\n      eventBeforeSelected: 'tab-beingselected',\n      eventAfterSelected: 'tab-selected',\n    }, options));\n\n    this.element.addEventListener('keydown', (event) => this.handleKeyDown(event));\n\n    const selected = this.element.querySelector(this.options.selectorButtonSelected);\n    if (selected) {\n      this.updateTriggerText(selected);\n    }\n  }\n\n  /**\n   * Instantiates tab containers in the given node.\n   * If the given element indicates that it's an tab container (having `data-tabs` attribute), instantiates it.\n   * Otherwise, instantiates tab containers by searching for tab containers in the given node.\n   * @param {Node} target The DOM node to instantiate tab containers in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.tabs !== undefined) {\n      this.create(target, options);\n    } else {\n      [... target.querySelectorAll('[data-tabs]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  _changeActive(item) {\n    super._changeActive(item);\n    this.updateTriggerText(item);\n  }\n\n  /**\n   * Handles click on tab container.\n   * * If the click is on a tab, activates it.\n   * * If the click is on the button to open the drop down menu, does so.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    const button = eventMatches(event, this.options.selectorButton);\n    const trigger = eventMatches(event, this.options.selectorTrigger);\n    if (button) {\n      super.handleClick(event);\n      this.updateMenuState();\n    }\n    if (trigger) {\n      this.updateMenuState();\n    }\n  }\n\n  /**\n   * Handles arrow keys on tab container.\n   * * Up/Left keys are used to go to previous tab.\n   * * Down/Right keys are used to go to next tab.\n   * @param {Event} event The event triggering this method.\n   */\n  handleKeyDown(event) {\n    const triggerNode = this.element.querySelector(this.options.selectorTrigger);\n    if (triggerNode && triggerNode.offsetParent) {\n      return;\n    }\n\n    const direction = {\n      Left: -1,\n      Right: 1,\n      ArrowLeft: -1,\n      ArrowRight: 1,\n    }[event.key || event.keyIdentifier];\n\n    if (direction) {\n      const buttons = [... this.element.querySelectorAll(this.options.selectorButton)];\n      const button = this.element.querySelector(this.options.selectorButtonSelected);\n      const nextIndex = Math.max(buttons.indexOf(button) + direction, -1 /* For `button` not found in `buttons` */);\n      const nextIndexLooped = nextIndex >= 0 && nextIndex < buttons.length ? nextIndex :\n        nextIndex - Math.sign(nextIndex) * buttons.length;\n      this.setActive(buttons[nextIndexLooped], (error, item) => {\n        if (item) {\n          const link = item.querySelector(this.options.selectorLink);\n          if (link) {\n            link.focus();\n          }\n        }\n      });\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Shows/hides the drop down menu used in narrow mode.\n   */\n  updateMenuState() {\n    this.element.querySelector(this.options.selectorMenu).classList.toggle(this.options.classHidden);\n  }\n\n  /**\n   * Updates the text indicating the currently selected tab item.\n   * @param {HTMLElement} target The newly selected tab item.\n   */\n  updateTriggerText(target) {\n    this.element.querySelector(this.options.selectorTriggerText).textContent = target.textContent;\n  }\n}\n\n/**\n * The component options.\n * @member {Object} Tab#options\n * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n * @property {string} [selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n * @property {string} [selectorButton] The CSS selector to find tab containers.\n * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n * @property {string} [classActive] The CSS class for tab's selected state.\n * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a tab is selected.\n *   Cancellation of this event stops selection of tab.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n */\n\n/**\n * The map associating DOM element and tab container instance.\n * @type {WeakMap}\n */\nTab.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/tabs.js\n **/","Math.sign = Math.sign || function sign(x) {\n  const n = +x;\n  return n === 0 ? n : n / Math.abs(n);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/math-sign.js\n **/","import '../polyfills/array-from';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class OverflowMenu {\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.constructor.components.set(this.element, this);\n    this.element.ownerDocument.addEventListener('click', (event) => this.handleDocumentClick(event));\n    this.element.ownerDocument.addEventListener('keypress', (event) => this.handleKeyPress(event));\n  }\n\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  static init(target = document) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.overflowMenu !== undefined) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll('[data-overflow-menu]')].forEach(element => this.create(element));\n    }\n  }\n\n  handleDocumentClick(event) {\n    const isOfSelf = this.element.contains(event.target);\n    const shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\n    if (isOfSelf && this.element.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    toggleClass(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n  }\n\n  handleKeyPress(event) {\n    const key = event.key || event.which;\n    if (key === 'Enter' || key === 13) {\n      const isOfSelf = this.element.contains(event.target);\n      const shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\n      if (isOfSelf && this.element.tagName === 'A') {\n        event.preventDefault();\n      }\n\n      toggleClass(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\nOverflowMenu.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/overflow-menu.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport eventMatches from '../polyfills/event-matches';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class Modal {\n  /**\n   * Modal dialog.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign({\n      classVisible: 'is-visible',\n      eventBeforeShown: 'modal-beingshown',\n      eventAfterShown: 'modal-shown',\n      eventBeforeHidden: 'modal-beinghidden',\n      eventAfterHidden: 'modal-hidden',\n    }, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.hookCloseActions();\n  }\n\n  /**\n   * Instantiates modal dialog of the given element.\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates modal dialogs in the given element.\n   * If the given element indicates that it's an modal dialog (having `data-modal` attribute), instantiates it.\n   * Otherwise, instantiates modal dialogs by clicking on launcher buttons\n   * (buttons with `data-modal-target` attribute) of modal dialogs in the given node.\n   * @implements Component\n   * @param {Node} target The DOM node to instantiate modal dialogs in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this modal is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this modal is hidden.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.modal !== undefined) {\n      this.create(target, options);\n    } else {\n      const handler = (event) => {\n        const element = eventMatches(event, '[data-modal-target]');\n\n        if (element) {\n          const modalElements = [... element.ownerDocument.querySelectorAll(element.dataset.modalTarget)];\n          if (modalElements.length > 1) {\n            throw new Error('Target modal must be unique.');\n          }\n\n          if (modalElements.length === 1) {\n            if (element.tagName === 'A') {\n              event.preventDefault();\n            }\n\n            const modal = this.create(modalElements[0], options);\n            modal.show(element, (error, shownAlready) => {\n              if (!error && !shownAlready && modal.element.offsetWidth > 0 && modal.element.offsetHeight > 0) {\n                modal.element.focus();\n              }\n            });\n          }\n        }\n      };\n      target.addEventListener('click', handler);\n      return {\n        release: () => target.removeEventListener('click', handler),\n      };\n    }\n  }\n\n  /**\n   * Adds event listeners for closing this dialog.\n   */\n  hookCloseActions() {\n    this.element.addEventListener('click', (event) => {\n      if (event.currentTarget === event.target) this.hide();\n    });\n\n    if (this.keydownHandler) {\n      this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n      this.keydownHandler = null;\n    }\n\n    this.keydownHandler = (event) => {\n      if (event.which === 27) {\n        this.hide();\n      }\n    };\n\n    this.element.ownerDocument.body.addEventListener('keydown', this.keydownHandler);\n\n    [... this.element.querySelectorAll('[data-modal-close]')].forEach((element) => {\n      element.addEventListener('click', () => {\n        this.hide();\n      });\n    });\n  }\n\n  /**\n   * Internal method of {@linkcode Modal#show .show()} and  {@linkcode Modal#hide .hide()}, to change show/hidden state.\n   * @private\n   * @param {boolean} visible `true` to make this modal dialog visible.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(visible, callback) {\n    let finished;\n    const finishedTransition = () => {\n      if (!finished) {\n        finished = true;\n        this.element.removeEventListener('transitionend', finishedTransition);\n        callback();\n      }\n    };\n\n    this.element.addEventListener('transitionend', finishedTransition);\n    toggleClass(this.element, this.options.classVisible, visible);\n    const transitionDuration = parseFloat(this.element.ownerDocument.defaultView.getComputedStyle(this.element).transitionDuration);\n    if (isNaN(transitionDuration) || transitionDuration === 0) {\n      finishedTransition();\n    }\n  }\n\n  /**\n   * The callback called once showing/hiding this dialog is finished or is canceled.\n   * @callback Modal~stateChangeCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if the showing/hiding this dialog is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before showing/hiding this dialog happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {boolean} newState The new toggle state.\n   */\n\n  /**\n   * Shows this modal dialog.\n   * @param {HTMLElement} [launchingElement] The DOM element that triggered calling this function.\n   * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n   */\n  show(launchingElement, callback) {\n    if (typeof launchingElement === 'function') {\n      callback = launchingElement; // eslint-disable-line no-param-reassign\n      launchingElement = null; // eslint-disable-line no-param-reassign\n    }\n\n    if (launchingElement && !launchingElement.nodeType) {\n      throw new TypeError('DOM Node should be given for launchingElement.');\n    }\n\n    if (this.element.classList.contains(this.options.classVisible)) {\n      if (callback) {\n        callback(null, true);\n      }\n      return;\n    }\n\n    const eventStart = new CustomEvent(this.options.eventBeforeShown, {\n      bubbles: true,\n      cancelable: true,\n      detail: { launchingElement: launchingElement },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeState(true, () => {\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterShown, {\n          bubbles: true,\n          cancelable: true,\n          detail: { launchingElement: launchingElement },\n        }));\n        if (callback) {\n          callback();\n        }\n      });\n    } else {\n      const error = new Error('Showing dialog has been canceled.');\n      error.canceled = true;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  /**\n   * Hides this modal dialog.\n   * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n   */\n  hide(callback) {\n    if (!this.element.classList.contains(this.options.classVisible)) {\n      if (callback) {\n        callback(null, true);\n      }\n      return;\n    }\n\n    const eventStart = new CustomEvent(this.options.eventBeforeHidden, {\n      bubbles: true,\n      cancelable: true,\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeState(false, () => {\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterHidden), {\n          bubbles: true,\n          cancelable: true,\n        });\n        if (callback) {\n          callback();\n        }\n      });\n    } else {\n      const error = new Error('Hiding dialog has been canceled.');\n      error.canceled = true;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    if (this.keydownHandler) {\n      this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n      this.keydownHandler = null;\n    }\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * @deprecated\n   */\n  static hook() {\n    console.warn('Modals.hook() is deprecated. Use Modals.init() instead.'); // eslint-disable-line no-console\n  }\n}\n\n/**\n * The component options.\n * @member {Object} Modal#options\n * @property {string} [classVisible] The CSS class for the visible state.\n * @property {string} [eventBeforeShown]\n *   The name of the custom event fired before this modal is shown.\n *   Cancellation of this event stops showing the modal.\n * @property {string} [eventAfterShown] The name of the custom event fired after this modal is shown.\n * @property {string} [eventBeforeHidden]\n *   The name of the custom event fired before this modal is hidden.\n *   Cancellation of this event stops hiding the modal.\n * @property {string} [eventAfterHidden] The name of the custom event fired after this modal is hidden.\n */\n\n/**\n * The map associating DOM element and modal instance.\n * @type {WeakMap}\n */\nModal.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/modals.js\n **/","const missingNativeCustomEvent = (() => {\n  try {\n    new CustomEvent('test-event'); // eslint-disable-line no-new\n  } catch (error) {\n    return true;\n  }\n})();\nif (missingNativeCustomEvent) {\n  window.CustomEvent = function CustomEvent(type, init = {}) {\n    const event = document.createEvent('HTMLEvents');\n    event.initEvent(type, init.bubbles, init.cancelable);\n    if (init.detail) {\n      event.detail = init.detail;\n    }\n    return event;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/custom-event.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport eventMatches from '../polyfills/event-matches';\n\nexport default class HeaderNav {\n  /**\n   * Header with taxonomy menu.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a taxonomy menu.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign({\n      selectorTriggerLabel: '.current-taxonomy',\n      classActive: 'taxonomy-nav--active',\n      selectorMenu: '.taxonomy-menu',\n      selectorItem: '.taxonomy-item',\n      selectorItemLink: '.taxonomy-item--taxonomy-menu',\n      selectorLabel: '.taxonomy-item__label',\n      eventBeforeShown: 'header-beingshown',\n      eventAfterShown: 'header-shown',\n      eventBeforeHidden: 'header-beinghidden',\n      eventAfterHidden: 'header-hidden',\n      eventBeforeSelected: 'header-beingselected',\n      eventAfterSelected: 'header-selected',\n    }, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.menuNode = this.element.querySelector(this.options.selectorMenu);\n\n    this.element.addEventListener('keydown', (event) => this.toggleNav(event));\n\n    [... this.element.querySelectorAll(this.options.selectorItemLink)].forEach((item) => {\n      item.addEventListener('click', (e) => this.select(e));\n    });\n  }\n\n  /**\n   * Instantiates taxonomy menus in the given element.\n   * If the given element indicates that it's an taxonomy menu (having `data-nav` attribute), instantiates it.\n   * Otherwise, instantiates taxonomy menus by clicking on launcher buttons\n   * (buttons with `data-nav-target` attribute) of taxonomy menus in the given node.\n   * @implements Component\n   * @param {Node} target The DOM node to instantiate taxonomy menus in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.nav !== undefined) {\n      this.create(target, options);\n    } else {\n      const handler = (event) => {\n        const element = eventMatches(event, '[data-nav-target]');\n\n        if (element) {\n          const headerElements = [... element.ownerDocument.querySelectorAll(element.dataset.navTarget)];\n          if (headerElements.length > 1) {\n            throw new Error('Target header must be unique.');\n          }\n\n          if (headerElements.length === 1) {\n            if (element.tagName === 'A') {\n              event.preventDefault();\n            }\n            this.create(headerElements[0], options).toggleNav(event);\n          }\n        }\n      };\n\n      target.addEventListener('click', handler);\n      target.addEventListener('keydown', handler);\n\n      return {\n        release: () => {\n          target.removeEventListener('keydown', handler);\n          target.removeEventListener('click', handler);\n        },\n      };\n    }\n  }\n\n  /**\n   * Instantiates taxonomy menu of the given element.\n   * @param {HTMLElement} element The element working as a taxonomy menu.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Shows/hides this taxonomy menu.\n   * @param {Event} event The event triggering this function.\n   */\n  toggleNav(event) {\n    const isActive = this.element.classList.contains(this.options.classActive);\n    let add;\n    if (event.type === 'click' || event.type === 'keydown' && event.which === 40) {\n      // Toggle button or ESC key on nav\n      add = !isActive;\n    } else if (event.type === 'keydown' && event.which === 27) {\n      // Down arrow on launch button\n      add = false;\n    } else {\n      return;\n    }\n\n    const launchingElement = eventMatches(event, '[data-nav-target]') || event.currentTarget;\n    if (launchingElement.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    const eventStart = new CustomEvent(this.options[add ? 'eventBeforeShown' : 'eventBeforeHidden'], {\n      bubbles: true,\n      cancelable: true,\n      detail: { launchingElement: launchingElement },\n    });\n    const defaultNotPrevented = this.element.dispatchEvent(eventStart);\n\n    if (add) {\n      this.triggerNode = launchingElement;\n      this.triggerLabelNode = this.triggerNode.querySelector(this.options.selectorTriggerLabel);\n    }\n\n    if (defaultNotPrevented) {\n      this.element.classList[add ? 'add' : 'remove'](this.options.classActive);\n      (this.element.classList.contains(this.options.classActive) ? this.menuNode : this.triggerNode).focus();\n      this.element.dispatchEvent(new CustomEvent(this.options[add ? 'eventAfterShown' : 'eventAfterHidden'], {\n        bubbles: true,\n        cancelable: true,\n        detail: { launchingElement: launchingElement },\n      }));\n    }\n  }\n\n  /**\n   * Selects a menu item.\n   * @param {Event} event The event triggering this function.\n   */\n  select(event) {\n    const activatedElement = event.currentTarget;\n    const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        initiatingEvent: event,\n        itemElement: activatedElement,\n      },\n    });\n\n    if (this.element.dispatchEvent(eventStart)) {\n      [... this.element.querySelectorAll(this.options.selectorItem)].forEach((element) => {\n        if (element.contains(activatedElement)) {\n          element.classList.add('selected');\n        } else if (element.classList.contains('selected')) {\n          element.classList.remove('selected');\n        }\n      });\n      activatedElement.classList.add('selected');\n      if (this.triggerLabelNode) {\n        this.triggerLabelNode.textContent = activatedElement.querySelector(this.options.selectorLabel).textContent;\n      }\n      this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { itemElement: activatedElement },\n      }));\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * @deprecated\n   */\n  static hook() {\n    console.warn('HeaderNav.hook() is deprecated. Use HeaderNav.init() instead.'); // eslint-disable-line no-console\n  }\n}\n\n/**\n * The component options.\n * @member {Object} HeaderNav#options\n * @property {string} [selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n * @property {string} [selectorMenu] The CSS selector to find the container of the menu items.\n * @property {string} [selectorItem] The CSS selector to find the menu items.\n * @property {string} [selectorItemLink] The CSS selector to find the link in the menu items.\n * @property {string} [selectorLabel] The CSS selector to find the label of the menu items.\n * @property {string} [classActive] The CSS class for the visible state.\n * @property {string} [eventBeforeShown]\n *   The name of the custom event fired before this taxonomy menu is shown.\n *   Cancellation of this event stops showing the taxonomy menu.\n * @property {string} [eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n * @property {string} [eventBeforeHidden]\n *   The name of the custom event fired before this taxonomy menu is hidden.\n *   Cancellation of this event stops hiding the taxonomy menu.\n * @property {string} [eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a menu item is selected.\n *   Cancellation of this event stops the selection.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a menu item is selected.\n */\n\n/**\n * The map associating DOM element and taxonomy menu instance.\n * @type {WeakMap}\n */\nHeaderNav.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/header.js\n **/","export default class Toolbars {\n  /**\n   * Search button in tool bar.\n   * @implements Component\n   * @param {HTMLElement} element The element working as an search button.\n   */\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.searchFieldNode = this.element.ownerDocument.querySelector(this.element.dataset.listIconsSearchActionTarget);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleActionClick(event));\n  }\n\n  /**\n   * Instantiates a search button of the given element.\n   * @param {HTMLElement} element The element working as a search button.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates search buttons in the given node.\n   * If the given element indicates that it's an search button (having `data-list-icons-search-action-target` attribute), instantiates it.\n   * Otherwise, instantiates search buttons by searching for search buttons in the given node.\n   * @param {Node} target The DOM node to instantiate search buttons in. Should be a document or an element.\n   */\n  static init(target = document) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.listIconsSearchActionTarget !== undefined) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll('[data-list-icons-search-action-target]')].forEach(element => this.create(element));\n    }\n  }\n\n  /**\n   * Show/hide search box.\n   * @param {Event} event The event triggering this method.\n   */\n  handleActionClick(event) {\n    const searchActionNode = event.currentTarget;\n\n    if (searchActionNode.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    this.element.classList.toggle('show-search');\n    if (this.searchFieldNode) {\n      this.searchFieldNode.classList.toggle('show-search');\n      this.searchFieldNode.value = '';\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and search button instance.\n * @type {WeakMap}\n */\nToolbars.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/toolbars.js\n **/","import toggleClass from '../polyfills/toggle-class';\n\nexport default class Loading {\n  /**\n   * Spinner indicating loading state.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} options The component options.\n   * @param {boolean} options.active `true` if this spinner should roll.\n   */\n  constructor(element, options = { active: true }) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.active = 'active' in options ? options.active : true;\n    this.ie = false;\n\n    // Check if browser is Internet Explorer\n    if (options.ie || window.ActiveXObject || 'ActiveXObject' in window) {\n      this.ie = true;\n      this.element.classList.add('bx--dropdown--ie');\n    }\n\n    this.constructor.components.set(this.element, this);\n\n    // Initialize spinner\n    this.set(this.active);\n  }\n\n  /**\n   * Instantiates spinner of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates spinner in the given node.\n   * If the given element indicates that it's an spinner (having `data-loading` attribute), instantiates it.\n   * Otherwise, instantiates spinners by searching for spinners in the given node.\n   * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.loading !== undefined) {\n      this.create(target, options);\n    } else {\n      [... target.querySelectorAll('[data-loading]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  /**\n   * Sets active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n  set(active) {\n    if (typeof active !== 'boolean') {\n      throw new TypeError('set expects a boolean.');\n    }\n\n    this.active = active;\n\n    if (this.ie) {\n      toggleClass(this.element, 'bx--loading--stop--ie', !this.active);\n    }\n    toggleClass(this.element, 'bx--loading--stop', !this.active);\n\n    return this;\n  }\n\n  /**\n   * Toggles active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n  toggle() {\n    return this.set(!this.active);\n  }\n\n  /**\n   * @returns {boolean} `true` if this spinner is rolling roll.\n   */\n  isActive() {\n    return this.active;\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and spinner instance.\n * @type {WeakMap}\n */\nLoading.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/loading.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\n\nexport default class Dropdown {\n  /**\n   * A selector with drop downs.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign({\n      selectorItem: '[data-option] > .bx--dropdown__link',\n      selectorItemSelected: '[data-option] > .bx--dropdown__link.bx--dropdown--selected',\n      classSelected: 'bx--dropdown--selected',\n      eventBeforeSelected: 'dropdown-beingselected',\n      eventAfterSelected: 'dropdown-selected',\n    }, options);\n\n    this.element.dataset.dropdown = '';\n    this.constructor.components.set(this.element, this);\n\n    this.element.ownerDocument.addEventListener('click', (event) => this.toggle(event));\n    this.element.addEventListener('keypress', (event) => this.toggle(event));\n    this.element.addEventListener('click', (event) => this.selected(event));\n  }\n\n  /**\n   * Instantiates selector of the given element.\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates selectors in the given node.\n   * If the given element indicates that it's an selector (having `data-dropdown` attribute), instantiates it.\n   * Otherwise, instantiates selectors by searching for selectors in the given node.\n   * @param {Node} target The DOM node to instantiate selectors in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.loading !== undefined) {\n      this.create(target, options);\n    } else {\n      [... target.querySelectorAll('[data-dropdown]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * Opens and closes the dropdown menu.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    const isOfSelf = this.element.contains(event.target);\n\n    if (isOfSelf) {\n      this.element.classList.toggle('bx--dropdown--open');\n    } else if (!isOfSelf && this.element.classList.contains('bx--dropdown--open')) {\n      this.element.classList.remove('bx--dropdown--open');\n    }\n  }\n\n  /**\n   * Handles clicking on the dropdown options, doing the following:\n   * * Change Dropdown text to selected option.\n   * * Remove selected option from options when selected.\n   * * Emit custom events.\n   * @param {Event} event The event triggering this method.\n   */\n  selected(event) {\n    const activatedElement = event.target;\n    if (activatedElement.parentElement.dataset.option !== undefined) {\n      const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { item: activatedElement },\n      });\n\n      if (this.element.dispatchEvent(eventStart)) {\n        this.element.firstElementChild.textContent = activatedElement.textContent;\n        this.element.dataset.value = activatedElement.parentElement.dataset.value;\n\n        [... this.element.querySelectorAll(this.options.selectorItemSelected)].forEach((item) => {\n          if (activatedElement !== item) {\n            item.classList.remove(this.options.classSelected);\n          }\n        });\n\n        activatedElement.classList.add(this.options.classSelected);\n\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n          bubbles: true,\n          cancelable: true,\n          detail: { item: activatedElement },\n        }));\n      }\n    }\n  }\n}\n\n\n/**\n * The component options.\n * @member {Object} Dropdown#options\n * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n * @property {string} [classSelected] The CSS class for the selected dropdown item.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a drop down item is selected.\n *   Cancellation of this event stops selection of drop down item.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n */\n\n/**\n * The map associating DOM element and selector instance.\n * @type {WeakMap}\n */\nDropdown.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/dropdown.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/math-sign';\n\nexport default class Card {\n  /**\n   * The container for cards.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a container.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n    this.options = Object.assign({\n      selectorCard: '.bx--card',\n    }, options);\n    this.constructor.components.set(this.element, this);\n    this.element.addEventListener('keydown', (event) => this.cardKeyPress(event));\n  }\n\n  /**\n   * Instantiates card container of the given element.\n   * @param {HTMLElement} element The element working as a container.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates card container in the given node.\n   * If the given element indicates that it's an card container (having `data-card-list` attribute), instantiates it.\n   * Otherwise, instantiates card containers by searching for card containers in the given node.\n   * @param {Node} target The DOM node to instantiate card containers in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.cardList !== undefined) {\n      this.create(target, options);\n    } else {\n      [... target.querySelectorAll('[data-card-list]')].forEach(element => this.create(element, options));\n    }\n  }\n\n  /**\n   * Goes back/forward among cards,\n   * right arrow key for going forward, left arrow key for going backward.\n   * @param {Event} event The event triggering this method.\n   */\n  cardKeyPress(event) {\n    const direction = {\n      Left: -1,\n      Right: 1,\n      ArrowLeft: -1,\n      ArrowRight: 1,\n    }[event.key || event.keyIdentifier];\n    const card = eventMatches(event, this.options.selectorCard);\n\n    if (direction && card && card === document.activeElement) {\n      const cards = [... this.element.querySelectorAll(this.options.selectorCard)];\n      const nextIndex = Math.max(cards.indexOf(card) + direction, -1 /* For `card` not found in `cards` */);\n      const nextIndexLooped = nextIndex >= 0 && nextIndex < cards.length ? nextIndex :\n        nextIndex - Math.sign(nextIndex) * cards.length;\n      cards[nextIndexLooped].focus();\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * @member {Object} Card#options\n * @property {string} [selectorCard] The CSS selector to find cards.\n */\n\n/**\n * The map associating DOM element and card list instance.\n * @type {WeakMap}\n */\nCard.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/card.js\n **/","import '../polyfills/array-from';\n\nexport default class NumberInput {\n  /**\n   * Number input UI.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a number input UI.\n   */\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.constructor.components.set(this.element, this);\n    this.element.addEventListener('click', (event) => this.handleClick(event));\n  }\n\n  /**\n   * Instantiates number input UI of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates number input UI in the given node.\n   * If the given element indicates that it's an number input UI (having `data-numberinput` attribute), instantiates it.\n   * Otherwise, instantiates number input UIs by searching for number input UIs in the given node.\n   * @param {Node} target The DOM node to instantiate number input UIs in. Should be a document or an element.\n   */\n  static init(target = document) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.numberinput !== undefined) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll('[data-numberinput]')].forEach(element => this.create(element));\n    }\n  }\n\n  /**\n   * Increase/decrease number by clicking on up/down icons.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const state = event.target.classList;\n    const numberInput = this.element.querySelector('.bx--number__input');\n\n    if (state.contains('bx--number__arrow--icon-up')) {\n      numberInput.stepUp();\n    } else if (state.contains('bx--number__arrow--icon-down')) {\n      numberInput.stepDown();\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and number input UI instance.\n * @type {WeakMap}\n */\nNumberInput.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/number-input.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/object-assign';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class Table {\n  /**\n   * Data table.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a data table.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n\n    this.options = Object.assign({\n      selectorTitle: '.bx--table__column-title',\n      selectorRow: '.bx--table__row',\n      selectorCheckbox: '.bx--checkbox',\n      classSortState: 'bx--table__column-title--rotated',\n      classCheckState: 'bx--table__row--checked',\n      eventBeforeSortToggled: 'table-sort-beingtoggled',\n      eventAfterSortToggled: 'table-sort-toggled',\n      eventBeforeCheckToggled: 'table-check-beingtoggled',\n      eventAfterCheckToggled: 'table-check-toggled',\n    }, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleClick(event));\n  }\n\n  /**\n   * Instantiates a data table of the given element.\n   * @param {HTMLElement} element The element working as a data table.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Sets up the given node to instantiate data tables in.\n   * If the given element indicates that it's an data table (having `data-table` attribute), instantiates it.\n   * Otherwise, lazily instantiates data table when it's clicked on.\n   * @param {Node} target The DOM node to instantiate data tables in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options) {\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.dataset.table !== undefined) {\n      this.create(target, options);\n    } else {\n      const handler = (event) => {\n        const element = eventMatches(event, '[data-table]');\n        if (element && !this.components.has(element)) {\n          this.create(element, options).handleClick(event);\n        }\n      };\n      target.addEventListener('click', handler);\n      return {\n        release: () => target.removeEventListener('click', handler),\n      };\n    }\n  }\n\n  /**\n   * Handles click on data table.\n   * * If the click is on a column title, toggles its sorting state.\n   * * If the click is on a check box, toggles the check box.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const title = eventMatches(event, this.options.selectorTitle);\n    const row = eventMatches(event, this.options.selectorRow);\n    const checkbox = eventMatches(event, this.options.selectorCheckbox);\n    if (title) {\n      this.toggleState('Sort', title);\n    }\n    if (row && checkbox) {\n      this.toggleState('Check', row);\n    }\n  }\n\n  /**\n   * The callback called once toggling is finished or is canceled.\n   * @callback Table~toggleStateCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if the toggling is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before toggling happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {HTMLElement} element The toggled element.\n   * @param {boolean} newState The new toggle state.\n   */\n\n  /**\n   * Toggles a sorting state or a check box's state.\n   * @param {string} type\n   *   Specifies what state to toggle:\n   *   * `\"Sort\"` for toggling a sorting state.\n   *   * `\"Check\"` for toggling a check box's state.\n   * @param {HTMLElement} element The DOM element to toggle its state.\n   * @param {Table~toggleStateCallback} callback The callback called once toggling is finished or is canceled.\n   */\n  toggleState(type, element, callback) {\n    const newState = !element.classList.contains(this.options[`class${type}State`]);\n    const eventStart = new CustomEvent(this.options[`eventBefore${type}Toggled`], {\n      bubbles: true,\n      cancelable: true,\n      detail: { newState },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (element.dispatchEvent(eventStart)) {\n      toggleClass(element, this.options[`class${type}State`], newState);\n      // this._changeActive(item);\n      element.dispatchEvent(new CustomEvent(this.options[`eventAfter${type}Toggled`], {\n        bubbles: true,\n        cancelable: true,\n        detail: { newState },\n      }));\n      if (callback) {\n        callback(null, element, newState);\n      }\n    } else {\n      const error = new Error('Toggling on table has been canceled.');\n      error.canceled = true;\n      error.element = element;\n      error.newState = newState;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * @member {Object} Table#options\n * @property {string} [selectorTitle] The CSS selector to find column titles.\n * @property {string} [selectorRow] The CSS selector to find rows.\n * @property {string} [selectorCheckbox] The CSS selector to find check boxes.\n * @property {string} [classSortState] The CSS class for the sorting state.\n * @property {string} [classCheckState] The CSS class for the checked state.\n * @property {string} [eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n * @property {string} [eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n * @property {string} [eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n * @property {string} [eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n */\n\n/**\n * The map associating DOM element and data table instance.\n * @type {WeakMap}\n */\nTable.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/table.js\n **/"],"sourceRoot":""}