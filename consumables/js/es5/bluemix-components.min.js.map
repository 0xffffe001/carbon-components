{"version":3,"sources":["webpack:///bluemix-components.min.js","webpack:///webpack/bootstrap 612a202b7e1760bdcb1e","webpack:///./consumables/js/es2015/index.js","webpack:///./~/svgxuse/svgxuse.js","webpack:///./consumables/js/es2015/file-uploader.js","webpack:///./consumables/js/polyfills/element-matches.js","webpack:///./consumables/js/es2015/fab.js","webpack:///./consumables/js/polyfills/event-matches.js","webpack:///./consumables/js/misc/on.js","webpack:///./consumables/js/es2015/content-switcher.js","webpack:///./consumables/js/polyfills/array-from.js","webpack:///./consumables/js/polyfills/object-assign.js","webpack:///./consumables/js/polyfills/toggle-class.js","webpack:///./consumables/js/es2015/tabs.js","webpack:///./consumables/js/polyfills/math-sign.js","webpack:///./consumables/js/es2015/overflow-menu.js","webpack:///./consumables/js/es2015/modals.js","webpack:///./consumables/js/polyfills/custom-event.js","webpack:///./consumables/js/es2015/header.js","webpack:///./consumables/js/es2015/toolbars.js","webpack:///./consumables/js/es2015/loading.js","webpack:///./consumables/js/es2015/dropdown.js","webpack:///./consumables/js/es2015/card.js","webpack:///./consumables/js/es2015/number-input.js","webpack:///./consumables/js/es2015/table.js","webpack:///./consumables/js/es2015/detail-page-header.js","webpack:///./~/lodash.debounce/index.js","webpack:///./consumables/js/es2015/left-nav.js","webpack:///./consumables/js/es2015/unified-header.js","webpack:///./consumables/js/es2015/inline-left-nav.js","webpack:///./consumables/js/es2015/profile-switcher.js","webpack:///./consumables/js/es2015/search-with-options.js"],"names":["BluemixComponents","modules","__webpack_require__","moduleId","installedModules","exports","module","id","loaded","call","m","c","p","_interopRequireDefault","obj","__esModule","default","Object","defineProperty","value","ProfileSwitcher","DetailPageHeader","Table","NumberInput","Card","Dropdown","Loading","Toolbars","LeftNav","HeaderNav","Modal","OverflowMenu","Tab","ContentSwitcher","FileUploader","FabButton","settings","undefined","_fileUploader","_fileUploader2","_fab","_fab2","_contentSwitcher","_contentSwitcher2","_tabs","_tabs2","_overflowMenu","_overflowMenu2","_modals","_modals2","_header","_header2","_toolbars","_toolbars2","_loading","_loading2","_dropdown","_dropdown2","_card","_card2","_numberInput","_numberInput2","_table","_table2","_detailPageHeader","_detailPageHeader2","_leftNav","_leftNav2","_unifiedHeader","_unifiedHeader2","_inlineLeftNav","_inlineLeftNav2","_profileSwitcher","_profileSwitcher2","_searchWithOptions","_searchWithOptions2","init","disableAutoInit","document","readyState","addEventListener","setTimeout","window","checkUseElems","tid","cache","create","debouncedCheck","clearTimeout","unobserveChanges","observeChanges","observer","MutationObserver","observe","documentElement","childList","subtree","attributes","disconnect","removeEventListener","ignore","createRequest","url","getOrigin","href","a","createElement","protocol","hostname","Request","origin2","origin","location","XMLHttpRequest","withCredentials","XDomainRequest","xlinkNS","observeIfDone","inProgressCount","attrUpdateFunc","spec","base","useEl","setAttributeNS","hash","onloadFunc","xhr","svg","body","x","onload","innerHTML","responseText","getElementsByTagName","setAttribute","style","position","width","height","overflow","insertBefore","firstChild","onErrorTimeout","onerror","ontimeout","bcr","i","isHidden","uses","fallback","length","getBoundingClientRect","getAttributeNS","split","left","right","top","bottom","getElementById","open","send","abort","winLoad","_toConsumableArray","arr","Array","isArray","arr2","from","_classCallCheck","instance","Constructor","TypeError","_createClass","defineProperties","target","props","descriptor","enumerable","configurable","writable","key","protoProps","staticProps","prototype","element","_this","this","options","arguments","nodeType","Node","ELEMENT_NODE","assign","constructor","labelSelector","dataset","label","labelNode","parentNode","querySelector","nextElementSibling","components","set","event","updateLabel","fileName","files","multipleCaption","replace","pop","textContent","get","_this2","effectiveOptions","DOCUMENT_NODE","Error","matches","selectorInit","concat","querySelectorAll","forEach","WeakMap","matchesFuncName","filter","name","Element","_eventMatches","_eventMatches2","_on","_on2","toggle","tagName","preventDefault","state","has","eventMatches","selector","traverse","currentTarget","on","_len","args","_key","apply","release","_toggleClass","_toggleClass2","handleClick","input","checked","_changeActive","button","selectorButton","setActive","item","itemLink","selectorLink","link","selectorButtons","classActive","ownerDocument","removeAttribute","callback","eventStart","CustomEvent","eventBeforeSelected","bubbles","cancelable","detail","dispatchEvent","eventAfterSelected","error","canceled","_this3","selectorButtonSelected","slice","inDst","dst","src","keys","prop","toggleClass","add","classList","contains","_possibleConstructorReturn","self","ReferenceError","_inherits","subClass","superClass","setPrototypeOf","__proto__","_get","object","property","receiver","Function","desc","getOwnPropertyDescriptor","parent","getPrototypeOf","getter","_ContentSwitcher","handleKeyDown","selected","updateTriggerText","trigger","selectorTrigger","updateMenuState","triggerNode","offsetParent","direction","Left","Right","ArrowLeft","ArrowRight","keyIdentifier","buttons","nextIndex","Math","max","indexOf","nextIndexLooped","sign","focus","selectorMenu","classHidden","selectorTriggerText","n","abs","hDocumentClick","handleDocumentClick","hDocumentKeyPress","handleKeyPress","isOfSelf","shouldBeOpen","which","getTransitionDuration","computedStyle","defaultView","getComputedStyle","durations","transitionDuration","map","parseFloat","duration","isNaN","hookCloseActions","hide","keydownHandler","visible","finished","finishedTransition","classVisible","classNoScroll","launchingElementOrEvent","launchingElementOrEventOmitted","launchingElement","delegateTarget","launchingEvent","type","eventBeforeShown","_changeState","eventAfterShown","_this4","eventBeforeHidden","eventAfterHidden","_this5","attribInitTarget","modalElements","getAttribute","modal","show","shownAlready","offsetWidth","offsetHeight","console","warn","missingNativeCustomEvent","createEvent","initEvent","_typeof","Symbol","iterator","menuNode","toggleNav","selectorItemLink","e","select","isActive","defaultNotPrevented","triggerLabelNode","selectorTriggerLabel","activatedElement","initiatingEvent","itemElement","selectorItem","remove","selectorLabel","_ret","handler","headerElements","v","searchFieldNode","listIconsSearchActionTarget","handleActionClick","searchActionNode","active","ie","ActiveXObject","dropdown","parentElement","option","dropdownType","firstElementChild","classSelected","selectorItemSelected","cardKeyPress","card","selectorCard","activeElement","cards","numberInput","stepUp","stepDown","title","selectorTitle","row","selectorRow","checkbox","selectorCheckbox","toggleState","newState","classSortState","classCheckState","eventBeforeSortToggled","eventAfterSortToggled","eventBeforeCheckToggled","eventAfterCheckToggled","_lodash","_lodash2","debouncedScroll","handleScroll","bind","scrollY","slideUp","global","debounce","func","wait","invokeFunc","time","lastArgs","thisArg","lastThis","lastInvokeTime","result","leadingEdge","timerId","timerExpired","leading","remainingWait","timeSinceLastCall","lastCallTime","timeSinceLastInvoke","maxing","nativeMin","maxWait","shouldInvoke","now","trailingEdge","trailing","cancel","flush","debounced","isInvoking","FUNC_ERROR_TEXT","toNumber","isObject","nativeMax","isObjectLike","isSymbol","objectToString","symbolTag","NAN","other","valueOf","reTrim","isBinary","reIsBinary","test","reIsOctal","freeParseInt","reIsBadHex","parseInt","freeGlobal","freeSelf","root","objectProto","toString","min","Date","leftNavSectionActive","selectorLeftNav","selectorLeftNavList","selectorLeftNavNestedList","selectorLeftNavToggleOpen","selectorLeftNavToggleClose","selectorLeftNavListItem","selectorLeftNavListItemLink","selectorLeftNavNestedListItem","selectorLeftNavArrowIcon","selectorLeftNavFlyoutMenu","selectorLeftNavFlyoutItem","selectorLeftNavSections","selectorLeftNavSection","selectorLeftNavSectionLink","selectorLeftNavSectionIcon","selectorLeftNavCurrentSection","selectorLeftNavCurrentSectionTitle","selectorLeftNavCurrentSectionIcon","selectorLeftNavListItemHasChildren","selectorLeftNavListItemHasFlyout","selectorLeftNavAllListItems","classActiveTrigger","classActiveLeftNav","classActiveLeftNavListItem","classExpandedLeftNavListItem","classFlyoutDisplayed","classItemHasChildren","classNavSection","classNavSectionTransition","classNavSectionAnchor","classNavSectionLink","classNavHeaderTitle","classItemFade","classItemHidden","classListHidden","classListTop","hookOpenActions","hookListSectionEvents","hookListItemsEvents","evt","leftNavContainer","selectedNav","selectedNavValue","leftNavSection","selectedNavLink","leftNav","leftNavSections","children","selectedNavTitle","currentLeftNavList","newLeftNavList","currentLeftNavItems","reverse","newLeftNavItems","fadeOutTime","counter","counterIteration","openBtn","closeBtn","tabIndex","toggleMenu","closeMenu","handleSectionItemClick","_this6","leftNavList","list","leftNavItem","childItem","hasChildren","flyoutItem","addActiveListItem","flyoutMenu","handleNestedListClick","offsetTop","scrollTop","offsetLeft","round","flyouts","flyout","_this7","flyoutMenus","menu","_this8","currentItem","hideAllFlyoutMenus","clickTarget","isToggleBtn","isOpen","isUnifiedHeader","shouldClose","flyoutOpen","listItem","_this9","listItems","_this10","leftNavSectionItem","log","selectedLeftNavSectionItem","selectedLeftNavSectionItemTitle","selectedLeftNavSectionItemIcon","selectedLeftNavSectionItemUse","selectedLeftNavSectionValue","leftNavCurrentSection","leftNavSectionItemLink","leftNavSectionItemIcon","leftNavSectionItemIconUse","leftNavSectionValue","newLeftNavSectionItem","newLeftNavSectionItemAnchor","newLeftNavSectionItemIcon","cloneNode","newLeftNavSectionItemLink","animateNavSection","animateNavList","appendChild","removeChild","_this11","UnifiedHeader","InlineLeftNav","leftNavItemWithChildren","selectorToggle","determineSwitcherValues","handleBlur","classSwitcherOpen","isToggle","isHovered","nameElement","selectorAccount","regionElement","selectorRegion","orgElement","selectorOrg","spaceElement","selectorSpace","menuElement","nameDropdownValue","selectorAccountDropdown","regionDropdownValue","selectorRegionDropdown","orgDropdownValue","selectorOrgDropdown","spaceDropdownValue","selectorSpaceDropdown","nameShort","orgShort","spaceShort","substr","selectorProfileSwitcher","selectorDropdown","SearchWithOptions","selectorToggleLayoutBtn","toggleLayout","btn","iconContainers","selectorIconContainer","container","classHiddenContainer"],"mappings":"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","file":"bluemix-components.min.js","sourcesContent":["var BluemixComponents =\n/******/ (function(modules) { // webpackBootstrap\n/******/ \t// The module cache\n/******/ \tvar installedModules = {};\n/******/\n/******/ \t// The require function\n/******/ \tfunction __webpack_require__(moduleId) {\n/******/\n/******/ \t\t// Check if module is in cache\n/******/ \t\tif(installedModules[moduleId])\n/******/ \t\t\treturn installedModules[moduleId].exports;\n/******/\n/******/ \t\t// Create a new module (and put it into the cache)\n/******/ \t\tvar module = installedModules[moduleId] = {\n/******/ \t\t\texports: {},\n/******/ \t\t\tid: moduleId,\n/******/ \t\t\tloaded: false\n/******/ \t\t};\n/******/\n/******/ \t\t// Execute the module function\n/******/ \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n/******/\n/******/ \t\t// Flag the module as loaded\n/******/ \t\tmodule.loaded = true;\n/******/\n/******/ \t\t// Return the exports of the module\n/******/ \t\treturn module.exports;\n/******/ \t}\n/******/\n/******/\n/******/ \t// expose the modules object (__webpack_modules__)\n/******/ \t__webpack_require__.m = modules;\n/******/\n/******/ \t// expose the module cache\n/******/ \t__webpack_require__.c = installedModules;\n/******/\n/******/ \t// __webpack_public_path__\n/******/ \t__webpack_require__.p = \"\";\n/******/\n/******/ \t// Load entry module and return exports\n/******/ \treturn __webpack_require__(0);\n/******/ })\n/************************************************************************/\n/******/ ([\n/* 0 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.ProfileSwitcher = exports.DetailPageHeader = exports.Table = exports.NumberInput = exports.Card = exports.Dropdown = exports.Loading = exports.Toolbars = exports.LeftNav = exports.HeaderNav = exports.Modal = exports.OverflowMenu = exports.Tab = exports.ContentSwitcher = exports.FileUploader = exports.FabButton = exports.settings = undefined;\n\t\n\t__webpack_require__(1);\n\t\n\tvar _fileUploader = __webpack_require__(2);\n\t\n\tvar _fileUploader2 = _interopRequireDefault(_fileUploader);\n\t\n\tvar _fab = __webpack_require__(4);\n\t\n\tvar _fab2 = _interopRequireDefault(_fab);\n\t\n\tvar _contentSwitcher = __webpack_require__(7);\n\t\n\tvar _contentSwitcher2 = _interopRequireDefault(_contentSwitcher);\n\t\n\tvar _tabs = __webpack_require__(11);\n\t\n\tvar _tabs2 = _interopRequireDefault(_tabs);\n\t\n\tvar _overflowMenu = __webpack_require__(13);\n\t\n\tvar _overflowMenu2 = _interopRequireDefault(_overflowMenu);\n\t\n\tvar _modals = __webpack_require__(14);\n\t\n\tvar _modals2 = _interopRequireDefault(_modals);\n\t\n\tvar _header = __webpack_require__(16);\n\t\n\tvar _header2 = _interopRequireDefault(_header);\n\t\n\tvar _toolbars = __webpack_require__(17);\n\t\n\tvar _toolbars2 = _interopRequireDefault(_toolbars);\n\t\n\tvar _loading = __webpack_require__(18);\n\t\n\tvar _loading2 = _interopRequireDefault(_loading);\n\t\n\tvar _dropdown = __webpack_require__(19);\n\t\n\tvar _dropdown2 = _interopRequireDefault(_dropdown);\n\t\n\tvar _card = __webpack_require__(20);\n\t\n\tvar _card2 = _interopRequireDefault(_card);\n\t\n\tvar _numberInput = __webpack_require__(21);\n\t\n\tvar _numberInput2 = _interopRequireDefault(_numberInput);\n\t\n\tvar _table = __webpack_require__(22);\n\t\n\tvar _table2 = _interopRequireDefault(_table);\n\t\n\tvar _detailPageHeader = __webpack_require__(23);\n\t\n\tvar _detailPageHeader2 = _interopRequireDefault(_detailPageHeader);\n\t\n\tvar _leftNav = __webpack_require__(25);\n\t\n\tvar _leftNav2 = _interopRequireDefault(_leftNav);\n\t\n\tvar _unifiedHeader = __webpack_require__(26);\n\t\n\tvar _unifiedHeader2 = _interopRequireDefault(_unifiedHeader);\n\t\n\tvar _inlineLeftNav = __webpack_require__(27);\n\t\n\tvar _inlineLeftNav2 = _interopRequireDefault(_inlineLeftNav);\n\t\n\tvar _profileSwitcher = __webpack_require__(28);\n\t\n\tvar _profileSwitcher2 = _interopRequireDefault(_profileSwitcher);\n\t\n\tvar _searchWithOptions = __webpack_require__(29);\n\t\n\tvar _searchWithOptions2 = _interopRequireDefault(_searchWithOptions);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\t// ====================//\n\t// Imports and Exports //\n\t// ====================//\n\t\n\t\n\t// Polyfills\n\t// -------------\n\tvar settings = {};\n\t\n\t/**\n\t * This module is used for the following purposes:\n\t * 1. Export ES2015 classes as modules (used with base-elements and components)\n\t * 2. Build an ES5-compatible files for prototyping.\n\t *    See /path/to/bluemix-components/dist/dist-demo.html for details.\n\t * @exports BluemixComponents\n\t * @example <caption>Consume ES2015 modules from this file using import (Usage pattern 1.)</caption>\n\t * import { Fab, FileUploader } from '/path/to/your/project/node_modules/@console/bluemix-components';\n\t */\n\t\n\t\n\t// Base Elements & Components\n\t// -------------\n\t// - JavaScript classes for use with components and base-elements.\n\t// - The following statements import classes from actual locations to\n\t//   be consumed from this file instead of their actual locations.\n\texports.settings = settings;\n\texports.FabButton = _fab2.default;\n\texports.FileUploader = _fileUploader2.default;\n\texports.ContentSwitcher = _contentSwitcher2.default;\n\texports.Tab = _tabs2.default;\n\texports.OverflowMenu = _overflowMenu2.default;\n\texports.Modal = _modals2.default;\n\texports.HeaderNav = _header2.default;\n\texports.LeftNav = _leftNav2.default;\n\texports.Toolbars = _toolbars2.default;\n\texports.Loading = _loading2.default;\n\texports.Dropdown = _dropdown2.default;\n\texports.Card = _card2.default;\n\texports.NumberInput = _numberInput2.default;\n\texports.Table = _table2.default;\n\texports.DetailPageHeader = _detailPageHeader2.default;\n\texports.ProfileSwitcher = _profileSwitcher2.default;\n\t\n\t/**\n\t * Instantiates components automatically\n\t * by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n\t * or upon DOM events (e.g. clicking) on such elements.\n\t * See each components' static `.init()` methods for details.\n\t *\n\t * HeaderNav is not instantiated - see PR https://github.ibm.com/Bluemix/bluemix-components/pull/1318\n\t *\n\t * @private\n\t */\n\t\n\tvar init = function init() {\n\t  if (!settings.disableAutoInit) {\n\t    _fab2.default.init();\n\t    _fileUploader2.default.init();\n\t    _contentSwitcher2.default.init();\n\t    _tabs2.default.init();\n\t    _overflowMenu2.default.init();\n\t    _modals2.default.init();\n\t    _toolbars2.default.init();\n\t    _loading2.default.init();\n\t    _dropdown2.default.init();\n\t    _card2.default.init();\n\t    _numberInput2.default.init();\n\t    _table2.default.init();\n\t    _detailPageHeader2.default.init();\n\t    _leftNav2.default.init();\n\t    _unifiedHeader2.default.init();\n\t    _inlineLeftNav2.default.init();\n\t    _profileSwitcher2.default.init();\n\t    _searchWithOptions2.default.init();\n\t  }\n\t};\n\t\n\tif (document.readyState === 'loading') {\n\t  document.addEventListener('DOMContentLoaded', init);\n\t} else {\n\t  // DOMContentLoaded has been fired already\n\t  // Let consumer have chance to see if it wants automatic instantiation disabled, and then run automatic instantiation otherwise\n\t  setTimeout(init, 0);\n\t}\n\n/***/ },\n/* 1 */\n/***/ function(module, exports) {\n\n\t/*!\n\t * @copyright Copyright (c) 2016 IcoMoon.io\n\t * @license   Licensed under MIT license\n\t *            See https://github.com/Keyamoon/svgxuse\n\t * @version   1.1.22\n\t */\n\t/*jslint browser: true */\n\t/*global XDomainRequest, MutationObserver, window */\n\t(function () {\n\t    'use strict';\n\t    if (window && window.addEventListener) {\n\t        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n\t        var checkUseElems;\n\t        var tid; // timeout id\n\t        var debouncedCheck = function () {\n\t            clearTimeout(tid);\n\t            tid = setTimeout(checkUseElems, 100);\n\t        };\n\t        var unobserveChanges = function () {\n\t            return;\n\t        };\n\t        var observeChanges = function () {\n\t            var observer;\n\t            window.addEventListener('resize', debouncedCheck, false);\n\t            window.addEventListener('orientationchange', debouncedCheck, false);\n\t            if (window.MutationObserver) {\n\t                observer = new MutationObserver(debouncedCheck);\n\t                observer.observe(document.documentElement, {\n\t                    childList: true,\n\t                    subtree: true,\n\t                    attributes: true\n\t                });\n\t                unobserveChanges = function () {\n\t                    try {\n\t                        observer.disconnect();\n\t                        window.removeEventListener('resize', debouncedCheck, false);\n\t                        window.removeEventListener('orientationchange', debouncedCheck, false);\n\t                    } catch (ignore) {}\n\t                };\n\t            } else {\n\t                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n\t                unobserveChanges = function () {\n\t                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n\t                    window.removeEventListener('resize', debouncedCheck, false);\n\t                    window.removeEventListener('orientationchange', debouncedCheck, false);\n\t                };\n\t            }\n\t        };\n\t        var createRequest = function (url) {\n\t            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n\t            // XDomainRequest would fail if CORS headers are not set.\n\t            // Therefore, XDomainRequest should only be used with cross origin requests.\n\t            function getOrigin(href) {\n\t                var a = document.createElement('a');\n\t                a.href = href;\n\t                return a.protocol + a.hostname;\n\t            }\n\t            var Request;\n\t            var origin = location.protocol + location.hostname;\n\t            var origin2;\n\t            if (window.XMLHttpRequest) {\n\t                Request = new XMLHttpRequest();\n\t                origin2 = getOrigin(url);\n\t                if (Request.withCredentials === undefined && origin2 !== '' && origin2 !== origin) {\n\t                    Request = XDomainRequest || undefined;\n\t                } else {\n\t                    Request = XMLHttpRequest;\n\t                }\n\t            }\n\t            return Request;\n\t        };\n\t        var xlinkNS = 'http://www.w3.org/1999/xlink';\n\t        checkUseElems = function () {\n\t            var base;\n\t            var bcr;\n\t            var fallback = ''; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n\t            var hash;\n\t            var href;\n\t            var i;\n\t            var inProgressCount = 0;\n\t            var isHidden;\n\t            var Request;\n\t            var url;\n\t            var uses;\n\t            var xhr;\n\t            function observeIfDone() {\n\t                // If done with making changes, start watching for chagnes in DOM again\n\t                inProgressCount -= 1;\n\t                if (inProgressCount === 0) { // if all xhrs were resolved\n\t                    unobserveChanges(); // make sure to remove old handlers\n\t                    observeChanges(); // watch for changes to DOM\n\t                }\n\t            }\n\t            function attrUpdateFunc(spec) {\n\t                return function () {\n\t                    if (cache[spec.base] !== true) {\n\t                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n\t                    }\n\t                };\n\t            }\n\t            function onloadFunc(xhr) {\n\t                return function () {\n\t                    var body = document.body;\n\t                    var x = document.createElement('x');\n\t                    var svg;\n\t                    xhr.onload = null;\n\t                    x.innerHTML = xhr.responseText;\n\t                    svg = x.getElementsByTagName('svg')[0];\n\t                    if (svg) {\n\t                        svg.setAttribute('aria-hidden', 'true');\n\t                        svg.style.position = 'absolute';\n\t                        svg.style.width = 0;\n\t                        svg.style.height = 0;\n\t                        svg.style.overflow = 'hidden';\n\t                        body.insertBefore(svg, body.firstChild);\n\t                    }\n\t                    observeIfDone();\n\t                };\n\t            }\n\t            function onErrorTimeout(xhr) {\n\t                return function () {\n\t                    xhr.onerror = null;\n\t                    xhr.ontimeout = null;\n\t                    observeIfDone();\n\t                };\n\t            }\n\t            unobserveChanges(); // stop watching for changes to DOM\n\t            // find all use elements\n\t            uses = document.getElementsByTagName('use');\n\t            for (i = 0; i < uses.length; i += 1) {\n\t                try {\n\t                    bcr = uses[i].getBoundingClientRect();\n\t                } catch (ignore) {\n\t                    // failed to get bounding rectangle of the use element\n\t                    bcr = false;\n\t                }\n\t                href = uses[i].getAttributeNS(xlinkNS, 'href');\n\t                if (href && href.split) {\n\t                    url = href.split('#');\n\t                } else {\n\t                    url = [\"\", \"\"];\n\t                }\n\t                base = url[0];\n\t                hash = url[1];\n\t                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n\t                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n\t                    // the use element is empty\n\t                    // if there is a reference to an external SVG, try to fetch it\n\t                    // use the optional fallback URL if there is no reference to an external SVG\n\t                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n\t                        base = fallback;\n\t                    }\n\t                    if (base.length) {\n\t                        // schedule updating xlink:href\n\t                        xhr = cache[base];\n\t                        if (xhr !== true) {\n\t                            // true signifies that prepending the SVG was not required\n\t                            setTimeout(attrUpdateFunc({\n\t                                useEl: uses[i],\n\t                                base: base,\n\t                                hash: hash\n\t                            }), 0);\n\t                        }\n\t                        if (xhr === undefined) {\n\t                            Request = createRequest(base);\n\t                            if (Request !== undefined) {\n\t                                xhr = new Request();\n\t                                cache[base] = xhr;\n\t                                xhr.onload = onloadFunc(xhr);\n\t                                xhr.onerror = onErrorTimeout(xhr);\n\t                                xhr.ontimeout = onErrorTimeout(xhr);\n\t                                xhr.open('GET', base);\n\t                                xhr.send();\n\t                                inProgressCount += 1;\n\t                            }\n\t                        }\n\t                    }\n\t                } else {\n\t                    if (!isHidden) {\n\t                        if (cache[base] === undefined) {\n\t                            // remember this URL if the use element was not empty and no request was sent\n\t                            cache[base] = true;\n\t                        } else if (cache[base].onload) {\n\t                            // if it turns out that prepending the SVG is not necessary,\n\t                            // abort the in-progress xhr.\n\t                            cache[base].abort();\n\t                            delete cache[base].onload;\n\t                            cache[base] = true;\n\t                        }\n\t                    } else if (base.length && cache[base]) {\n\t                        attrUpdateFunc({\n\t                            useEl: uses[i],\n\t                            base: base,\n\t                            hash: hash\n\t                        })();\n\t                    }\n\t                }\n\t            }\n\t            uses = '';\n\t            inProgressCount += 1;\n\t            observeIfDone();\n\t        };\n\t        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n\t        window.addEventListener('load', function winLoad() {\n\t            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n\t            tid = setTimeout(checkUseElems, 0);\n\t        }, false);\n\t    }\n\t}());\n\n\n/***/ },\n/* 2 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FileUploader = function () {\n\t  /**\n\t   * File uploader.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a file uploader.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t   */\n\t  function FileUploader(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, FileUploader);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    var labelSelector = this.options.labelSelector || element.dataset.label;\n\t    this.labelNode = element.parentNode.querySelector(labelSelector) || element.nextElementSibling;\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    element.addEventListener('change', function (event) {\n\t      return _this.updateLabel(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates file uploader of the given element.\n\t   * @param {HTMLElement} element The element working as a file uploader.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t   */\n\t\n\t\n\t  _createClass(FileUploader, [{\n\t    key: 'updateLabel',\n\t\n\t\n\t    /**\n\t     * Updates the label for the file name upon file selection.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function updateLabel(event) {\n\t      var fileName = '';\n\t      var element = this.element;\n\t\n\t      if (element.files && element.files.length > 1) {\n\t        fileName = (element.dataset.multipleCaption || '').replace('{count}', element.files.length);\n\t      } else {\n\t        fileName = event.target.value.split('\\\\').pop();\n\t      }\n\t\n\t      if (fileName) {\n\t        this.labelNode.textContent = fileName;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates file uploader in the given node.\n\t     * If the given element indicates that it's an file uploader, instantiates it.\n\t     * Otherwise, instantiates file uploader by searching for file uploader in the given node.\n\t     * @param {HTMLElement} element The element working as a file uploader.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find file uploaders.\n\t     * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return FileUploader;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and file uploader instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = FileUploader;\n\tFileUploader.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode FileUploader.create .create()}, or {@linkcode FileUploader.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode FileUploader.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find file uploaders.\n\t * @property {string} [labelSelector] The CSS selector to find the label for the file name.\n\t */\n\tFileUploader.options = {\n\t  selectorInit: '[data-file-uploader]'\n\t};\n\n/***/ },\n/* 3 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar matchesFuncName = ['matches', 'webkitMatchesSelector', 'msMatchesSelector'].filter(function (name) {\n\t  return typeof Element.prototype[name] === 'function';\n\t})[0];\n\t\n\tif (matchesFuncName !== 'matches') {\n\t  Element.prototype.matches = Element.prototype[matchesFuncName];\n\t}\n\n/***/ },\n/* 4 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\t__webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar FabButton = function () {\n\t  /**\n\t   * Floating action button.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a floting action button.\n\t   */\n\t  function FabButton(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, FabButton);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    element.addEventListener('click', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates floating action buttons in the given element.\n\t   * If the given element indicates that it's an floating action button, instantiates it.\n\t   * Otherwise, instantiates floating action buttons by clicking on floating action buttons in the given node.\n\t   * @param {Node} target The DOM node to instantiate floating action buttons in. Should be a document or an element.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorItem] The CSS selector to find floating action buttons.\n\t   * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t   */\n\t\n\t\n\t  _createClass(FabButton, [{\n\t    key: 'toggle',\n\t\n\t\n\t    /**\n\t     * Toggles this floating action button.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function toggle(event) {\n\t      if (this.element.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      if (this.element.dataset.state === 'closed') {\n\t        this.element.dataset.state = 'open';\n\t      } else {\n\t        this.element.dataset.state = 'closed';\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates floating action button of the given element.\n\t     * @param {HTMLElement} element The element.\n\t     */\n\t\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target);\n\t      } else {\n\t        return (0, _on2.default)(target, 'click', function (event) {\n\t          var element = (0, _eventMatches2.default)(event, effectiveOptions.selectorInit);\n\t          if (element && !_this2.components.has(element)) {\n\t            _this2.create(element).toggle(event);\n\t          }\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t  }]);\n\t\n\t  return FabButton;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and floating action button instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = FabButton;\n\tFabButton.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode FabButton.create .create()}, or {@linkcode FabButton.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode FabButton.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find floating action buttons.\n\t */\n\tFabButton.options = {\n\t  selectorInit: '[data-fab]'\n\t};\n\n/***/ },\n/* 5 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = eventMatches;\n\t\n\t__webpack_require__(3);\n\t\n\tfunction eventMatches(event, selector) {\n\t  // <svg> in IE does not have `Element#msMatchesSelector()` (that should be copied to `Element#matches()` by the polyfill).\n\t  // Also a weird behavior is seen in IE where DOM tree seems broken when `event.target` is on <svg>.\n\t  // Therefore this function simply returns `undefined` when `event.target` is on <svg>.\n\t  if (typeof event.target.matches === 'function') {\n\t    if (event.target.matches(selector)) {\n\t      // If event target itself matches the given selector, return it\n\t      return event.target;\n\t    } else if (event.target.matches(selector + ' *')) {\n\t      // If event target is a child node of a DOM element that matches the given selector, find the DOM element by going up the DOM tree\n\t      for (var traverse = event.target; traverse && traverse !== event.currentTarget; traverse = traverse.parentNode) {\n\t        if (traverse.matches(selector)) {\n\t          return traverse;\n\t        }\n\t      }\n\t    }\n\t  }\n\t}\n\n/***/ },\n/* 6 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = on;\n\tfunction on(element) {\n\t  for (var _len = arguments.length, args = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n\t    args[_key - 1] = arguments[_key];\n\t  }\n\t\n\t  element.addEventListener.apply(element, args);\n\t  return {\n\t    release: function release() {\n\t      element.removeEventListener.apply(element, args);\n\t      return null;\n\t    }\n\t  };\n\t}\n\n/***/ },\n/* 7 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(9);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar ContentSwitcher = function () {\n\t  /**\n\t   * Set of content switcher buttons.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a switcher button is selected.\n\t   *   Cancellation of this event stops selection of content switcher button.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t   */\n\t  function ContentSwitcher(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, ContentSwitcher);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t\n\t    [].concat(_toConsumableArray(element.querySelectorAll('input'))).forEach(function (input) {\n\t      if (input.checked) _this._changeActive(input);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a set of content switcher buttons of the given element.\n\t   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a switcher button is selected.\n\t   *   Cancellation of this event stops selection of content switcher button.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t   */\n\t\n\t\n\t  _createClass(ContentSwitcher, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Handles click on content switcher button set.\n\t     * If the click is on a content switcher button, activates it.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var button = (0, _eventMatches2.default)(event, this.options.selectorButton);\n\t\n\t      if (button) {\n\t        this.setActive(button);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n\t     * @private\n\t     * @param {HTMLElement} item The button to be selected.\n\t     */\n\t\n\t  }, {\n\t    key: '_changeActive',\n\t    value: function _changeActive(item) {\n\t      var _this2 = this;\n\t\n\t      // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n\t      var itemLink = item.querySelector(this.options.selectorLink);\n\t      if (itemLink) {\n\t        [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLink))).forEach(function (link) {\n\t          if (link !== itemLink) {\n\t            link.setAttribute('aria-selected', 'false');\n\t          }\n\t        });\n\t        itemLink.setAttribute('aria-selected', 'true');\n\t      }\n\t\n\t      var selectorButtons = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorButton)));\n\t\n\t      selectorButtons.forEach(function (button) {\n\t        if (button !== item) {\n\t          (0, _toggleClass2.default)(button, _this2.options.classActive, false);\n\t          [].concat(_toConsumableArray(button.ownerDocument.querySelectorAll(button.dataset.target))).forEach(function (element) {\n\t            return element.setAttribute('hidden', '');\n\t          });\n\t        }\n\t      });\n\t\n\t      (0, _toggleClass2.default)(item, this.options.classActive, true);\n\t      [].concat(_toConsumableArray(item.ownerDocument.querySelectorAll(item.dataset.target))).forEach(function (element) {\n\t        return element.removeAttribute('hidden');\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n\t     * @typedef {Object} ContentSwitcher~cancelError\n\t     * @property {boolean} canceled `true` always.\n\t     * @property {boolean} item The content switcher button that was about to be selected.\n\t     */\n\t\n\t    /**\n\t     * The callback called once switching is finished or is canceled.\n\t     * @callback ContentSwitcher~setActiveCallback\n\t     * @param {ContentSwitcher~cancelError} error Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n\t     * @param {HTMLElement} item The newly selected button. `null` if when selection is canceled.\n\t     */\n\t\n\t    /**\n\t     * Selects a content switcher button.\n\t     * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n\t     * DOM elements associated with unselected buttons in the same way will be hidden.\n\t     * @param {HTMLElement} item The button to be selected.\n\t     * @param {ContentSwitcher~setActiveCallback} callback The callback called once selection is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'setActive',\n\t    value: function setActive(item, callback) {\n\t      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { item: item }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeActive(item);\n\t        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { item: item }\n\t        }));\n\t        if (callback) {\n\t          callback(null, item);\n\t        }\n\t      } else {\n\t        var error = new Error('Switching active item has been canceled.');\n\t        error.canceled = true;\n\t        error.item = item;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates content switcher button sets in the given node.\n\t     * If the given element indicates that it's an content switcher button set, instantiates it.\n\t     * Otherwise, instantiates content switcher button sets by searching for content switcher button sets in the given node.\n\t     * @param {Node} target The DOM node to instantiate content switcher button sets in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find content switcher button set.\n\t     * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n\t     * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t     * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a switcher button is selected.\n\t     *   Cancellation of this event stops selection of content switcher button.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(document.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this3.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ContentSwitcher;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and content switcher set instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = ContentSwitcher;\n\tContentSwitcher.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode ContentSwitcher.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode ContentSwitcher.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find content switcher button set.\n\t * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n\t * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n\t * @property {string} [classActive] The CSS class for switcher button's selected state.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a switcher button is selected.\n\t *   Cancellation of this event stops selection of content switcher button.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n\t */\n\tContentSwitcher.options = {\n\t  selectorInit: '[data-content-switcher]',\n\t  selectorButton: 'input[type=\"radio\"], .bx--content-switcher__btn',\n\t  selectorButtonSelected: 'input[type=\"radio\"].bx--content-switcher--selected',\n\t  classActive: 'bx--content-switcher--selected',\n\t  eventBeforeSelected: 'content-switcher-beingselected',\n\t  eventAfterSelected: 'content-switcher-selected'\n\t};\n\n/***/ },\n/* 8 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tArray.from = Array.from || function fromArray(a) {\n\t  return Array.prototype.slice.call(a);\n\t};\n\n/***/ },\n/* 9 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.assign = Object.assign || function assignObject(inDst) {\n\t  if (inDst == null) {\n\t    // eslint-disable-line eqeqeq\n\t    // Throw if the given destination is null or undefined\n\t    throw new TypeError('Can\\'t convert to object: ${dst}');\n\t  }\n\t\n\t  var dst = Object(inDst);\n\t\n\t  [].concat(Array.prototype.slice.call(arguments)).slice(1).forEach(function (src) {\n\t    Object.keys(src).forEach(function (prop) {\n\t      dst[prop] = src[prop];\n\t    });\n\t  });\n\t\n\t  return dst;\n\t};\n\n/***/ },\n/* 10 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\texports.default = toggleClass;\n\tfunction toggleClass(element, name, add) {\n\t  if (element.classList.contains(name) === !add) {\n\t    element.classList[add ? 'add' : 'remove'](name);\n\t  }\n\t}\n\n/***/ },\n/* 11 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _get = function get(object, property, receiver) { if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { return get(parent, property, receiver); } } else if (\"value\" in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } };\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(12);\n\t\n\t__webpack_require__(9);\n\t\n\tvar _contentSwitcher = __webpack_require__(7);\n\t\n\tvar _contentSwitcher2 = _interopRequireDefault(_contentSwitcher);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\t\n\tfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\t\n\tvar Tab = function (_ContentSwitcher) {\n\t  _inherits(Tab, _ContentSwitcher);\n\t\n\t  /**\n\t   * Container of tabs.\n\t   * @extends ContentSwitcher\n\t   * @param {HTMLElement} element The element working as a container of tabs.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n\t   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n\t   * @param {string} [options.classActive] The CSS class for tab's selected state.\n\t   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a tab is selected.\n\t   *   Cancellation of this event stops selection of tab.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t   */\n\t  function Tab(element, options) {\n\t    _classCallCheck(this, Tab);\n\t\n\t    var _this = _possibleConstructorReturn(this, (Tab.__proto__ || Object.getPrototypeOf(Tab)).call(this, element, options));\n\t\n\t    _this.element.addEventListener('keydown', function (event) {\n\t      return _this.handleKeyDown(event);\n\t    });\n\t\n\t    var selected = _this.element.querySelector(_this.options.selectorButtonSelected);\n\t    if (selected) {\n\t      _this.updateTriggerText(selected);\n\t    }\n\t    return _this;\n\t  }\n\t\n\t  /**\n\t   * Instantiates tab containers in the given node.\n\t   * If the given element indicates that it's an tab container, instantiates it.\n\t   * Otherwise, instantiates tab containers by searching for tab containers in the given node.\n\t   * @param {Node} target The DOM node to instantiate tab containers in. Should be a document or an element.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorInit] The CSS selector to find tab containers.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n\t   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n\t   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n\t   * @param {string} [options.classActive] The CSS class for tab's selected state.\n\t   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a tab is selected.\n\t   *   Cancellation of this event stops selection of tab.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t   */\n\t\n\t\n\t  _createClass(Tab, [{\n\t    key: '_changeActive',\n\t    value: function _changeActive(item) {\n\t      _get(Tab.prototype.__proto__ || Object.getPrototypeOf(Tab.prototype), '_changeActive', this).call(this, item);\n\t      this.updateTriggerText(item);\n\t    }\n\t\n\t    /**\n\t     * Handles click on tab container.\n\t     * * If the click is on a tab, activates it.\n\t     * * If the click is on the button to open the drop down menu, does so.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleClick',\n\t    value: function handleClick(event) {\n\t      _get(Tab.prototype.__proto__ || Object.getPrototypeOf(Tab.prototype), 'handleClick', this).call(this, event);\n\t      var button = (0, _eventMatches2.default)(event, this.options.selectorButton);\n\t      var trigger = (0, _eventMatches2.default)(event, this.options.selectorTrigger);\n\t      if (button) {\n\t        _get(Tab.prototype.__proto__ || Object.getPrototypeOf(Tab.prototype), 'handleClick', this).call(this, event);\n\t        this.updateMenuState();\n\t      }\n\t      if (trigger) {\n\t        this.updateMenuState();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles arrow keys on tab container.\n\t     * * Up/Left keys are used to go to previous tab.\n\t     * * Down/Right keys are used to go to next tab.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleKeyDown',\n\t    value: function handleKeyDown(event) {\n\t      var _this2 = this;\n\t\n\t      var triggerNode = this.element.querySelector(this.options.selectorTrigger);\n\t      if (triggerNode && triggerNode.offsetParent) {\n\t        return;\n\t      }\n\t\n\t      var direction = {\n\t        Left: -1,\n\t        Right: 1,\n\t        ArrowLeft: -1,\n\t        ArrowRight: 1\n\t      }[event.key || event.keyIdentifier];\n\t\n\t      if (direction) {\n\t        var buttons = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorButton)));\n\t        var button = this.element.querySelector(this.options.selectorButtonSelected);\n\t        var nextIndex = Math.max(buttons.indexOf(button) + direction, -1 /* For `button` not found in `buttons` */);\n\t        var nextIndexLooped = nextIndex >= 0 && nextIndex < buttons.length ? nextIndex : nextIndex - Math.sign(nextIndex) * buttons.length;\n\t        this.setActive(buttons[nextIndexLooped], function (error, item) {\n\t          if (item) {\n\t            var link = item.querySelector(_this2.options.selectorLink);\n\t            if (link) {\n\t              link.focus();\n\t            }\n\t          }\n\t        });\n\t        event.preventDefault();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Shows/hides the drop down menu used in narrow mode.\n\t     */\n\t\n\t  }, {\n\t    key: 'updateMenuState',\n\t    value: function updateMenuState() {\n\t      this.element.querySelector(this.options.selectorMenu).classList.toggle(this.options.classHidden);\n\t    }\n\t\n\t    /**\n\t     * Updates the text indicating the currently selected tab item.\n\t     * @param {HTMLElement} target The newly selected tab item.\n\t     */\n\t\n\t  }, {\n\t    key: 'updateTriggerText',\n\t    value: function updateTriggerText(target) {\n\t      this.element.querySelector(this.options.selectorTriggerText).textContent = target.textContent;\n\t    }\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this3.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Tab;\n\t}(_contentSwitcher2.default);\n\t\n\t/**\n\t * The map associating DOM element and tab container instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Tab;\n\tTab.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode Tab.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Tab.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find tab containers.\n\t * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n\t * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n\t * @property {string} [selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n\t * @property {string} [selectorButton] The CSS selector to find tab containers.\n\t * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n\t * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n\t * @property {string} [classActive] The CSS class for tab's selected state.\n\t * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a tab is selected.\n\t *   Cancellation of this event stops selection of tab.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n\t */\n\tTab.options = Object.assign(Object.create(_contentSwitcher2.default.options), {\n\t  selectorInit: '[data-tabs]',\n\t  selectorMenu: '.bx--tabs__nav',\n\t  selectorTrigger: '.bx--tabs__trigger',\n\t  selectorTriggerText: '.bx--tabs__trigger-text',\n\t  selectorButton: '.bx--tabs__nav-item',\n\t  selectorButtonSelected: '.bx--tabs__nav-item.bx--tabs--selected',\n\t  selectorLink: '.bx--tabs__nav-link',\n\t  classActive: 'bx--tabs--selected',\n\t  classHidden: 'bx--tabs--hidden',\n\t  eventBeforeSelected: 'tab-beingselected',\n\t  eventAfterSelected: 'tab-selected'\n\t});\n\n/***/ },\n/* 12 */\n/***/ function(module, exports) {\n\n\t\"use strict\";\n\t\n\tMath.sign = Math.sign || function sign(x) {\n\t  var n = +x;\n\t  return n === 0 ? n : n / Math.abs(n);\n\t};\n\n/***/ },\n/* 13 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar OverflowMenu = function () {\n\t  function OverflowMenu(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, OverflowMenu);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    /**\n\t     * The handle to release click event listener on document object.\n\t     * @member {Handle}\n\t     */\n\t    this.hDocumentClick = (0, _on2.default)(this.element.ownerDocument, 'click', function (event) {\n\t      return _this.handleDocumentClick(event);\n\t    });\n\t\n\t    /**\n\t     * The handle to release keypress event listener on document object.\n\t     * @member {Handle}\n\t     */\n\t    this.hDocumentKeyPress = (0, _on2.default)(this.element.ownerDocument, 'keypress', function (event) {\n\t      return _this.handleKeyPress(event);\n\t    });\n\t  }\n\t\n\t  _createClass(OverflowMenu, [{\n\t    key: 'handleDocumentClick',\n\t    value: function handleDocumentClick(event) {\n\t      var isOfSelf = this.element.contains(event.target);\n\t      var shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\t\n\t      if (isOfSelf && this.element.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      (0, _toggleClass2.default)(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n\t    }\n\t  }, {\n\t    key: 'handleKeyPress',\n\t    value: function handleKeyPress(event) {\n\t      var key = event.key || event.which;\n\t      if (key === 'Enter' || key === 13) {\n\t        var isOfSelf = this.element.contains(event.target);\n\t        var shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\t\n\t        if (isOfSelf && this.element.tagName === 'A') {\n\t          event.preventDefault();\n\t        }\n\t\n\t        (0, _toggleClass2.default)(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.hDocumentClick) {\n\t        this.hDocumentClick = this.hDocumentClick.release();\n\t      }\n\t      if (this.hDocumentKeyPress) {\n\t        this.hDocumentKeyPress = this.hDocumentKeyPress.release();\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return OverflowMenu;\n\t}();\n\t\n\texports.default = OverflowMenu;\n\t\n\t\n\tOverflowMenu.components = new WeakMap();\n\t\n\tOverflowMenu.options = {\n\t  selectorInit: '[data-overflow-menu]'\n\t};\n\n/***/ },\n/* 14 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\t/**\n\t * @param {Element} element The element to obtain transition duration from.\n\t * @returns {number} The transition duration of the given property set in the given element.\n\t */\n\tfunction getTransitionDuration(element) {\n\t  var computedStyle = element.ownerDocument.defaultView.getComputedStyle(element);\n\t  var durations = computedStyle.transitionDuration.split(/,\\s*/).map(function (transitionDuration) {\n\t    return parseFloat(transitionDuration);\n\t  }).filter(function (duration) {\n\t    return !isNaN(duration);\n\t  });\n\t  return durations.length > 0 ? Math.max.apply(Math, _toConsumableArray(durations)) : 0;\n\t}\n\t\n\tvar Modal = function () {\n\t  /**\n\t   * Modal dialog.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a modal dialog.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.classVisible] The CSS class for the visible state.\n\t   * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this modal is shown.\n\t   *   Cancellation of this event stops showing the modal.\n\t   * @param {string} [options.eventAfterShown]\n\t   *   The name of the custom event telling that modal is sure shown\n\t   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this modal is hidden.\n\t   *   Cancellation of this event stops hiding the modal.\n\t   * @param {string} [options.eventAfterHidden]\n\t   *   The name of the custom event telling that modal is sure hidden\n\t   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n\t   */\n\t  function Modal(element) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, Modal);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.hookCloseActions();\n\t  }\n\t\n\t  /**\n\t   * Instantiates modal dialog of the given element.\n\t   * @param {HTMLElement} element The element working as a modal dialog.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.classVisible] The CSS class for the visible state.\n\t   * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this modal is shown.\n\t   *   Cancellation of this event stops showing the modal.\n\t   * @param {string} [options.eventAfterShown]\n\t   *   The name of the custom event telling that modal is sure shown\n\t   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this modal is hidden.\n\t   *   Cancellation of this event stops hiding the modal.\n\t   * @param {string} [options.eventAfterHidden]\n\t   *   The name of the custom event telling that modal is sure hidden\n\t   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n\t   */\n\t\n\t\n\t  _createClass(Modal, [{\n\t    key: 'hookCloseActions',\n\t\n\t\n\t    /**\n\t     * Adds event listeners for closing this dialog.\n\t     */\n\t    value: function hookCloseActions() {\n\t      var _this = this;\n\t\n\t      this.element.addEventListener('click', function (event) {\n\t        if (event.currentTarget === event.target) _this.hide(event);\n\t      });\n\t\n\t      if (this.keydownHandler) {\n\t        this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n\t        this.keydownHandler = null;\n\t      }\n\t\n\t      this.keydownHandler = function (event) {\n\t        if (event.which === 27) {\n\t          _this.hide(event);\n\t        }\n\t      };\n\t\n\t      this.element.ownerDocument.body.addEventListener('keydown', this.keydownHandler);\n\t\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll('[data-modal-close]'))).forEach(function (element) {\n\t        element.addEventListener('click', function (event) {\n\t          _this.hide(event);\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Internal method of {@linkcode Modal#show .show()} and  {@linkcode Modal#hide .hide()}, to change show/hidden state.\n\t     * @private\n\t     * @param {boolean} visible `true` to make this modal dialog visible.\n\t     * @param {Function} callback Callback called when change in state completes.\n\t     */\n\t\n\t  }, {\n\t    key: '_changeState',\n\t    value: function _changeState(visible, callback) {\n\t      var _this2 = this;\n\t\n\t      var finished = void 0;\n\t      var finishedTransition = function finishedTransition() {\n\t        if (!finished) {\n\t          finished = true;\n\t          _this2.element.removeEventListener('transitionend', finishedTransition);\n\t          callback();\n\t        }\n\t      };\n\t\n\t      this.element.addEventListener('transitionend', finishedTransition);\n\t      var transitionDuration = getTransitionDuration(this.element);\n\t      (0, _toggleClass2.default)(this.element, this.options.classVisible, visible);\n\t      (0, _toggleClass2.default)(this.element.ownerDocument.body, this.options.classNoScroll, visible);\n\t      if (transitionDuration === 0) {\n\t        finishedTransition();\n\t      }\n\t    }\n\t\n\t    /**\n\t     * The callback called once showing/hiding this dialog is finished or is canceled.\n\t     * @callback Modal~stateChangeCallback\n\t     * @param {Error} error\n\t     *   An error object with `true` in its `canceled` property if the showing/hiding this dialog is canceled.\n\t     *   Cancellation happens if the handler of a custom event, that is fired before showing/hiding this dialog happens,\n\t     *   calls `.preventDefault()` against the event.\n\t     * @param {boolean} newState The new toggle state.\n\t     */\n\t\n\t    /**\n\t     * Shows this modal dialog.\n\t     * @param {HTMLElement} [launchingElement] The DOM element that triggered calling this function.\n\t     * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'show',\n\t    value: function show(launchingElementOrEvent, callback) {\n\t      var _this3 = this;\n\t\n\t      var launchingElementOrEventOmitted = !launchingElementOrEvent || typeof launchingElementOrEvent === 'function';\n\t      if (launchingElementOrEventOmitted) {\n\t        callback = launchingElementOrEvent; // eslint-disable-line no-param-reassign\n\t      }\n\t\n\t      var launchingElement = launchingElementOrEventOmitted ? null : launchingElementOrEvent.delegateTarget || launchingElementOrEvent.currentTarget || launchingElementOrEvent;\n\t\n\t      var launchingEvent = launchingElementOrEventOmitted ? null : launchingElementOrEvent.currentTarget && launchingElementOrEvent;\n\t\n\t      if (launchingElement && !launchingElement.nodeType) {\n\t        throw new TypeError('DOM Node should be given for launching element.');\n\t      }\n\t\n\t      if (launchingEvent && !launchingEvent.type) {\n\t        throw new TypeError('DOM event should be given for launching event.');\n\t      }\n\t\n\t      if (this.element.classList.contains(this.options.classVisible)) {\n\t        if (callback) {\n\t          callback(null, true);\n\t        }\n\t        return;\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options.eventBeforeShown, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: {\n\t          launchingElement: launchingElement,\n\t          launchingEvent: launchingEvent\n\t        }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeState(true, function () {\n\t          _this3.element.dispatchEvent(new CustomEvent(_this3.options.eventAfterShown, {\n\t            bubbles: true,\n\t            cancelable: true,\n\t            detail: {\n\t              launchingElement: launchingElement,\n\t              launchingEvent: launchingEvent\n\t            }\n\t          }));\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        });\n\t      } else {\n\t        var error = new Error('Showing dialog has been canceled.');\n\t        error.canceled = true;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Hides this modal dialog.\n\t     * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'hide',\n\t    value: function hide(launchingElementOrEvent, callback) {\n\t      var _this4 = this;\n\t\n\t      var launchingElementOrEventOmitted = !launchingElementOrEvent || typeof launchingElementOrEvent === 'function';\n\t      if (launchingElementOrEventOmitted) {\n\t        callback = launchingElementOrEvent; // eslint-disable-line no-param-reassign\n\t      }\n\t\n\t      var launchingElement = launchingElementOrEventOmitted ? null : launchingElementOrEvent.currentTarget || launchingElementOrEvent;\n\t\n\t      var launchingEvent = launchingElementOrEventOmitted ? null : launchingElementOrEvent.currentTarget && launchingElementOrEvent;\n\t\n\t      if (launchingElement && !launchingElement.nodeType) {\n\t        throw new TypeError('DOM Node should be given for launching element.');\n\t      }\n\t\n\t      if (launchingEvent && !launchingEvent.type) {\n\t        throw new TypeError('DOM event should be given for launching event.');\n\t      }\n\t\n\t      if (!this.element.classList.contains(this.options.classVisible)) {\n\t        if (callback) {\n\t          callback(null, true);\n\t        }\n\t        return;\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options.eventBeforeHidden, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: {\n\t          launchingElement: launchingElement,\n\t          launchingEvent: launchingEvent\n\t        }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        this._changeState(false, function () {\n\t          _this4.element.dispatchEvent(new CustomEvent(_this4.options.eventAfterHidden, {\n\t            bubbles: true,\n\t            cancelable: true,\n\t            detail: {\n\t              launchingElement: launchingElement,\n\t              launchingEvent: launchingEvent\n\t            }\n\t          }));\n\t          if (callback) {\n\t            callback();\n\t          }\n\t        });\n\t      } else {\n\t        var error = new Error('Hiding dialog has been canceled.');\n\t        error.canceled = true;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.keydownHandler) {\n\t        this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n\t        this.keydownHandler = null;\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * @deprecated\n\t     */\n\t\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates modal dialogs in the given element.\n\t     * If the given element indicates that it's an modal dialog, instantiates it.\n\t     * Otherwise, instantiates modal dialogs by clicking on launcher buttons\n\t     * (buttons with `data-modal-target` attribute) of modal dialogs in the given node.\n\t     * @implements Component\n\t     * @param {Node} target The DOM node to instantiate modal dialogs in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS class to find modal dialogs.\n\t     * @param {string} [options.attribInitTarget] The attribute name in the launcher buttons to find target modal dialogs.\n\t     * @param {string} [options.classVisible] The CSS class for the visible state.\n\t     * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n\t     * @param {string} [options.eventBeforeShown]\n\t     *   The name of the custom event fired before this modal is shown.\n\t     *   Cancellation of this event stops showing the modal.\n\t     * @param {string} [options.eventAfterShown]\n\t     *   The name of the custom event telling that modal is sure shown\n\t     *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n\t     * @param {string} [options.eventBeforeHidden]\n\t     *   The name of the custom event fired before this modal is hidden.\n\t     *   Cancellation of this event stops hiding the modal.\n\t     * @param {string} [options.eventAfterHidden]\n\t     *   The name of the custom event telling that modal is sure hidden\n\t     *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n\t     * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this5 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        return (0, _on2.default)(target, 'click', function (event) {\n\t          var element = (0, _eventMatches2.default)(event, '[' + effectiveOptions.attribInitTarget + ']');\n\t\n\t          if (element) {\n\t            event.delegateTarget = element;\n\t\n\t            var modalElements = [].concat(_toConsumableArray(element.ownerDocument.querySelectorAll(element.getAttribute(effectiveOptions.attribInitTarget))));\n\t            if (modalElements.length > 1) {\n\t              throw new Error('Target modal must be unique.');\n\t            }\n\t\n\t            if (modalElements.length === 1) {\n\t              (function () {\n\t                if (element.tagName === 'A') {\n\t                  event.preventDefault();\n\t                }\n\t\n\t                var modal = _this5.create(modalElements[0], effectiveOptions);\n\t                modal.show(event, function (error, shownAlready) {\n\t                  if (!error && !shownAlready && modal.element.offsetWidth > 0 && modal.element.offsetHeight > 0) {\n\t                    modal.element.focus();\n\t                  }\n\t                });\n\t              })();\n\t            }\n\t          }\n\t        });\n\t      }\n\t    }\n\t  }, {\n\t    key: 'hook',\n\t    value: function hook() {\n\t      console.warn('Modals.hook() is deprecated. Use Modals.init() instead.'); // eslint-disable-line no-console\n\t    }\n\t  }]);\n\t\n\t  return Modal;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and modal instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Modal;\n\tModal.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Modal.create .create()}, or {@linkcode Modal.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Modal.init .init()} works.\n\t * @property {string} selectorInit The CSS class to find modal dialogs.\n\t * @property {string} attribInitTarget The attribute name in the launcher buttons to find target modal dialogs.\n\t * @property {string} [classVisible] The CSS class for the visible state.\n\t * @property {string} [classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n\t * @property {string} [eventBeforeShown]\n\t *   The name of the custom event fired before this modal is shown.\n\t *   Cancellation of this event stops showing the modal.\n\t * @property {string} [eventAfterShown]\n\t *   The name of the custom event telling that modal is sure shown\n\t *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n\t * @property {string} [eventBeforeHidden]\n\t *   The name of the custom event fired before this modal is hidden.\n\t *   Cancellation of this event stops hiding the modal.\n\t * @property {string} [eventAfterHidden]\n\t *   The name of the custom event telling that modal is sure hidden\n\t *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n\t */\n\tModal.options = {\n\t  selectorInit: '[data-modal]',\n\t  attribInitTarget: 'data-modal-target',\n\t  classVisible: 'is-visible',\n\t  classNoScroll: 'bx--noscroll',\n\t  eventBeforeShown: 'modal-beingshown',\n\t  eventAfterShown: 'modal-shown',\n\t  eventBeforeHidden: 'modal-beinghidden',\n\t  eventAfterHidden: 'modal-hidden'\n\t};\n\n/***/ },\n/* 15 */\n/***/ function(module, exports) {\n\n\t'use strict';\n\t\n\tvar missingNativeCustomEvent = function () {\n\t  try {\n\t    new CustomEvent('test-event'); // eslint-disable-line no-new\n\t  } catch (error) {\n\t    return true;\n\t  }\n\t}();\n\tif (missingNativeCustomEvent) {\n\t  window.CustomEvent = function CustomEvent(type) {\n\t    var init = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    var event = document.createEvent('HTMLEvents');\n\t    event.initEvent(type, init.bubbles, init.cancelable);\n\t    if (init.detail) {\n\t      event.detail = init.detail;\n\t    }\n\t    return event;\n\t  };\n\t}\n\n/***/ },\n/* 16 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar HeaderNav = function () {\n\t  /**\n\t   * Header with taxonomy menu.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a taxonomy menu.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t   * @param {string} [options.classActive] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this taxonomy menu is shown.\n\t   *   Cancellation of this event stops showing the taxonomy menu.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this taxonomy menu is hidden.\n\t   *   Cancellation of this event stops hiding the taxonomy menu.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a menu item is selected.\n\t   *   Cancellation of this event stops the selection.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t   */\n\t  function HeaderNav(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, HeaderNav);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.menuNode = this.element.querySelector(this.options.selectorMenu);\n\t\n\t    this.element.addEventListener('keydown', function (event) {\n\t      return _this.toggleNav(event);\n\t    });\n\t\n\t    [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItemLink))).forEach(function (item) {\n\t      item.addEventListener('click', function (e) {\n\t        return _this.select(e);\n\t      });\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates taxonomy menus in the given element.\n\t   * If the given element indicates that it's an taxonomy menu, instantiates it.\n\t   * Otherwise, instantiates taxonomy menus by clicking on launcher buttons\n\t   * (buttons with `data-nav-target` attribute) of taxonomy menus in the given node.\n\t   * @implements Component\n\t   * @param {Node} target The DOM node to instantiate taxonomy menus in. Should be a document or an element.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorInit] The CSS selector to find taxonomy menus.\n\t   * @param {string} [options.attribInitTarget] The attribute name in the lancher buttons to find taxonomy menus.\n\t   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t   * @param {string} [options.classActive] The CSS class for the visible state.\n\t   * @param {string} [options.eventBeforeShown]\n\t   *   The name of the custom event fired before this taxonomy menu is shown.\n\t   *   Cancellation of this event stops showing the taxonomy menu.\n\t   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t   * @param {string} [options.eventBeforeHidden]\n\t   *   The name of the custom event fired before this taxonomy menu is hidden.\n\t   *   Cancellation of this event stops hiding the taxonomy menu.\n\t   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a menu item is selected.\n\t   *   Cancellation of this event stops the selection.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t   * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t   */\n\t\n\t\n\t  _createClass(HeaderNav, [{\n\t    key: 'toggleNav',\n\t\n\t\n\t    /**\n\t     * Shows/hides this taxonomy menu.\n\t     * @param {Event} event The event triggering this function.\n\t     */\n\t    value: function toggleNav(event) {\n\t      var isActive = this.element.classList.contains(this.options.classActive);\n\t      var add = void 0;\n\t      if (event.type === 'click' || event.type === 'keydown' && event.which === 40) {\n\t        // Toggle button or ESC key on nav\n\t        add = !isActive;\n\t      } else if (event.type === 'keydown' && event.which === 27) {\n\t        // Down arrow on launch button\n\t        add = false;\n\t      } else {\n\t        return;\n\t      }\n\t\n\t      var launchingElement = (0, _eventMatches2.default)(event, '[data-nav-target]') || event.currentTarget;\n\t      if (launchingElement.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      var eventStart = new CustomEvent(this.options[add ? 'eventBeforeShown' : 'eventBeforeHidden'], {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { launchingElement: launchingElement }\n\t      });\n\t      var defaultNotPrevented = this.element.dispatchEvent(eventStart);\n\t\n\t      if (add) {\n\t        this.triggerNode = launchingElement;\n\t        this.triggerLabelNode = this.triggerNode.querySelector(this.options.selectorTriggerLabel);\n\t      }\n\t\n\t      if (defaultNotPrevented) {\n\t        this.element.classList[add ? 'add' : 'remove'](this.options.classActive);\n\t        (this.element.classList.contains(this.options.classActive) ? this.menuNode : this.triggerNode).focus();\n\t        this.element.dispatchEvent(new CustomEvent(this.options[add ? 'eventAfterShown' : 'eventAfterHidden'], {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { launchingElement: launchingElement }\n\t        }));\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Selects a menu item.\n\t     * @param {Event} event The event triggering this function.\n\t     */\n\t\n\t  }, {\n\t    key: 'select',\n\t    value: function select(event) {\n\t      var activatedElement = event.currentTarget;\n\t      var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: {\n\t          initiatingEvent: event,\n\t          itemElement: activatedElement\n\t        }\n\t      });\n\t\n\t      if (this.element.dispatchEvent(eventStart)) {\n\t        [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItem))).forEach(function (element) {\n\t          if (element.contains(activatedElement)) {\n\t            element.classList.add('selected');\n\t          } else if (element.classList.contains('selected')) {\n\t            element.classList.remove('selected');\n\t          }\n\t        });\n\t        activatedElement.classList.add('selected');\n\t        if (this.triggerLabelNode) {\n\t          this.triggerLabelNode.textContent = activatedElement.querySelector(this.options.selectorLabel).textContent;\n\t        }\n\t        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { itemElement: activatedElement }\n\t        }));\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * @deprecated\n\t     */\n\t\n\t  }], [{\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        var _ret = function () {\n\t          var handler = function handler(event) {\n\t            var element = (0, _eventMatches2.default)(event, '[' + effectiveOptions.attribInitTarget + ']');\n\t\n\t            if (element) {\n\t              var headerElements = [].concat(_toConsumableArray(element.ownerDocument.querySelectorAll(element.getAttribute(effectiveOptions.attribInitTarget))));\n\t              if (headerElements.length > 1) {\n\t                throw new Error('Target header must be unique.');\n\t              }\n\t\n\t              if (headerElements.length === 1) {\n\t                if (element.tagName === 'A') {\n\t                  event.preventDefault();\n\t                }\n\t                _this2.create(headerElements[0], effectiveOptions).toggleNav(event);\n\t              }\n\t            }\n\t          };\n\t\n\t          target.addEventListener('click', handler);\n\t          target.addEventListener('keydown', handler);\n\t\n\t          return {\n\t            v: {\n\t              release: function release() {\n\t                target.removeEventListener('keydown', handler);\n\t                target.removeEventListener('click', handler);\n\t              }\n\t            }\n\t          };\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Instantiates taxonomy menu of the given element.\n\t     * @param {HTMLElement} element The element working as a taxonomy menu.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t     * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n\t     * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n\t     * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n\t     * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n\t     * @param {string} [options.classActive] The CSS class for the visible state.\n\t     * @param {string} [options.eventBeforeShown]\n\t     *   The name of the custom event fired before this taxonomy menu is shown.\n\t     *   Cancellation of this event stops showing the taxonomy menu.\n\t     * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t     * @param {string} [options.eventBeforeHidden]\n\t     *   The name of the custom event fired before this taxonomy menu is hidden.\n\t     *   Cancellation of this event stops hiding the taxonomy menu.\n\t     * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a menu item is selected.\n\t     *   Cancellation of this event stops the selection.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t  }, {\n\t    key: 'hook',\n\t    value: function hook() {\n\t      console.warn('HeaderNav.hook() is deprecated. Use HeaderNav.init() instead.'); // eslint-disable-line no-console\n\t    }\n\t  }]);\n\t\n\t  return HeaderNav;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and taxonomy menu instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = HeaderNav;\n\tHeaderNav.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode HeaderNav.create .create()}, or {@linkcode HeaderNav.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode HeaderNav.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find taxonomy menus.\n\t * @property {string} attribInitTarget The attribute name in the lancher buttons to find taxonomy menus.\n\t * @property {string} [selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n\t * @property {string} [selectorMenu] The CSS selector to find the container of the menu items.\n\t * @property {string} [selectorItem] The CSS selector to find the menu items.\n\t * @property {string} [selectorItemLink] The CSS selector to find the link in the menu items.\n\t * @property {string} [selectorLabel] The CSS selector to find the label of the menu items.\n\t * @property {string} [classActive] The CSS class for the visible state.\n\t * @property {string} [eventBeforeShown]\n\t *   The name of the custom event fired before this taxonomy menu is shown.\n\t *   Cancellation of this event stops showing the taxonomy menu.\n\t * @property {string} [eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n\t * @property {string} [eventBeforeHidden]\n\t *   The name of the custom event fired before this taxonomy menu is hidden.\n\t *   Cancellation of this event stops hiding the taxonomy menu.\n\t * @property {string} [eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a menu item is selected.\n\t *   Cancellation of this event stops the selection.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a menu item is selected.\n\t */\n\tHeaderNav.options = {\n\t  selectorInit: '[data-nav]',\n\t  attribInitTarget: 'data-nav-target',\n\t  selectorTriggerLabel: '.current-taxonomy',\n\t  classActive: 'taxonomy-nav--active',\n\t  selectorMenu: '.taxonomy-menu',\n\t  selectorItem: '.taxonomy-item',\n\t  selectorItemLink: '.taxonomy-item--taxonomy-menu',\n\t  selectorLabel: '.taxonomy-item__label',\n\t  eventBeforeShown: 'header-beingshown',\n\t  eventAfterShown: 'header-shown',\n\t  eventBeforeHidden: 'header-beinghidden',\n\t  eventAfterHidden: 'header-hidden',\n\t  eventBeforeSelected: 'header-beingselected',\n\t  eventAfterSelected: 'header-selected'\n\t};\n\n/***/ },\n/* 17 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Toolbars = function () {\n\t  /**\n\t   * Search button in tool bar.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as an search button.\n\t   */\n\t  function Toolbars(element) {\n\t    var _this = this;\n\t\n\t    _classCallCheck(this, Toolbars);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.searchFieldNode = this.element.ownerDocument.querySelector(this.element.dataset.listIconsSearchActionTarget);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleActionClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a search button of the given element.\n\t   * @param {HTMLElement} element The element working as a search button.\n\t   */\n\t\n\t\n\t  _createClass(Toolbars, [{\n\t    key: 'handleActionClick',\n\t\n\t\n\t    /**\n\t     * Show/hide search box.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleActionClick(event) {\n\t      var searchActionNode = event.currentTarget;\n\t\n\t      if (searchActionNode.tagName === 'A') {\n\t        event.preventDefault();\n\t      }\n\t\n\t      this.element.classList.toggle('show-search');\n\t      if (this.searchFieldNode) {\n\t        this.searchFieldNode.classList.toggle('show-search');\n\t        this.searchFieldNode.value = '';\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates search buttons in the given node.\n\t     * If the given element indicates that it's an search button, instantiates it.\n\t     * Otherwise, instantiates search buttons by searching for search buttons in the given node.\n\t     * @param {Node} target The DOM node to instantiate search buttons in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find search buttons.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Toolbars;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and search button instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Toolbars;\n\tToolbars.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Toolbars.create .create()}, or {@linkcode Toolbars.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Toolbars.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find search buttons.\n\t */\n\tToolbars.options = {\n\t  selectorInit: '[data-list-icons-search-action-target]'\n\t};\n\n/***/ },\n/* 18 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\t__webpack_require__(3);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Loading = function () {\n\t  /**\n\t   * Spinner indicating loading state.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a spinner.\n\t   * @param {Object} [options] The component options.\n\t   * @param {boolean} [options.active] `true` if this spinner should roll.\n\t   */\n\t  function Loading(element) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, Loading);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t    this.active = this.options.active;\n\t    this.ie = false;\n\t\n\t    // Check if browser is Internet Explorer\n\t    if (options.ie || window.ActiveXObject || 'ActiveXObject' in window) {\n\t      this.ie = true;\n\t      this.element.classList.add('bx--loading--ie');\n\t    }\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    // Initialize spinner\n\t    this.set(this.active);\n\t  }\n\t\n\t  /**\n\t   * Instantiates spinner of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   */\n\t\n\t\n\t  _createClass(Loading, [{\n\t    key: 'set',\n\t\n\t\n\t    /**\n\t     * Sets active/inactive state.\n\t     * @param {boolean} active `true` if this spinner should roll.\n\t     */\n\t    value: function set(active) {\n\t      if (typeof active !== 'boolean') {\n\t        throw new TypeError('set expects a boolean.');\n\t      }\n\t\n\t      this.active = active;\n\t\n\t      if (this.ie) {\n\t        (0, _toggleClass2.default)(this.element, 'bx--loading--stop--ie', !this.active);\n\t      }\n\t      (0, _toggleClass2.default)(this.element, 'bx--loading--stop', !this.active);\n\t\n\t      return this;\n\t    }\n\t\n\t    /**\n\t     * Toggles active/inactive state.\n\t     * @param {boolean} active `true` if this spinner should roll.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggle',\n\t    value: function toggle() {\n\t      return this.set(!this.active);\n\t    }\n\t\n\t    /**\n\t     * @returns {boolean} `true` if this spinner is rolling roll.\n\t     */\n\t\n\t  }, {\n\t    key: 'isActive',\n\t    value: function isActive() {\n\t      return this.active;\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates spinner in the given node.\n\t     * If the given element indicates that it's an spinner, instantiates it.\n\t     * Otherwise, instantiates spinners by searching for spinners in the given node.\n\t     * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {boolean} [options.selectorInit] The CSS selector to find spinners.\n\t     * @param {boolean} [options.active] `true` if this spinner should roll.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Loading;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and spinner instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Loading;\n\tLoading.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Loading.create .create()}, or {@linkcode Loading.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Loading.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find spinners.\n\t */\n\tLoading.options = {\n\t  selectorInit: '[data-loading]',\n\t  active: true\n\t};\n\n/***/ },\n/* 19 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Dropdown = function () {\n\t  /**\n\t   * A selector with drop downs.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a selector.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a drop down item is selected.\n\t   *   Cancellation of this event stops selection of drop down item.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t   */\n\t  function Dropdown(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, Dropdown);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    if (this.element.dataset.dropdown !== 'navigation') {\n\t      this.element.dataset.dropdown = '';\n\t    }\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    /**\n\t     * The handle to release click event listener on document object.\n\t     * @member {Handle}\n\t     */\n\t    this.hDocumentClick = (0, _on2.default)(this.element.ownerDocument, 'click', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t\n\t    this.element.addEventListener('keypress', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.selected(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates selector of the given element.\n\t   * @param {HTMLElement} element The element working as a selector.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t   * @param {string} [options.eventBeforeSelected]\n\t   *   The name of the custom event fired before a drop down item is selected.\n\t   *   Cancellation of this event stops selection of drop down item.\n\t   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t   */\n\t\n\t\n\t  _createClass(Dropdown, [{\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.hDocumentClick) {\n\t        this.hDocumentClick = this.hDocumentClick.release();\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t\n\t    /**\n\t     * Opens and closes the dropdown menu.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggle',\n\t    value: function toggle(event) {\n\t      if (event.which === 13 || event.which === 32 || event.type === 'click') {\n\t        var isOfSelf = this.element.contains(event.target);\n\t\n\t        if (isOfSelf) {\n\t          this.element.classList.toggle('bx--dropdown--open');\n\t        } else if (!isOfSelf && this.element.classList.contains('bx--dropdown--open')) {\n\t          this.element.classList.remove('bx--dropdown--open');\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles clicking on the dropdown options, doing the following:\n\t     * * Change Dropdown text to selected option.\n\t     * * Remove selected option from options when selected.\n\t     * * Emit custom events.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'selected',\n\t    value: function selected(event) {\n\t      var _this2 = this;\n\t\n\t      var activatedElement = event.target;\n\t      if (activatedElement.parentElement.dataset.option !== undefined) {\n\t        var eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { item: activatedElement }\n\t        });\n\t\n\t        if (this.element.dispatchEvent(eventStart)) {\n\t          if (this.element.dataset.dropdownType !== 'navigation') {\n\t            this.element.firstElementChild.textContent = activatedElement.textContent;\n\t            activatedElement.classList.add(this.options.classSelected);\n\t          }\n\t          this.element.dataset.value = activatedElement.parentElement.dataset.value;\n\t          [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorItemSelected))).forEach(function (item) {\n\t            if (activatedElement !== item) {\n\t              item.classList.remove(_this2.options.classSelected);\n\t            }\n\t          });\n\t\n\t          this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n\t            bubbles: true,\n\t            cancelable: true,\n\t            detail: { item: activatedElement }\n\t          }));\n\t        }\n\t      }\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates selectors in the given node.\n\t     * If the given element indicates that it's an selector, instantiates it.\n\t     * Otherwise, instantiates selectors by searching for selectors in the given node.\n\t     * @param {Node} target The DOM node to instantiate selectors in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find selectors.\n\t     * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t     * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t     * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n\t     * @param {string} [options.eventBeforeSelected]\n\t     *   The name of the custom event fired before a drop down item is selected.\n\t     *   Cancellation of this event stops selection of drop down item.\n\t     * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this3.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Dropdown;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and selector instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Dropdown;\n\tDropdown.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Dropdown.create .create()}, or {@linkcode Dropdown.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Dropdown.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find selectors.\n\t * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n\t * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n\t * @property {string} [classSelected] The CSS class for the selected dropdown item.\n\t * @property {string} [eventBeforeSelected]\n\t *   The name of the custom event fired before a drop down item is selected.\n\t *   Cancellation of this event stops selection of drop down item.\n\t * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n\t */\n\tDropdown.options = {\n\t  selectorInit: '[data-dropdown]',\n\t  selectorItem: '[data-option] > .bx--dropdown__link',\n\t  selectorItemSelected: '[data-option] > .bx--dropdown__link.bx--dropdown--selected',\n\t  classSelected: 'bx--dropdown--selected',\n\t  eventBeforeSelected: 'dropdown-beingselected',\n\t  eventAfterSelected: 'dropdown-selected'\n\t};\n\n/***/ },\n/* 20 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(3);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(12);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Card = function () {\n\t  /**\n\t   * The container for cards.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a container.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t   */\n\t  function Card(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, Card);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t    this.constructor.components.set(this.element, this);\n\t    this.element.addEventListener('keydown', function (event) {\n\t      return _this.cardKeyPress(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates card container of the given element.\n\t   * @param {HTMLElement} element The element working as a container.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t   */\n\t\n\t\n\t  _createClass(Card, [{\n\t    key: 'cardKeyPress',\n\t\n\t\n\t    /**\n\t     * Goes back/forward among cards,\n\t     * right arrow key for going forward, left arrow key for going backward.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function cardKeyPress(event) {\n\t      var direction = {\n\t        Left: -1,\n\t        Right: 1,\n\t        ArrowLeft: -1,\n\t        ArrowRight: 1\n\t      }[event.key || event.keyIdentifier];\n\t      var card = (0, _eventMatches2.default)(event, this.options.selectorCard);\n\t\n\t      if (direction && card && card === document.activeElement) {\n\t        var cards = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorCard)));\n\t        var nextIndex = Math.max(cards.indexOf(card) + direction, -1 /* For `card` not found in `cards` */);\n\t        var nextIndexLooped = nextIndex >= 0 && nextIndex < cards.length ? nextIndex : nextIndex - Math.sign(nextIndex) * cards.length;\n\t        cards[nextIndexLooped].focus();\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates card container in the given node.\n\t     * If the given element indicates that it's an card container, instantiates it.\n\t     * Otherwise, instantiates card containers by searching for card containers in the given node.\n\t     * @param {Node} target The DOM node to instantiate card containers in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find card containers.\n\t     * @param {string} [options.selectorCard] The CSS selector to find cards.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Card;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and card list instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Card;\n\tCard.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Card.create .create()}, or {@linkcode Card.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Card.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find card containers.\n\t * @property {string} [selectorCard] The CSS selector to find cards.\n\t */\n\tCard.options = {\n\t  selectorInit: '[data-card-list]',\n\t  selectorCard: '.bx--card'\n\t};\n\n/***/ },\n/* 21 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(15);\n\t\n\t__webpack_require__(3);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar NumberInput = function () {\n\t  /**\n\t   * Number input UI.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a number input UI.\n\t   */\n\t  function NumberInput(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, NumberInput);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.options = options;\n\t    this.options.ie = this.options.ie || 'ActiveXObject' in window;\n\t\n\t    this.element = element;\n\t    this.constructor.components.set(this.element, this);\n\t    // Broken DOM tree is seen with up/down arrows <svg> in IE, which breaks event delegation.\n\t    // Also <svg> does not seems to have `Element.classList`.\n\t    this.element.querySelector('.bx--number__arrow--up').addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t    this.element.querySelector('.bx--number__arrow--down').addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates number input UI of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   */\n\t\n\t\n\t  _createClass(NumberInput, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Increase/decrease number by clicking on up/down icons.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var state = event.currentTarget.classList;\n\t      var numberInput = this.element.querySelector('.bx--number__input');\n\t\n\t      if (state.contains('bx--number__arrow--icon-up')) {\n\t        if (this.options.ie) {\n\t          ++numberInput.value;\n\t        } else {\n\t          numberInput.stepUp();\n\t        }\n\t      } else if (state.contains('bx--number__arrow--icon-down')) {\n\t        if (this.options.ie) {\n\t          if (numberInput.value > 0) {\n\t            --numberInput.value;\n\t          }\n\t        } else {\n\t          numberInput.stepDown();\n\t        }\n\t      } else {\n\t        return;\n\t      }\n\t\n\t      // Programmatic change in value (including `stepUp()`/`stepDown()`) won't fire change event\n\t      numberInput.dispatchEvent(new CustomEvent('change', {\n\t        bubbles: true,\n\t        cancelable: false\n\t      }));\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates number input UI in the given node.\n\t     * If the given element indicates that it's an number input UI, instantiates it.\n\t     * Otherwise, instantiates number input UIs by searching for number input UIs in the given node.\n\t     * @param {Node} target The DOM node to instantiate number input UIs in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {boolean} [options.selectorInit] The CSS selector to find number input UIs.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return NumberInput;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and number input UI instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = NumberInput;\n\tNumberInput.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode NumberInput.create .create()}, or {@linkcode NumberInput.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode NumberInput.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find number input UIs.\n\t */\n\tNumberInput.options = {\n\t  selectorInit: '[data-numberinput]'\n\t};\n\n/***/ },\n/* 22 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(3);\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\t__webpack_require__(9);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar Table = function () {\n\t  /**\n\t   * Data table.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a data table.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t   * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t   * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t   * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t   */\n\t  function Table(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, Table);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(Object.create(this.constructor.options), options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.addEventListener('click', function (event) {\n\t      return _this.handleClick(event);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a data table of the given element.\n\t   * @param {HTMLElement} element The element working as a data table.\n\t   * @param {Object} [options] The component options.\n\t   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t   * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t   * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t   * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t   */\n\t\n\t\n\t  _createClass(Table, [{\n\t    key: 'handleClick',\n\t\n\t\n\t    /**\n\t     * Handles click on data table.\n\t     * * If the click is on a column title, toggles its sorting state.\n\t     * * If the click is on a check box, toggles the check box.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function handleClick(event) {\n\t      var title = (0, _eventMatches2.default)(event, this.options.selectorTitle);\n\t      var row = (0, _eventMatches2.default)(event, this.options.selectorRow);\n\t      var checkbox = (0, _eventMatches2.default)(event, this.options.selectorCheckbox);\n\t      if (title) {\n\t        this.toggleState('Sort', title);\n\t      }\n\t      if (row && checkbox) {\n\t        this.toggleState('Check', row);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * The callback called once toggling is finished or is canceled.\n\t     * @callback Table~toggleStateCallback\n\t     * @param {Error} error\n\t     *   An error object with `true` in its `canceled` property if the toggling is canceled.\n\t     *   Cancellation happens if the handler of a custom event, that is fired before toggling happens,\n\t     *   calls `.preventDefault()` against the event.\n\t     * @param {HTMLElement} element The toggled element.\n\t     * @param {boolean} newState The new toggle state.\n\t     */\n\t\n\t    /**\n\t     * Toggles a sorting state or a check box's state.\n\t     * @param {string} type\n\t     *   Specifies what state to toggle:\n\t     *   * `\"Sort\"` for toggling a sorting state.\n\t     *   * `\"Check\"` for toggling a check box's state.\n\t     * @param {HTMLElement} element The DOM element to toggle its state.\n\t     * @param {Table~toggleStateCallback} callback The callback called once toggling is finished or is canceled.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggleState',\n\t    value: function toggleState(type, element, callback) {\n\t      var newState = !element.classList.contains(this.options['class' + type + 'State']);\n\t      var eventStart = new CustomEvent(this.options['eventBefore' + type + 'Toggled'], {\n\t        bubbles: true,\n\t        cancelable: true,\n\t        detail: { newState: newState }\n\t      });\n\t\n\t      // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n\t      if (element.dispatchEvent(eventStart)) {\n\t        (0, _toggleClass2.default)(element, this.options['class' + type + 'State'], newState);\n\t        // this._changeActive(item);\n\t        element.dispatchEvent(new CustomEvent(this.options['eventAfter' + type + 'Toggled'], {\n\t          bubbles: true,\n\t          cancelable: true,\n\t          detail: { newState: newState }\n\t        }));\n\t        if (callback) {\n\t          callback(null, element, newState);\n\t        }\n\t      } else {\n\t        var error = new Error('Toggling on table has been canceled.');\n\t        error.canceled = true;\n\t        error.element = element;\n\t        error.newState = newState;\n\t        if (callback) {\n\t          callback(error);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Sets up the given node to instantiate data tables in.\n\t     * If the given element indicates that it's an data table, instantiates it.\n\t     * Otherwise, lazily instantiates data table when it's clicked on.\n\t     * @param {Node} target The DOM node to instantiate data tables in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find data tables.\n\t     * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n\t     * @param {string} [options.selectorRow] The CSS selector to find rows.\n\t     * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n\t     * @param {string} [options.classSortState] The CSS class for the sorting state.\n\t     * @param {string} [options.classCheckState] The CSS class for the checked state.\n\t     * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t     * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t     * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t     * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t     * @returns {Handle} The handle to remove the event listener to handle clicking.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        return (0, _on2.default)(target, 'click', function (event) {\n\t          var element = (0, _eventMatches2.default)(event, effectiveOptions.selectorInit);\n\t          if (element && !_this2.components.has(element)) {\n\t            _this2.create(element, effectiveOptions).handleClick(event);\n\t          }\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return Table;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and data table instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = Table;\n\tTable.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode Table.create .create()}, or {@linkcode Table.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode Table.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find data tables.\n\t * @property {string} [selectorTitle] The CSS selector to find column titles.\n\t * @property {string} [selectorRow] The CSS selector to find rows.\n\t * @property {string} [selectorCheckbox] The CSS selector to find check boxes.\n\t * @property {string} [classSortState] The CSS class for the sorting state.\n\t * @property {string} [classCheckState] The CSS class for the checked state.\n\t * @property {string} [eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n\t * @property {string} [eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n\t * @property {string} [eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n\t * @property {string} [eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n\t */\n\tTable.options = {\n\t  selectorInit: '[data-table]',\n\t  selectorTitle: '.bx--table__column-title',\n\t  selectorRow: '.bx--table__row',\n\t  selectorCheckbox: '.bx--checkbox',\n\t  classSortState: 'bx--table__column-title--rotated',\n\t  classCheckState: 'bx--table__row--checked',\n\t  eventBeforeSortToggled: 'table-sort-beingtoggled',\n\t  eventAfterSortToggled: 'table-sort-toggled',\n\t  eventBeforeCheckToggled: 'table-check-beingtoggled',\n\t  eventAfterCheckToggled: 'table-check-toggled'\n\t};\n\n/***/ },\n/* 23 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\tvar _lodash = __webpack_require__(24);\n\t\n\tvar _lodash2 = _interopRequireDefault(_lodash);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar DetailPageHeader = function () {\n\t\n\t  /**\n\t   * The Detail Page Header.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a page header.\n\t   * @param {Object} [options] The component options.\n\t   */\n\t  function DetailPageHeader(element) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, DetailPageHeader);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(this.constructor.options, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    // Debounce scroll event calls to handleScroll\n\t    var debouncedScroll = (0, _lodash2.default)(this.handleScroll.bind(this), 50);\n\t\n\t    this.element.ownerDocument.defaultView.addEventListener('scroll', debouncedScroll);\n\t  }\n\t\n\t  /**\n\t   * Instantiates detail page header of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   * @param {Object} [options] The component options.\n\t   */\n\t\n\t\n\t  _createClass(DetailPageHeader, [{\n\t    key: 'handleScroll',\n\t\n\t\n\t    /**\n\t     * Adds class to header based on users position on the page\n\t     */\n\t    value: function handleScroll() {\n\t      if (this.element.ownerDocument.defaultView.scrollY > 101) {\n\t        this.element.classList.add(this.options.slideUp);\n\t      } else {\n\t        this.element.classList.remove(this.options.slideUp);\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates the detail page header in the given element.\n\t     * If the given element indicates that it's a detail page header (animated) (having `data-detail-page-header` attribute), instantiates it.\n\t     * Otherwise, instantiates detail page header by searching for detail page header in the given node.\n\t     * @param {Node} target The DOM node to instantiate detail page header in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find detail page headers.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return DetailPageHeader;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and detail page header instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = DetailPageHeader;\n\tDetailPageHeader.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode DetailPageHeader.create .create()}, or {@linkcode DetailPageHeader.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode DetailPageHeader.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find detail page headers.\n\t */\n\tDetailPageHeader.options = {\n\t  slideUp: 'bx--detail-page-header--with-tabs--animated-slide-up',\n\t  selectorInit: '[data-detail-page-header]'\n\t};\n\n/***/ },\n/* 24 */\n/***/ function(module, exports) {\n\n\t/* WEBPACK VAR INJECTION */(function(global) {/**\n\t * lodash (Custom Build) <https://lodash.com/>\n\t * Build: `lodash modularize exports=\"npm\" -o ./`\n\t * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n\t * Released under MIT license <https://lodash.com/license>\n\t * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n\t * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n\t */\n\t\n\t/** Used as the `TypeError` message for \"Functions\" methods. */\n\tvar FUNC_ERROR_TEXT = 'Expected a function';\n\t\n\t/** Used as references for various `Number` constants. */\n\tvar NAN = 0 / 0;\n\t\n\t/** `Object#toString` result references. */\n\tvar symbolTag = '[object Symbol]';\n\t\n\t/** Used to match leading and trailing whitespace. */\n\tvar reTrim = /^\\s+|\\s+$/g;\n\t\n\t/** Used to detect bad signed hexadecimal string values. */\n\tvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\t\n\t/** Used to detect binary string values. */\n\tvar reIsBinary = /^0b[01]+$/i;\n\t\n\t/** Used to detect octal string values. */\n\tvar reIsOctal = /^0o[0-7]+$/i;\n\t\n\t/** Built-in method references without a dependency on `root`. */\n\tvar freeParseInt = parseInt;\n\t\n\t/** Detect free variable `global` from Node.js. */\n\tvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\t\n\t/** Detect free variable `self`. */\n\tvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\t\n\t/** Used as a reference to the global object. */\n\tvar root = freeGlobal || freeSelf || Function('return this')();\n\t\n\t/** Used for built-in method references. */\n\tvar objectProto = Object.prototype;\n\t\n\t/**\n\t * Used to resolve the\n\t * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n\t * of values.\n\t */\n\tvar objectToString = objectProto.toString;\n\t\n\t/* Built-in method references for those with the same name as other `lodash` methods. */\n\tvar nativeMax = Math.max,\n\t    nativeMin = Math.min;\n\t\n\t/**\n\t * Gets the timestamp of the number of milliseconds that have elapsed since\n\t * the Unix epoch (1 January 1970 00:00:00 UTC).\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 2.4.0\n\t * @category Date\n\t * @returns {number} Returns the timestamp.\n\t * @example\n\t *\n\t * _.defer(function(stamp) {\n\t *   console.log(_.now() - stamp);\n\t * }, _.now());\n\t * // => Logs the number of milliseconds it took for the deferred invocation.\n\t */\n\tvar now = function() {\n\t  return root.Date.now();\n\t};\n\t\n\t/**\n\t * Creates a debounced function that delays invoking `func` until after `wait`\n\t * milliseconds have elapsed since the last time the debounced function was\n\t * invoked. The debounced function comes with a `cancel` method to cancel\n\t * delayed `func` invocations and a `flush` method to immediately invoke them.\n\t * Provide `options` to indicate whether `func` should be invoked on the\n\t * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n\t * with the last arguments provided to the debounced function. Subsequent\n\t * calls to the debounced function return the result of the last `func`\n\t * invocation.\n\t *\n\t * **Note:** If `leading` and `trailing` options are `true`, `func` is\n\t * invoked on the trailing edge of the timeout only if the debounced function\n\t * is invoked more than once during the `wait` timeout.\n\t *\n\t * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n\t * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n\t *\n\t * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n\t * for details over the differences between `_.debounce` and `_.throttle`.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Function\n\t * @param {Function} func The function to debounce.\n\t * @param {number} [wait=0] The number of milliseconds to delay.\n\t * @param {Object} [options={}] The options object.\n\t * @param {boolean} [options.leading=false]\n\t *  Specify invoking on the leading edge of the timeout.\n\t * @param {number} [options.maxWait]\n\t *  The maximum time `func` is allowed to be delayed before it's invoked.\n\t * @param {boolean} [options.trailing=true]\n\t *  Specify invoking on the trailing edge of the timeout.\n\t * @returns {Function} Returns the new debounced function.\n\t * @example\n\t *\n\t * // Avoid costly calculations while the window size is in flux.\n\t * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n\t *\n\t * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n\t * jQuery(element).on('click', _.debounce(sendMail, 300, {\n\t *   'leading': true,\n\t *   'trailing': false\n\t * }));\n\t *\n\t * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n\t * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n\t * var source = new EventSource('/stream');\n\t * jQuery(source).on('message', debounced);\n\t *\n\t * // Cancel the trailing debounced invocation.\n\t * jQuery(window).on('popstate', debounced.cancel);\n\t */\n\tfunction debounce(func, wait, options) {\n\t  var lastArgs,\n\t      lastThis,\n\t      maxWait,\n\t      result,\n\t      timerId,\n\t      lastCallTime,\n\t      lastInvokeTime = 0,\n\t      leading = false,\n\t      maxing = false,\n\t      trailing = true;\n\t\n\t  if (typeof func != 'function') {\n\t    throw new TypeError(FUNC_ERROR_TEXT);\n\t  }\n\t  wait = toNumber(wait) || 0;\n\t  if (isObject(options)) {\n\t    leading = !!options.leading;\n\t    maxing = 'maxWait' in options;\n\t    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n\t    trailing = 'trailing' in options ? !!options.trailing : trailing;\n\t  }\n\t\n\t  function invokeFunc(time) {\n\t    var args = lastArgs,\n\t        thisArg = lastThis;\n\t\n\t    lastArgs = lastThis = undefined;\n\t    lastInvokeTime = time;\n\t    result = func.apply(thisArg, args);\n\t    return result;\n\t  }\n\t\n\t  function leadingEdge(time) {\n\t    // Reset any `maxWait` timer.\n\t    lastInvokeTime = time;\n\t    // Start the timer for the trailing edge.\n\t    timerId = setTimeout(timerExpired, wait);\n\t    // Invoke the leading edge.\n\t    return leading ? invokeFunc(time) : result;\n\t  }\n\t\n\t  function remainingWait(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime,\n\t        result = wait - timeSinceLastCall;\n\t\n\t    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n\t  }\n\t\n\t  function shouldInvoke(time) {\n\t    var timeSinceLastCall = time - lastCallTime,\n\t        timeSinceLastInvoke = time - lastInvokeTime;\n\t\n\t    // Either this is the first call, activity has stopped and we're at the\n\t    // trailing edge, the system time has gone backwards and we're treating\n\t    // it as the trailing edge, or we've hit the `maxWait` limit.\n\t    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n\t      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n\t  }\n\t\n\t  function timerExpired() {\n\t    var time = now();\n\t    if (shouldInvoke(time)) {\n\t      return trailingEdge(time);\n\t    }\n\t    // Restart the timer.\n\t    timerId = setTimeout(timerExpired, remainingWait(time));\n\t  }\n\t\n\t  function trailingEdge(time) {\n\t    timerId = undefined;\n\t\n\t    // Only invoke if we have `lastArgs` which means `func` has been\n\t    // debounced at least once.\n\t    if (trailing && lastArgs) {\n\t      return invokeFunc(time);\n\t    }\n\t    lastArgs = lastThis = undefined;\n\t    return result;\n\t  }\n\t\n\t  function cancel() {\n\t    if (timerId !== undefined) {\n\t      clearTimeout(timerId);\n\t    }\n\t    lastInvokeTime = 0;\n\t    lastArgs = lastCallTime = lastThis = timerId = undefined;\n\t  }\n\t\n\t  function flush() {\n\t    return timerId === undefined ? result : trailingEdge(now());\n\t  }\n\t\n\t  function debounced() {\n\t    var time = now(),\n\t        isInvoking = shouldInvoke(time);\n\t\n\t    lastArgs = arguments;\n\t    lastThis = this;\n\t    lastCallTime = time;\n\t\n\t    if (isInvoking) {\n\t      if (timerId === undefined) {\n\t        return leadingEdge(lastCallTime);\n\t      }\n\t      if (maxing) {\n\t        // Handle invocations in a tight loop.\n\t        timerId = setTimeout(timerExpired, wait);\n\t        return invokeFunc(lastCallTime);\n\t      }\n\t    }\n\t    if (timerId === undefined) {\n\t      timerId = setTimeout(timerExpired, wait);\n\t    }\n\t    return result;\n\t  }\n\t  debounced.cancel = cancel;\n\t  debounced.flush = flush;\n\t  return debounced;\n\t}\n\t\n\t/**\n\t * Checks if `value` is the\n\t * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n\t * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 0.1.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n\t * @example\n\t *\n\t * _.isObject({});\n\t * // => true\n\t *\n\t * _.isObject([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObject(_.noop);\n\t * // => true\n\t *\n\t * _.isObject(null);\n\t * // => false\n\t */\n\tfunction isObject(value) {\n\t  var type = typeof value;\n\t  return !!value && (type == 'object' || type == 'function');\n\t}\n\t\n\t/**\n\t * Checks if `value` is object-like. A value is object-like if it's not `null`\n\t * and has a `typeof` result of \"object\".\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n\t * @example\n\t *\n\t * _.isObjectLike({});\n\t * // => true\n\t *\n\t * _.isObjectLike([1, 2, 3]);\n\t * // => true\n\t *\n\t * _.isObjectLike(_.noop);\n\t * // => false\n\t *\n\t * _.isObjectLike(null);\n\t * // => false\n\t */\n\tfunction isObjectLike(value) {\n\t  return !!value && typeof value == 'object';\n\t}\n\t\n\t/**\n\t * Checks if `value` is classified as a `Symbol` primitive or object.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to check.\n\t * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n\t * @example\n\t *\n\t * _.isSymbol(Symbol.iterator);\n\t * // => true\n\t *\n\t * _.isSymbol('abc');\n\t * // => false\n\t */\n\tfunction isSymbol(value) {\n\t  return typeof value == 'symbol' ||\n\t    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n\t}\n\t\n\t/**\n\t * Converts `value` to a number.\n\t *\n\t * @static\n\t * @memberOf _\n\t * @since 4.0.0\n\t * @category Lang\n\t * @param {*} value The value to process.\n\t * @returns {number} Returns the number.\n\t * @example\n\t *\n\t * _.toNumber(3.2);\n\t * // => 3.2\n\t *\n\t * _.toNumber(Number.MIN_VALUE);\n\t * // => 5e-324\n\t *\n\t * _.toNumber(Infinity);\n\t * // => Infinity\n\t *\n\t * _.toNumber('3.2');\n\t * // => 3.2\n\t */\n\tfunction toNumber(value) {\n\t  if (typeof value == 'number') {\n\t    return value;\n\t  }\n\t  if (isSymbol(value)) {\n\t    return NAN;\n\t  }\n\t  if (isObject(value)) {\n\t    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n\t    value = isObject(other) ? (other + '') : other;\n\t  }\n\t  if (typeof value != 'string') {\n\t    return value === 0 ? value : +value;\n\t  }\n\t  value = value.replace(reTrim, '');\n\t  var isBinary = reIsBinary.test(value);\n\t  return (isBinary || reIsOctal.test(value))\n\t    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n\t    : (reIsBadHex.test(value) ? NAN : +value);\n\t}\n\t\n\tmodule.exports = debounce;\n\t\n\t/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }())))\n\n/***/ },\n/* 25 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar LeftNav = function () {\n\t  /**\n\t   * Left Navigation.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a left navigation.\n\t   * @param {Object} [options] The component options\n\t   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n\t   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n\t   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n\t   * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n\t   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n\t   * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n\t   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n\t   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n\t   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n\t   * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n\t   * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n\t   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n\t   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n\t   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n\t   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n\t   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n\t   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n\t   */\n\t  function LeftNav(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, LeftNav);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.leftNavSectionActive = false;\n\t\n\t    this.options = Object.assign({\n\t      // Data Attribute selectors\n\t      selectorLeftNav: '[data-left-nav]',\n\t      selectorLeftNavList: '[data-left-nav-list]',\n\t      selectorLeftNavNestedList: '[data-left-nav-nested-list]',\n\t      selectorLeftNavToggleOpen: '[data-left-nav-toggle=\"open\"]',\n\t      selectorLeftNavToggleClose: '[data-left-nav-toggle=\"close\"]',\n\t      selectorLeftNavListItem: '[data-left-nav-item]',\n\t      selectorLeftNavListItemLink: '[data-left-nav-item-link]',\n\t      selectorLeftNavNestedListItem: '[data-left-nav-nested-item]',\n\t      selectorLeftNavArrowIcon: '[data-left-nav-icon]',\n\t      selectorLeftNavFlyoutMenu: '[data-left-nav-flyout]',\n\t      selectorLeftNavFlyoutItem: '[data-left-nav-flyout-item]',\n\t      selectorLeftNavSections: '[data-left-nav-sections]',\n\t      selectorLeftNavSection: '[data-left-nav-section]',\n\t      selectorLeftNavSectionLink: '[data-left-nav-section-link]',\n\t      selectorLeftNavSectionIcon: '[data-left-nav-section-icon]',\n\t      selectorLeftNavCurrentSection: '[data-left-nav-current-section]',\n\t      selectorLeftNavCurrentSectionTitle: '[data-left-nav-current-section-title]',\n\t      selectorLeftNavCurrentSectionIcon: '[data-left-nav-current-section-icon]',\n\t      selectorLeftNavListItemHasChildren: '[data-left-nav-item-with-children]',\n\t      selectorLeftNavListItemHasFlyout: '[data-left-nav-has-flyout]',\n\t      selectorLeftNavAllListItems: '[data-left-nav-item], [data-left-nav-nested-item], [data-left-nav-flyout-item]',\n\t      // CSS Class Selectors\n\t      classActiveTrigger: 'bx--left-nav__trigger--active',\n\t      classActiveLeftNav: 'bx--left-nav--active',\n\t      classActiveLeftNavListItem: 'bx--active-list-item',\n\t      classExpandedLeftNavListItem: 'bx--main-nav__parent-item--expanded',\n\t      classFlyoutDisplayed: 'bx--nested-list__flyout-menu--displayed',\n\t      classItemHasChildren: 'bx--main-nav__parent-item--has-children',\n\t      classNavSection: 'bx--left-nav__section',\n\t      classNavSectionTransition: 'bx--left-nav__section--transition',\n\t      classNavSectionAnchor: 'bx--left-nav__section--anchor',\n\t      classNavSectionLink: 'bx--left-nav__section--link',\n\t      classNavHeaderTitle: 'bx--left-nav__header--title',\n\t      classItemFade: 'bx--main-nav__parent-item--fade',\n\t      classItemHidden: 'bx--main-nav__parent-item--hidden',\n\t      classListHidden: 'bx--left-nav__main-nav--hidden',\n\t      classListTop: 'bx--left-nav__main-nav--top'\n\t    }, options);\n\t    this.options = Object.assign(this.constructor.options, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.hookOpenActions();\n\t    this.hookListSectionEvents();\n\t    this.hookListItemsEvents();\n\t    this.hDocumentClick = (0, _on2.default)(this.element.ownerDocument, 'click', function (evt) {\n\t      return _this.handleDocumentClick(evt);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a left navigation of the given element.\n\t   * @param {HTMLElement} element The element working as the left navigation.\n\t   * @param {Object} [options] The component options\n\t   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n\t   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n\t   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n\t   * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n\t   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n\t   * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n\t   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n\t   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n\t   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n\t   * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n\t   * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n\t   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n\t   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n\t   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n\t   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n\t   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n\t   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n\t   */\n\t\n\t\n\t  _createClass(LeftNav, [{\n\t    key: 'closeMenu',\n\t\n\t\n\t    /**\n\t     * Closes the menu.\n\t     */\n\t    value: function closeMenu() {\n\t      this.element.classList.remove(this.options.classActiveLeftNav);\n\t      this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).classList.remove(this.options.classActiveTrigger);\n\t      this.element.querySelector(this.options.selectorLeftNav).parentNode.setAttribute('aria-expanded', 'false');\n\t    }\n\t\n\t    /**\n\t     * Toggles the menu to open and close.\n\t     */\n\t\n\t  }, {\n\t    key: 'toggleMenu',\n\t    value: function toggleMenu() {\n\t      var leftNavContainer = this.element.querySelector(this.options.selectorLeftNav).parentNode;\n\t      this.element.classList.toggle(this.options.classActiveLeftNav);\n\t      this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).classList.toggle(this.options.classActiveTrigger);\n\t      if (leftNavContainer.getAttribute('aria-expanded') === 'false') leftNavContainer.setAttribute('aria-expanded', 'true');else leftNavContainer.setAttribute('aria-expanded', 'false');\n\t    }\n\t\n\t    /**\n\t     * Adds a transitional animation to the navSection\n\t     */\n\t\n\t  }, {\n\t    key: 'animateNavSection',\n\t    value: function animateNavSection(selectedNav) {\n\t      var _this2 = this;\n\t\n\t      var selectedNavValue = selectedNav.dataset.leftNavSection;\n\t      var selectedNavLink = selectedNav.querySelector(this.options.selectorLeftNavSectionLink);\n\t      var leftNav = this.element.querySelector(this.options.selectorLeftNav);\n\t      var leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n\t\n\t      selectedNav.classList.remove(this.options.classNavSection);\n\t      selectedNav.classList.remove(this.options.classNavSection + '--' + selectedNavValue);\n\t      selectedNav.classList.add(this.options.classNavSectionTransition);\n\t      if (leftNavSections.children[0] === selectedNav) selectedNav.classList.add(this.options.classNavSectionTransition + '--50'); // First child only move 50px\n\t      else selectedNav.classList.add(this.options.classNavSectionTransition + '--100'); // Second move 100px\n\t      selectedNav.setAttribute('data-left-nav-section', selectedNavValue);\n\t      /* Not sure what trick more performant*/\n\t      setTimeout(function () {\n\t        selectedNav.classList.add(_this2.options.classNavSectionTransition + '--0');\n\t      }, 100); // Could probably use a promise here\n\t\n\t      selectedNavLink.classList.remove(this.options.classNavSectionLink);\n\t      selectedNavLink.classList.add(this.options.classNavHeaderTitle);\n\t      selectedNavLink.setAttribute('data-left-nav-current-section-title', '');\n\t      selectedNavLink.removeAttribute('data-left-nav-section-link');\n\t\n\t      this.element.insertBefore(selectedNav, leftNav);\n\t    }\n\t\n\t    /**\n\t     * Adds a transitional animation to the navigation items on nav section click\n\t     */\n\t\n\t  }, {\n\t    key: 'animateNavList',\n\t    value: function animateNavList(selectedNavTitle) {\n\t      var _this3 = this;\n\t\n\t      var currentLeftNavList = this.element.querySelector(this.options.selectorLeftNavList + ':not(.bx--left-nav__main-nav--hidden)');\n\t      var newLeftNavList = this.element.querySelector('[data-left-nav-list=' + selectedNavTitle + ']');\n\t      var currentLeftNavItems = [].concat(_toConsumableArray(currentLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem))).reverse();\n\t      var newLeftNavItems = [].concat(_toConsumableArray(newLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem)));\n\t\n\t      var fadeOutTime = 300;\n\t      var counter = 0;\n\t      var counterIteration = fadeOutTime / currentLeftNavItems.length; // Length of animation divided by number of items\n\t      currentLeftNavItems.forEach(function (item) {\n\t        item.setAttribute('tabIndex', '-1');\n\t        setTimeout(function () {\n\t          item.classList.add(_this3.options.classItemFade);\n\t        }, counter);\n\t        counter += counterIteration;\n\t      });\n\t\n\t      newLeftNavItems.forEach(function (item) {\n\t        item.setAttribute('tabIndex', '0');\n\t        item.classList.remove(_this3.options.classItemFade);\n\t      });\n\t\n\t      setTimeout(function () {\n\t        currentLeftNavList.classList.add(_this3.options.classListHidden);\n\t        currentLeftNavList.classList.add(_this3.options.classListTop);\n\t        currentLeftNavList.setAttribute('aria-hidden', 'true');\n\t        newLeftNavList.classList.remove(_this3.options.classListHidden);\n\t        setTimeout(function () {\n\t          newLeftNavList.classList.remove(_this3.options.classListTop);\n\t        }, 100);\n\t        newLeftNavList.setAttribute('aria-hidden', 'false');\n\t      }, fadeOutTime + 100); // Wait for items to fade out.\n\t    }\n\t  }, {\n\t    key: 'hookOpenActions',\n\t    value: function hookOpenActions() {\n\t      var _this4 = this;\n\t\n\t      var openBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen);\n\t      var closeBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleClose);\n\t\n\t      openBtn.addEventListener('click', function () {\n\t        _this4.element.tabIndex = '0';\n\t        _this4.toggleMenu();\n\t      });\n\t\n\t      openBtn.addEventListener('keydown', function (evt) {\n\t        if (evt.which === 13) {\n\t          _this4.element.tabIndex = '0';\n\t          _this4.toggleMenu();\n\t        }\n\t      });\n\t\n\t      if (closeBtn) {\n\t        closeBtn.addEventListener('click', function () {\n\t          _this4.element.tabIndex = '-1';\n\t          _this4.closeMenu();\n\t        });\n\t\n\t        closeBtn.addEventListener('keydown', function (evt) {\n\t          if (evt.which === 13) {\n\t            _this4.element.tabIndex = '-1';\n\t            _this4.closeMenu();\n\t          }\n\t        });\n\t      }\n\t\n\t      this.element.ownerDocument.addEventListener('keydown', function (evt) {\n\t        if (evt.which === 27 && _this4.element.classList.contains(_this4.options.classActiveLeftNav)) {\n\t          _this4.closeMenu();\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Addes Event listeners to list sections\n\t     */\n\t\n\t  }, {\n\t    key: 'hookListSectionEvents',\n\t    value: function hookListSectionEvents() {\n\t      var _this5 = this;\n\t\n\t      var leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n\t      leftNavSections.addEventListener('click', function (evt) {\n\t        _this5.handleSectionItemClick(evt, leftNavSections);\n\t      });\n\t\n\t      leftNavSections.addEventListener('keydown', function (evt) {\n\t        if (evt.which === 13) {\n\t          _this5.handleSectionItemClick(evt, leftNavSections);\n\t          _this5.element.querySelector(_this5.options.selectorLeftNavCurrentSectionTitle).focus();\n\t        }\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Adds event listeners to list items\n\t     */\n\t\n\t  }, {\n\t    key: 'hookListItemsEvents',\n\t    value: function hookListItemsEvents() {\n\t      var _this6 = this;\n\t\n\t      var leftNavList = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavList)));\n\t      leftNavList.forEach(function (list) {\n\t        list.addEventListener('click', function (evt) {\n\t          var leftNavItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavListItem);\n\t          if (leftNavItem) {\n\t            var childItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavNestedListItem);\n\t            var hasChildren = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavListItemHasChildren);\n\t            var flyoutItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavFlyoutItem);\n\t            if (flyoutItem) {\n\t              _this6.addActiveListItem(flyoutItem);\n\t            } else if (childItem) {\n\t              if (childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu)) {\n\t                var flyoutMenu = childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu);\n\t                flyoutMenu.classList.toggle(_this6.options.classFlyoutDisplayed);\n\t              } else {\n\t                _this6.addActiveListItem(childItem);\n\t              }\n\t            } else if (hasChildren) {\n\t              _this6.handleNestedListClick(leftNavItem);\n\t            } else {\n\t              _this6.addActiveListItem(leftNavItem);\n\t            }\n\t          }\n\t        });\n\t        list.addEventListener('keydown', function (evt) {\n\t          if (evt.which === 13) {\n\t            var leftNavItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavListItem);\n\t            if (leftNavItem) {\n\t              var childItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavNestedListItem);\n\t              var hasChildren = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavListItemHasChildren);\n\t              var flyoutItem = (0, _eventMatches2.default)(evt, _this6.options.selectorLeftNavFlyoutItem);\n\t              if (flyoutItem) {\n\t                _this6.addActiveListItem(flyoutItem);\n\t              } else if (childItem) {\n\t                if (!childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu)) {\n\t                  _this6.addActiveListItem(childItem);\n\t                } else {\n\t                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false');\n\t                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.top = childItem.offsetTop - _this6.element.querySelector(_this6.options.selectorLeftNav).scrollTop + 'px';\n\t                  childItem.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.left = childItem.offsetLeft + Math.round(childItem.offsetWidth) + 'px';\n\t                }\n\t              } else if (hasChildren) {\n\t                _this6.handleNestedListClick(leftNavItem);\n\t              } else {\n\t                _this6.addActiveListItem(leftNavItem);\n\t              }\n\t            }\n\t          }\n\t        });\n\t      });\n\t      var flyouts = [].concat(_toConsumableArray(this.element.ownerDocument.querySelectorAll(this.options.selectorLeftNavListItemHasFlyout)));\n\t      flyouts.forEach(function (flyout) {\n\t        flyout.addEventListener('mouseenter', function () {\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false');\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.top = flyout.offsetTop - _this6.element.querySelector(_this6.options.selectorLeftNav).scrollTop + 'px';\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).style.left = flyout.offsetLeft + Math.round(flyout.offsetWidth) + 'px';\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).classList.toggle(_this6.options.classFlyoutDisplayed);\n\t        });\n\t        flyout.addEventListener('mouseleave', function () {\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'true');\n\t          flyout.querySelector(_this6.options.selectorLeftNavFlyoutMenu).classList.remove(_this6.options.classFlyoutDisplayed);\n\t        });\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Hides all flyout menus.\n\t     */\n\t\n\t  }, {\n\t    key: 'hideAllFlyoutMenus',\n\t    value: function hideAllFlyoutMenus() {\n\t      var _this7 = this;\n\t\n\t      var flyoutMenus = [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavFlyoutMenu)));\n\t      flyoutMenus.forEach(function (menu) {\n\t        menu.setAttribute('aria-hidden', 'true');\n\t        menu.classList.remove(_this7.options.classFlyoutDisplayed);\n\t      });\n\t    }\n\t\n\t    /**\n\t     * Sets a list item as active.\n\t     * @param {Object} item The active list item.\n\t     */\n\t\n\t  }, {\n\t    key: 'addActiveListItem',\n\t    value: function addActiveListItem(item) {\n\t      var _this8 = this;\n\t\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavAllListItems))).forEach(function (currentItem) {\n\t        if (!(item === currentItem)) {\n\t          if (!currentItem.contains(item)) {\n\t            currentItem.classList.remove(_this8.options.classActiveLeftNavListItem);\n\t          } else {\n\t            currentItem.classList.add(_this8.options.classActiveLeftNavListItem);\n\t          }\n\t        }\n\t      });\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavNestedListItem))).forEach(function (currentItem) {\n\t        if (!(item === currentItem)) {\n\t          currentItem.classList.remove(_this8.options.classActiveLeftNavListItem);\n\t        }\n\t      });\n\t      item.classList.add(this.options.classActiveLeftNavListItem);\n\t      this.closeMenu();\n\t      this.hideAllFlyoutMenus();\n\t      this.closeMenu();\n\t    }\n\t\n\t    /**\n\t     * Handles click on the document.\n\t     * Closes the left navigation when document is clicked outside the left navigation.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleDocumentClick',\n\t    value: function handleDocumentClick(evt) {\n\t      var clickTarget = evt.target;\n\t      var isOfSelf = this.element.contains(clickTarget);\n\t      var isToggleBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).contains(clickTarget);\n\t      var isOpen = this.element.classList.contains(this.options.classActiveLeftNav);\n\t      var isUnifiedHeader = this.element.ownerDocument.querySelector('[data-unified-header]').contains(clickTarget);\n\t      var shouldClose = !isOfSelf && isOpen && !isToggleBtn && !isUnifiedHeader;\n\t      var flyoutOpen = void 0;\n\t      if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n\t        flyoutOpen = this.element.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.contains(this.options.classFlyoutDisplayed);\n\t      }\n\t      if (isOfSelf && this.element.tagName === 'A') {\n\t        evt.preventDefault();\n\t      }\n\t      if (shouldClose) {\n\t        this.closeMenu();\n\t      }\n\t      if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n\t        if (flyoutOpen && !isOfSelf && isOpen) {\n\t          this.element.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.remove(this.options.classFlyoutDisplayed);\n\t        }\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles click on a list item that contains a nested list in the left navigation.\n\t     * It hides all flyout menus and switches the tab-index on the list items based on whether or not the list is expanded.\n\t     * @param {HTMLElement} listItem The list item that was clicked.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleNestedListClick',\n\t    value: function handleNestedListClick(listItem) {\n\t      var _this9 = this;\n\t\n\t      var isOpen = listItem.classList.contains(this.options.classExpandedLeftNavListItem);\n\t      this.hideAllFlyoutMenus();\n\t      (0, _toggleClass2.default)(listItem, this.options.classExpandedLeftNavListItem, !isOpen);\n\t      var listItems = [].concat(_toConsumableArray(listItem.querySelectorAll(this.options.selectorLeftNavNestedListItem)));\n\t      listItems.forEach(function (item) {\n\t        if (isOpen) {\n\t          listItem.querySelector(_this9.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'true');\n\t          item.querySelector(_this9.options.selectorLeftNavListItemLink).tabIndex = -1;\n\t        } else {\n\t          listItem.querySelector(_this9.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'false');\n\t          item.querySelector(_this9.options.selectorLeftNavListItemLink).tabIndex = 0;\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'handleSectionItemClick',\n\t    value: function handleSectionItemClick(evt, leftNavSections) {\n\t      var _this10 = this;\n\t\n\t      // Sorry\n\t      var leftNavSectionItem = (0, _eventMatches2.default)(evt, this.options.selectorLeftNavSection);\n\t      if (leftNavSectionItem) {\n\t        var _ret = function () {\n\t\n\t          console.log(leftNavSectionItem);\n\t          // currently selected\n\t          var selectedLeftNavSectionItem = _this10.element.querySelector(_this10.options.selectorLeftNavCurrentSection);\n\t          var selectedLeftNavSectionItemTitle = selectedLeftNavSectionItem.querySelector(_this10.options.selectorLeftNavCurrentSectionTitle);\n\t          var selectedLeftNavSectionItemIcon = _this10.element.querySelector(_this10.options.selectorLeftNavCurrentSectionIcon);\n\t          var selectedLeftNavSectionItemUse = selectedLeftNavSectionItemIcon.querySelector('use');\n\t          var selectedLeftNavSectionValue = selectedLeftNavSectionItem.dataset.leftNavCurrentSection;\n\t\n\t          // clicked on item\n\t          var leftNavSectionItemLink = leftNavSectionItem.querySelector(_this10.options.selectorLeftNavSectionLink);\n\t          var leftNavSectionItemIcon = leftNavSectionItem.querySelector(_this10.options.selectorLeftNavSectionIcon);\n\t          var leftNavSectionItemIconUse = leftNavSectionItemIcon.querySelector('use');\n\t          var leftNavSectionValue = leftNavSectionItem.dataset.leftNavSection;\n\t\n\t          if (_this10.leftNavSectionActive) {\n\t            return {\n\t              v: void 0\n\t            };\n\t          }\n\t          _this10.leftNavSectionActive = true;\n\t\n\t          var newLeftNavSectionItem = document.createElement('li');\n\t          newLeftNavSectionItem.setAttribute('data-left-nav-section', selectedLeftNavSectionValue);\n\t          newLeftNavSectionItem.setAttribute('tabindex', 0);\n\t          newLeftNavSectionItem.classList.add(_this10.options.classNavSection);\n\t          newLeftNavSectionItem.classList.add(_this10.options.classNavSection + '--' + selectedLeftNavSectionValue);\n\t\n\t          var newLeftNavSectionItemAnchor = document.createElement('a');\n\t          newLeftNavSectionItemAnchor.setAttribute('href', '#');\n\t          newLeftNavSectionItemAnchor.classList.add(_this10.options.classNavSectionAnchor);\n\t\n\t          var newLeftNavSectionItemIcon = selectedLeftNavSectionItemIcon.cloneNode(true);\n\t          // IE11 doesn't support classList on SVG, must revert to className\n\t          newLeftNavSectionItemIcon.setAttribute('class', 'bx--left-nav__section--taxonomy-icon');\n\t          newLeftNavSectionItemIcon.removeAttribute('data-left-nav-current-section-icon');\n\t          newLeftNavSectionItemIcon.setAttribute('data-left-nav-section-icon', selectedLeftNavSectionValue);\n\t\n\t          var newLeftNavSectionItemLink = document.createElement('span');\n\t          newLeftNavSectionItemLink.setAttribute('data-left-nav-section-link', '');\n\t          newLeftNavSectionItemLink.classList.add(_this10.options.classNavSectionLink);\n\t          newLeftNavSectionItemLink.textContent = selectedLeftNavSectionItemTitle.textContent;\n\t\n\t          _this10.animateNavSection(leftNavSectionItem);\n\t          _this10.animateNavList(leftNavSectionValue);\n\t\n\t          newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemIcon);\n\t          newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemLink);\n\t          newLeftNavSectionItem.appendChild(newLeftNavSectionItemAnchor);\n\t          leftNavSections.insertBefore(newLeftNavSectionItem, leftNavSections.firstChild);\n\t\n\t          setTimeout(function () {\n\t            selectedLeftNavSectionItemTitle.textContent = leftNavSectionItemLink.textContent;\n\t            selectedLeftNavSectionItem.setAttribute('data-left-nav-current-section', leftNavSectionValue);\n\t            selectedLeftNavSectionItemIcon.setAttribute('data-left-nav-current-section-icon', leftNavSectionValue);\n\t            selectedLeftNavSectionItemUse.setAttribute('xlink:href', leftNavSectionItemIconUse.getAttribute('xlink:href'));\n\t\n\t            leftNavSectionItem.parentNode.removeChild(leftNavSectionItem); // Cant use .remove() because of IE11\n\t            _this10.leftNavSectionActive = false;\n\t          }, 450); // Wait for nav items to animate\n\t        }();\n\t\n\t        if ((typeof _ret === 'undefined' ? 'undefined' : _typeof(_ret)) === \"object\") return _ret.v;\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.hDocumentClick) {\n\t        this.hDocumentClick = this.hDocumentClick.release();\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates a left navigation in the given node.\n\t     * If the given element indicates that it's a left navigation (having `data-left-nav-container` attribute), instantiates it.\n\t     * Otherwise, instantiates left navigation by searching for left navigation in the given node.\n\t     * @param {Node} target The DOM node to instantiate left navigation in. Should be a document or an element.\n\t     * @param {Object} [options] The component options\n\t     * @param {string} [options.selectorInit] The CSS selector to find left nav containers.\n\t     * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n\t     * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n\t     * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n\t     * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n\t     * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n\t     * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n\t     * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n\t     * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n\t     * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n\t     * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n\t     * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n\t     * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n\t     * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n\t     * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n\t     * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n\t     * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n\t     * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this11 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this11.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return LeftNav;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode LeftNav.create .create()}, or {@linkcode LeftNav.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode LeftNav.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find left nav containers.\n\t * @property {string} [selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n\t * @property {string} [selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n\t * @property {string} [selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n\t * @property {string} [selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n\t * @property {string} [selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n\t * @property {string} [selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n\t * @property {string} [selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n\t * @property {string} [selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n\t * @property {string} [selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n\t * @property {string} [selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n\t * @property {string} [selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n\t * @property {string} [classActiveLeftNav] The class name for when a left nav is active.\n\t * @property {string} [classActiveLeftNavListItem] The class name for when a left nav list item is active.\n\t * @property {string} [classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n\t * @property {string} [classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n\t * @property {string} [classActiveSection] The class name for an active section item in the left nav header.\n\t * @property {string} [classItemHasChildren] The class name for when a list item has children.\n\t */\n\t\n\t\n\texports.default = LeftNav;\n\tLeftNav.options = {\n\t  selectorInit: '[data-left-nav-container]',\n\t  // Data Attribute selectors\n\t  selectorLeftNav: '[data-left-nav]',\n\t  selectorLeftNavList: '[data-left-nav-list]',\n\t  selectorLeftNavNestedList: '[data-left-nav-nested-list]',\n\t  selectorLeftNavToggleOpen: '[data-left-nav-toggle=\"open\"]',\n\t  selectorLeftNavToggleClose: '[data-left-nav-toggle=\"close\"]',\n\t  selectorLeftNavListItem: '[data-left-nav-item]',\n\t  selectorLeftNavListItemLink: '[data-left-nav-item-link]',\n\t  selectorLeftNavNestedListItem: '[data-left-nav-nested-item]',\n\t  selectorLeftNavArrowIcon: '[data-left-nav-icon]',\n\t  selectorLeftNavFlyoutMenu: '[data-left-nav-flyout]',\n\t  selectorLeftNavFlyoutItem: '[data-left-nav-flyout-item]',\n\t  selectorLeftNavSections: '[data-left-nav-sections]',\n\t  selectorLeftNavSection: '[data-left-nav-section]',\n\t  selectorLeftNavSectionLink: '[data-left-nav-section-link]',\n\t  selectorLeftNavSectionIcon: '[data-left-nav-section-icon]',\n\t  selectorLeftNavCurrentSection: '[data-left-nav-current-section]',\n\t  selectorLeftNavCurrentSectionTitle: '[data-left-nav-current-section-title]',\n\t  selectorLeftNavCurrentSectionIcon: '[data-left-nav-current-section-icon]',\n\t  selectorLeftNavListItemHasChildren: '[data-left-nav-item-with-children]',\n\t  selectorLeftNavListItemHasFlyout: '[data-left-nav-has-flyout]',\n\t  selectorLeftNavAllListItems: '[data-left-nav-item], [data-left-nav-nested-item], [data-left-nav-flyout-item]',\n\t  // CSS Class Selectors\n\t  classActiveTrigger: 'bx--left-nav__trigger--active',\n\t  classActiveLeftNav: 'bx--left-nav--active',\n\t  classActiveLeftNavListItem: 'bx--active-list-item',\n\t  classExpandedLeftNavListItem: 'bx--main-nav__parent-item--expanded',\n\t  classFlyoutDisplayed: 'bx--nested-list__flyout-menu--displayed',\n\t  classItemHasChildren: 'bx--main-nav__parent-item--has-children',\n\t  classNavSection: 'bx--left-nav__section',\n\t  classNavSectionTransition: 'bx--left-nav__section--transition',\n\t  classNavSectionAnchor: 'bx--left-nav__section--anchor',\n\t  classNavSectionLink: 'bx--left-nav__section--link',\n\t  classNavHeaderTitle: 'bx--left-nav__header--title',\n\t  classItemFade: 'bx--main-nav__parent-item--fade',\n\t  classItemHidden: 'bx--main-nav__parent-item--hidden',\n\t  classListHidden: 'bx--left-nav__main-nav--hidden',\n\t  classListTop: 'bx--left-nav__main-nav--top'\n\t};\n\t\n\t/**\n\t * The map associating DOM element and left navigation instance.\n\t * @type {WeakMap}\n\t */\n\tLeftNav.components = new WeakMap();\n\n/***/ },\n/* 26 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar UnifiedHeader = function () {\n\t  function UnifiedHeader(element) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, UnifiedHeader);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(this.constructor.options, options);\n\t    this.constructor.components.set(this.element, this);\n\t  }\n\t\n\t  _createClass(UnifiedHeader, [{\n\t    key: 'release',\n\t    value: function release() {\n\t      var _this = this;\n\t\n\t      if (this.handleDocumentClick) {\n\t        this.element.ownerDocument.removeEventListener('click', function (evt) {\n\t          return _this.handleDocumentClick(evt);\n\t        });\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return UnifiedHeader;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and left navigation instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = UnifiedHeader;\n\tUnifiedHeader.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode UnifiedHeader.create .create()}, or {@linkcode UnifiedHeader.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode UnifiedHeader.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find unified headers.\n\t */\n\tUnifiedHeader.options = {\n\t  selectorInit: '[data-unified-header]'\n\t};\n\n/***/ },\n/* 27 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tvar _eventMatches = __webpack_require__(5);\n\t\n\tvar _eventMatches2 = _interopRequireDefault(_eventMatches);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar InlineLeftNav = function () {\n\t  /**\n\t   * Spinner indicating loading state.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a spinner.\n\t   * @param {Object} options The component options.\n\t   */\n\t  function InlineLeftNav(element) {\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, InlineLeftNav);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.options = Object.assign(this.constructor.options, options);\n\t\n\t    this.element = element;\n\t\n\t    this.constructor.components.set(this.element, this);\n\t    this.hookListItemsEvents();\n\t  }\n\t\n\t  /**\n\t   * Instantiates spinner of the given element.\n\t   * @param {HTMLElement} element The element.\n\t   */\n\t\n\t\n\t  _createClass(InlineLeftNav, [{\n\t    key: 'hookListItemsEvents',\n\t    value: function hookListItemsEvents() {\n\t      var _this = this;\n\t\n\t      var leftNavList = this.element.querySelector(this.options.selectorLeftNavList);\n\t      leftNavList.addEventListener('click', function (evt) {\n\t        var leftNavItem = (0, _eventMatches2.default)(evt, _this.options.selectorLeftNavListItem);\n\t        if (leftNavItem) {\n\t          var childItem = (0, _eventMatches2.default)(evt, _this.options.selectorLeftNavNestedListItem);\n\t          var hasChildren = leftNavItem.classList.contains('left-nav-list__item--has-children');\n\t          if (childItem) {\n\t            _this.addActiveListItem(childItem);\n\t          } else if (hasChildren) {\n\t            _this.handleNestedListClick(leftNavItem, evt);\n\t          } else {\n\t            _this.addActiveListItem(leftNavItem);\n\t          }\n\t        }\n\t      });\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavListItem))).forEach(function (item) {\n\t        item.addEventListener('keydown', function (evt) {\n\t          var leftNavItemWithChildren = (0, _eventMatches2.default)(evt, _this.options.selectorLeftNavListItemHasChildren);\n\t          if (leftNavItemWithChildren && evt.which === 13) {\n\t            _this.handleNestedListClick(leftNavItemWithChildren);\n\t          }\n\t        });\n\t      });\n\t    }\n\t  }, {\n\t    key: 'addActiveListItem',\n\t    value: function addActiveListItem(item) {\n\t      var _this2 = this;\n\t\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavListItem))).forEach(function (currentItem) {\n\t        if (!(item === currentItem)) {\n\t          currentItem.classList.remove(_this2.options.classActiveLeftNavListItem);\n\t        }\n\t      });\n\t      [].concat(_toConsumableArray(this.element.querySelectorAll(this.options.selectorLeftNavNestedListItem))).forEach(function (currentItem) {\n\t        if (!(item === currentItem)) {\n\t          currentItem.classList.remove(_this2.options.classActiveLeftNavListItem);\n\t        }\n\t      });\n\t      item.classList.add(this.options.classActiveLeftNavListItem);\n\t    }\n\t\n\t    /**\n\t     * Handles click on a list item that contains a nested list in the left navigation.\n\t     * The nested list is expanded and the icon is rotated.\n\t     * @param {HTMLElement} listItem The list item that was clicked.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleNestedListClick',\n\t    value: function handleNestedListClick(listItem, evt) {\n\t      var _this3 = this;\n\t\n\t      var isOpen = listItem.classList.contains(this.options.classExpandedLeftNavListItem);\n\t      if (!('leftNavItemLink' in evt.target.dataset)) {\n\t        (0, _toggleClass2.default)(listItem, this.options.classExpandedLeftNavListItem, !isOpen);\n\t      }\n\t      var list = listItem.querySelector(this.options.selectorLeftNavNestedList);\n\t      var listItems = [].concat(_toConsumableArray(list.querySelectorAll(this.options.selectorLeftNavNestedListItem)));\n\t      listItems.forEach(function (item) {\n\t        if (isOpen) {\n\t          item.querySelector(_this3.options.selectorLeftNavListItemLink).tabIndex = -1;\n\t        } else {\n\t          item.querySelector(_this3.options.selectorLeftNavListItemLink).tabIndex = 0;\n\t        }\n\t      });\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element) {\n\t      return this.components.get(element) || new this(element);\n\t    }\n\t\n\t    /**\n\t     * Instantiates spinner in the given node.\n\t     * If the given element indicates that it's an spinner (having `data-loading` attribute), instantiates it.\n\t     * Otherwise, instantiates spinners by searching for spinners in the given node.\n\t     * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n\t     * @param {Object} [options] The component options.\n\t     * @param {string} [options.selectorInit] The CSS selector to find inline left navs.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this4 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this4.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return InlineLeftNav;\n\t}();\n\t\n\t/**\n\t * The map associating DOM element and spinner instance.\n\t * @type {WeakMap}\n\t */\n\t\n\t\n\texports.default = InlineLeftNav;\n\tInlineLeftNav.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode InlineLeftNav.create .create()}, or {@linkcode InlineLeftNav.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode InlineLeftNav.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find inline left navs.\n\t */\n\tInlineLeftNav.options = {\n\t  selectorInit: '[data-inline-left-nav]',\n\t  // Data Attribute selectors\n\t  selectorLeftNavList: '[data-inline-left-nav-list]',\n\t  selectorLeftNavNestedList: '[data-inline-left-nav-nested-list]',\n\t  selectorLeftNavListItem: '[data-inline-left-nav-item]',\n\t  selectorLeftNavListItemLink: '[data-inline-left-nav-item-link]',\n\t  selectorLeftNavNestedListItem: '[data-inline-left-nav-nested-item]',\n\t  // CSS Class Selectors\n\t  classActiveLeftNavListItem: 'left-nav-list__item--active',\n\t  classExpandedLeftNavListItem: 'left-nav-list__item--expanded'\n\t};\n\n/***/ },\n/* 28 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _on = __webpack_require__(6);\n\t\n\tvar _on2 = _interopRequireDefault(_on);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar ProfileSwitcher = function () {\n\t  /**\n\t   * Profile Switcher.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as a profile switcher.\n\t   * @param {Object} [options] The component options\n\t   * @param {string} [options.selectorProfileSwitcher] The data attribute selector for the profile switcher.\n\t   * @param {string} [options.selectorAccount] The data attribute selector for the element containing the account name in the profile switcher.\n\t   * @param {string} [options.selectorOrg] The data attribute selector for the element containing the organization name in the profile switcher.\n\t   * @param {string} [options.selectorSpace] The data attribute selector for the element containing the space name in the profile switcher.\n\t   * @param {string} [options.selectorAccountDropdown] The data attribute selector for the dropdown item containing the current account name.\n\t   * @param {string} [options.selectorOrgDropdown] The data attribute selector for the dropdown item containing the current organization name.\n\t   * @param {string} [options.selectorSpaceDropdown] The data attribute selector for the dropdown item containing the current space name.\n\t   */\n\t  function ProfileSwitcher(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, ProfileSwitcher);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(this.constructor.options, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.hDocumentClick = (0, _on2.default)(this.element.ownerDocument, 'click', function (evt) {\n\t      return _this.handleDocumentClick(evt);\n\t    });\n\t    this.element.querySelector(this.options.selectorToggle).addEventListener('keydown', function (event) {\n\t      return _this.toggle(event);\n\t    });\n\t\n\t    this.element.querySelector(this.options.selectorToggle).addEventListener('mouseenter', function () {\n\t      return _this.determineSwitcherValues(true);\n\t    });\n\t\n\t    this.element.querySelector(this.options.selectorToggle).addEventListener('mouseleave', function () {\n\t      return _this.determineSwitcherValues(false);\n\t    });\n\t\n\t    this.element.ownerDocument.addEventListener('keyup', function () {\n\t      return _this.handleBlur();\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a profile switcher of the given element.\n\t   * @param {HTMLElement} element The element working as the profile switcher.\n\t   * @param {Object} [options] The component options\n\t   */\n\t\n\t\n\t  _createClass(ProfileSwitcher, [{\n\t    key: 'toggle',\n\t\n\t\n\t    /**\n\t     * Opens and closes the menu.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function toggle(event) {\n\t      var isOfSelf = this.element.contains(event.target);\n\t      if (event.which === 13 || event.which === 32) {\n\t        if (isOfSelf) {\n\t          this.element.classList.toggle(this.options.classSwitcherOpen);\n\t        } else if (!isOfSelf && this.element.classList.contains(this.options.classSwitcherOpen)) {\n\t          this.element.classList.remove(this.options.classSwitcherOpen);\n\t        }\n\t      }\n\t    }\n\t  }, {\n\t    key: 'handleBlur',\n\t    value: function handleBlur() {\n\t      if (!this.element.contains(document.activeElement)) {\n\t        this.element.classList.remove(this.options.classSwitcherOpen);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles click on the document.\n\t     * Closes the profile switcherwhen document is clicked outside the left navigation or\n\t     * the user clicks the profile switcher while it is open.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t\n\t  }, {\n\t    key: 'handleDocumentClick',\n\t    value: function handleDocumentClick(evt) {\n\t      var clickTarget = evt.target;\n\t      var isOfSelf = this.element.contains(clickTarget);\n\t      var isToggle = this.element.ownerDocument.querySelector(this.options.selectorToggle).contains(clickTarget);\n\t      var isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\t\n\t      if (isOfSelf) {\n\t        if (isToggle && isOpen) {\n\t          this.element.classList.remove(this.options.classSwitcherOpen);\n\t        } else if (isOpen) {\n\t          this.determineSwitcherValues();\n\t        } else {\n\t          this.element.classList.add(this.options.classSwitcherOpen);\n\t        }\n\t      } else {\n\t        this.element.classList.remove(this.options.classSwitcherOpen);\n\t      }\n\t    }\n\t\n\t    /**\n\t     * Handles logic to determine what text to display in profile switcher.\n\t     * If the text is over 25 characters long, truncate and add ellipses.\n\t     * Also adds logic to change the switcher width based on the width of the hovered\n\t     * profile switcher\n\t     * @param {boolean} isHovered boolean value passed by the event listener on bx--toggle.\n\t     */\n\t\n\t  }, {\n\t    key: 'determineSwitcherValues',\n\t    value: function determineSwitcherValues(isHovered) {\n\t      var nameElement = this.element.querySelector(this.options.selectorAccount);\n\t      var regionElement = this.element.querySelector(this.options.selectorRegion);\n\t      var orgElement = this.element.querySelector(this.options.selectorOrg);\n\t      var spaceElement = this.element.querySelector(this.options.selectorSpace);\n\t      var menuElement = this.element.querySelector(this.options.selectorMenu);\n\t      var isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\t\n\t      var nameDropdownValue = this.element.querySelector(this.options.selectorAccountDropdown).textContent;\n\t      var regionDropdownValue = this.element.querySelector(this.options.selectorRegionDropdown).textContent;\n\t      var orgDropdownValue = this.element.querySelector(this.options.selectorOrgDropdown).textContent;\n\t      var spaceDropdownValue = this.element.querySelector(this.options.selectorSpaceDropdown).textContent;\n\t\n\t      var nameShort = void 0;\n\t      var orgShort = void 0;\n\t      var spaceShort = void 0;\n\t\n\t      if (isHovered && !isOpen) {\n\t        nameElement.textContent = nameDropdownValue;\n\t        orgElement.textContent = orgDropdownValue;\n\t        spaceElement.textContent = spaceDropdownValue;\n\t        regionElement.textContent = regionDropdownValue;\n\t        menuElement.style.width = this.element.getBoundingClientRect().width + 'px';\n\t      } else {\n\t        if (nameDropdownValue.length > 25) {\n\t          nameShort = nameDropdownValue.substr(0, 25) + '...';\n\t          nameElement.textContent = nameShort;\n\t        } else {\n\t          nameElement.textContent = nameDropdownValue;\n\t        }\n\t\n\t        if (orgDropdownValue.length > 25) {\n\t          orgShort = orgDropdownValue.slice(0, 12) + '...' + orgDropdownValue.slice(-13);\n\t          orgElement.textContent = orgShort;\n\t        } else {\n\t          orgElement.textContent = orgDropdownValue;\n\t        }\n\t\n\t        if (spaceDropdownValue.length > 25) {\n\t          spaceShort = spaceDropdownValue.substr(0, 25) + '...';\n\t          spaceElement.textContent = spaceShort;\n\t        } else {\n\t          spaceElement.textContent = spaceDropdownValue;\n\t        }\n\t\n\t        regionElement.textContent = regionDropdownValue;\n\t        menuElement.style.width = this.element.getBoundingClientRect().width + 'px';\n\t      }\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      if (this.hDocumentClick) {\n\t        this.hDocumentClick = this.hDocumentClick.release();\n\t      }\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates a profile switcher in the given node.\n\t     * If the given element indicates that it's a profile switcher (having `data-profile-switcher` attribute), instantiates it.\n\t     * Otherwise, instantiates profile switcher by searching for profile switcher in the given node.\n\t     * @param {Node} target The DOM node to instantiate profile switcher in. Should be a document or an element.\n\t     * @param {Object} [options] The component options\n\t     * @param {string} [options.selectorInit] The CSS selector to find profile switchers.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this2 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this2.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return ProfileSwitcher;\n\t}();\n\t\n\t/**\n\t * The component options.\n\t * @property {string} selectorInit The CSS selector to find profile switchers.\n\t * @property {string} [selectorProfileSwitcher] The data attribute selector for the profile switcher.\n\t * @property {string} [selectorAccount] The data attribute selector for the element containing the account name in the profile switcher.\n\t * @property {string} [selectorOrg] The data attribute selector for the element containing the organization name in the profile switcher.\n\t * @property {string} [selectorSpace] The data attribute selector for the element containing the space name in the profile switcher.\n\t * @property {string} [selectorAccountDropdown] The data attribute selector for the dropdown item containing the current account name.\n\t * @property {string} [selectorOrgDropdown] The data attribute selector for the dropdown item containing the current organization name.\n\t * @property {string} [selectorSpaceDropdown] The data attribute selector for the dropdown item containing the current space name.\n\t */\n\t\n\t\n\texports.default = ProfileSwitcher;\n\tProfileSwitcher.options = {\n\t  selectorInit: '[data-profile-switcher]',\n\t  // Data Attribute selectors\n\t  selectorProfileSwitcher: '[data-profile-switcher]',\n\t  selectorToggle: '[data-profile-switcher-toggle]',\n\t  selectorMenu: '[data-switcher-menu]',\n\t  selectorAccount: '[data-switcher-account]',\n\t  selectorRegion: '[data-switcher-region]',\n\t  selectorOrg: '[data-switcher-org]',\n\t  selectorSpace: '[data-switcher-space]',\n\t  selectorDropdown: '[data-dropdown]',\n\t  selectorAccountDropdown: '[data-dropdown-account]',\n\t  selectorRegionDropdown: '[data-dropdown-region]',\n\t  selectorOrgDropdown: '[data-dropdown-org]',\n\t  selectorSpaceDropdown: '[data-dropdown-space]',\n\t  classSwitcherOpen: 'bx--account-switcher--open'\n\t};\n\t\n\t/**\n\t * The map associating DOM element and profile switcher instance.\n\t * @type {WeakMap}\n\t */\n\tProfileSwitcher.components = new WeakMap();\n\n/***/ },\n/* 29 */\n/***/ function(module, exports, __webpack_require__) {\n\n\t'use strict';\n\t\n\tObject.defineProperty(exports, \"__esModule\", {\n\t  value: true\n\t});\n\t\n\tvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\t\n\t__webpack_require__(8);\n\t\n\t__webpack_require__(9);\n\t\n\t__webpack_require__(15);\n\t\n\tvar _toggleClass = __webpack_require__(10);\n\t\n\tvar _toggleClass2 = _interopRequireDefault(_toggleClass);\n\t\n\tfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\t\n\tfunction _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }\n\t\n\tfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\t\n\tvar SearchWithOptions = function () {\n\t  /**\n\t   * Search with Options.\n\t   * @implements Component\n\t   * @param {HTMLElement} element The element working as the search component.\n\t   * @param {Object} [options] The component options\n\t   * @param {string} [options.selectorToggleLayoutBtn] The data attribute selector for the button that toggles between the layouts.\n\t   * @param {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n\t   * @param {string} [options.classHiddenContainer] The class selector for a hidden container.\n\t   */\n\t  function SearchWithOptions(element) {\n\t    var _this = this;\n\t\n\t    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t    _classCallCheck(this, SearchWithOptions);\n\t\n\t    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n\t      throw new TypeError('DOM element should be given to initialize this widget.');\n\t    }\n\t\n\t    this.element = element;\n\t\n\t    this.options = Object.assign(this.constructor.options, options);\n\t\n\t    this.constructor.components.set(this.element, this);\n\t\n\t    this.element.querySelector(this.options.selectorToggleLayoutBtn).addEventListener('click', function (evt) {\n\t      return _this.toggleLayout(evt);\n\t    });\n\t  }\n\t\n\t  /**\n\t   * Instantiates a search component of the given element.\n\t   * @param {HTMLElement} element The element working as the search component.\n\t   * @param {Object} [options] The component options\n\t   */\n\t\n\t\n\t  _createClass(SearchWithOptions, [{\n\t    key: 'toggleLayout',\n\t\n\t\n\t    /**\n\t     * Toggles between the grid and list layout.\n\t     * @param {Event} event The event triggering this method.\n\t     */\n\t    value: function toggleLayout(evt) {\n\t      var _this2 = this;\n\t\n\t      var btn = evt.currentTarget;\n\t      var iconContainers = [].concat(_toConsumableArray(btn.querySelectorAll(this.options.selectorIconContainer)));\n\t      iconContainers.forEach(function (container) {\n\t        var isHidden = container.classList.contains(_this2.options.classHiddenContainer);\n\t        (0, _toggleClass2.default)(container, _this2.options.classHiddenContainer, !isHidden);\n\t      });\n\t    }\n\t  }, {\n\t    key: 'release',\n\t    value: function release() {\n\t      this.constructor.components.delete(this.element);\n\t    }\n\t  }], [{\n\t    key: 'create',\n\t    value: function create(element, options) {\n\t      return this.components.get(element) || new this(element, options);\n\t    }\n\t\n\t    /**\n\t     * Instantiates a search component in the given node.\n\t     * If the given element indicates that it's a search component (having `data-search-with-options` attribute), instantiates it.\n\t     * Otherwise, instantiates the search component by searching for the search component in the given node.\n\t     * @param {Node} target The DOM node to instantiate the search component in. Should be a document or an element..\n\t     * @param {Object} [options] The component options\n\t     * @param {string} [options.selectorInit] The CSS selector to find unified headers.\n\t     */\n\t\n\t  }, {\n\t    key: 'init',\n\t    value: function init() {\n\t      var _this3 = this;\n\t\n\t      var target = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document;\n\t      var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\t\n\t      var effectiveOptions = Object.assign(Object.create(this.options), options);\n\t      if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n\t        throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n\t      }\n\t      if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n\t        this.create(target, effectiveOptions);\n\t      } else {\n\t        [].concat(_toConsumableArray(target.querySelectorAll(effectiveOptions.selectorInit))).forEach(function (element) {\n\t          return _this3.create(element, effectiveOptions);\n\t        });\n\t      }\n\t    }\n\t  }]);\n\t\n\t  return SearchWithOptions;\n\t}();\n\t\n\texports.default = SearchWithOptions;\n\t\n\t\n\tSearchWithOptions.components = new WeakMap();\n\t\n\t/**\n\t * The component options.\n\t * If `options` is specified in the constructor, {@linkcode SearchWithOptions.create .create()}, or {@linkcode SearchWithOptions.init .init()},\n\t * properties in this object are overriden for the instance being create and how {@linkcode SearchWithOptions.init .init()} works.\n\t * @property {string} selectorInit The CSS selector to find search UIs with options.\n\t */\n\tSearchWithOptions.options = {\n\t  selectorInit: '[data-search-with-options]',\n\t  selectorToggleLayoutBtn: '[data-search-toggle-btn]',\n\t  selectorIconContainer: '[data-search-toggle-layout]',\n\t  classHiddenContainer: 'bx--search__toggle-layout__container--hidden'\n\t};\n\n/***/ }\n/******/ ]);\n\n\n/** WEBPACK FOOTER **\n ** bluemix-components.min.js\n **/"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 612a202b7e1760bdcb1e\n **/","// ====================//\n// Imports and Exports //\n// ====================//\n\n\n// Polyfills\n// -------------\nimport 'svgxuse';\n\n// Base Elements & Components\n// -------------\n// - JavaScript classes for use with components and base-elements.\n// - The following statements import classes from actual locations to\n//   be consumed from this file instead of their actual locations.\nimport FileUploader from './file-uploader';\nimport FabButton from './fab';\nimport ContentSwitcher from './content-switcher';\nimport Tab from './tabs';\nimport OverflowMenu from './overflow-menu';\nimport Modal from './modals';\nimport HeaderNav from './header';\nimport Toolbars from './toolbars';\nimport Loading from './loading';\nimport Dropdown from './dropdown';\nimport Card from './card';\nimport NumberInput from './number-input';\nimport Table from './table';\nimport DetailPageHeader from './detail-page-header';\nimport LeftNav from './left-nav';\nimport UnifiedHeader from './unified-header';\nimport InlineLeftNav from './inline-left-nav';\nimport ProfileSwitcher from './profile-switcher';\nimport SearchWithOptions from './search-with-options';\n\nconst settings = {};\n\n/**\n * This module is used for the following purposes:\n * 1. Export ES2015 classes as modules (used with base-elements and components)\n * 2. Build an ES5-compatible files for prototyping.\n *    See /path/to/bluemix-components/dist/dist-demo.html for details.\n * @exports BluemixComponents\n * @example <caption>Consume ES2015 modules from this file using import (Usage pattern 1.)</caption>\n * import { Fab, FileUploader } from '/path/to/your/project/node_modules/@console/bluemix-components';\n */\nexport {\n  /**\n   * Settings.\n   * @type Object\n   * @property {boolean} [disableAutoInit]\n   *   Disables automatic instantiation of components.\n   *   By default (`BluemixComponents.disableAutoInit` is `false`),\n   *   bluemix-components attempts to instantiate components automatically\n   *   by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n   *   or upon DOM events (e.g. clicking) on such elements.\n   *   See each components' static `.init()` methods for details.\n   */\n  settings,\n\n  /**\n   * Floating action button.\n   * @type FabButton\n   */\n  FabButton,\n\n  /**\n   * File uploader.\n   * @type FileUploader\n   */\n  FileUploader,\n\n  /**\n   * Content switcher.\n   * @type ContentSwitcher\n   */\n  ContentSwitcher,\n\n  /**\n   * Container of tabs.\n   * @type Tab\n   */\n  Tab,\n\n  /**\n   * Overflow menu.\n   * @type OverflowMenu\n   */\n  OverflowMenu,\n\n  /**\n   * Modal dialog.\n   * @type Modal\n   */\n  Modal,\n\n  /**\n   * Header with taxonomy menu.\n   * @type HeaderNav\n   */\n  HeaderNav,\n\n  /**\n   * Left Navigation Menu\n   * @type LeftNav\n   */\n   LeftNav,\n\n  /**\n   * Search button in tool bar.\n   * @type Toolbars\n   */\n  Toolbars,\n\n  /**\n   * Spinner indicating loading state.\n   * @type Loading\n   */\n  Loading,\n\n  /**\n   * A selector with drop downs.\n   * @type Dropdown\n   */\n  Dropdown,\n\n  /**\n   * The container for cards.\n   * @type Card\n   */\n  Card,\n\n  /**\n   * Number input UI.\n   * @type NumberInput\n   */\n  NumberInput,\n\n  /**\n   * Data table.\n   * @type Table\n   */\n  Table,\n\n  /**\n   * Detail page header.\n   * @type DetailPageHeader\n   */\n  DetailPageHeader,\n\n  /**\n   * Profile Switcher.\n   * @type ProfileSwitcher\n   */\n  ProfileSwitcher,\n};\n\n/**\n * Instantiates components automatically\n * by searching for elements with `data-component-name` (e.g. `data-loading`) attribute\n * or upon DOM events (e.g. clicking) on such elements.\n * See each components' static `.init()` methods for details.\n *\n * HeaderNav is not instantiated - see PR https://github.ibm.com/Bluemix/bluemix-components/pull/1318\n *\n * @private\n */\n\nconst init = () => {\n  if (!settings.disableAutoInit) {\n    FabButton.init();\n    FileUploader.init();\n    ContentSwitcher.init();\n    Tab.init();\n    OverflowMenu.init();\n    Modal.init();\n    Toolbars.init();\n    Loading.init();\n    Dropdown.init();\n    Card.init();\n    NumberInput.init();\n    Table.init();\n    DetailPageHeader.init();\n    LeftNav.init();\n    UnifiedHeader.init();\n    InlineLeftNav.init();\n    ProfileSwitcher.init();\n    SearchWithOptions.init();\n  }\n};\n\nif (document.readyState === 'loading') {\n  document.addEventListener('DOMContentLoaded', init);\n} else {\n  // DOMContentLoaded has been fired already\n  // Let consumer have chance to see if it wants automatic instantiation disabled, and then run automatic instantiation otherwise\n  setTimeout(init, 0);\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/index.js\n **/","/*!\n * @copyright Copyright (c) 2016 IcoMoon.io\n * @license   Licensed under MIT license\n *            See https://github.com/Keyamoon/svgxuse\n * @version   1.1.22\n */\n/*jslint browser: true */\n/*global XDomainRequest, MutationObserver, window */\n(function () {\n    'use strict';\n    if (window && window.addEventListener) {\n        var cache = Object.create(null); // holds xhr objects to prevent multiple requests\n        var checkUseElems;\n        var tid; // timeout id\n        var debouncedCheck = function () {\n            clearTimeout(tid);\n            tid = setTimeout(checkUseElems, 100);\n        };\n        var unobserveChanges = function () {\n            return;\n        };\n        var observeChanges = function () {\n            var observer;\n            window.addEventListener('resize', debouncedCheck, false);\n            window.addEventListener('orientationchange', debouncedCheck, false);\n            if (window.MutationObserver) {\n                observer = new MutationObserver(debouncedCheck);\n                observer.observe(document.documentElement, {\n                    childList: true,\n                    subtree: true,\n                    attributes: true\n                });\n                unobserveChanges = function () {\n                    try {\n                        observer.disconnect();\n                        window.removeEventListener('resize', debouncedCheck, false);\n                        window.removeEventListener('orientationchange', debouncedCheck, false);\n                    } catch (ignore) {}\n                };\n            } else {\n                document.documentElement.addEventListener('DOMSubtreeModified', debouncedCheck, false);\n                unobserveChanges = function () {\n                    document.documentElement.removeEventListener('DOMSubtreeModified', debouncedCheck, false);\n                    window.removeEventListener('resize', debouncedCheck, false);\n                    window.removeEventListener('orientationchange', debouncedCheck, false);\n                };\n            }\n        };\n        var createRequest = function (url) {\n            // In IE 9, cross origin requests can only be sent using XDomainRequest.\n            // XDomainRequest would fail if CORS headers are not set.\n            // Therefore, XDomainRequest should only be used with cross origin requests.\n            function getOrigin(href) {\n                var a = document.createElement('a');\n                a.href = href;\n                return a.protocol + a.hostname;\n            }\n            var Request;\n            var origin = location.protocol + location.hostname;\n            var origin2;\n            if (window.XMLHttpRequest) {\n                Request = new XMLHttpRequest();\n                origin2 = getOrigin(url);\n                if (Request.withCredentials === undefined && origin2 !== '' && origin2 !== origin) {\n                    Request = XDomainRequest || undefined;\n                } else {\n                    Request = XMLHttpRequest;\n                }\n            }\n            return Request;\n        };\n        var xlinkNS = 'http://www.w3.org/1999/xlink';\n        checkUseElems = function () {\n            var base;\n            var bcr;\n            var fallback = ''; // optional fallback URL in case no base path to SVG file was given and no symbol definition was found.\n            var hash;\n            var href;\n            var i;\n            var inProgressCount = 0;\n            var isHidden;\n            var Request;\n            var url;\n            var uses;\n            var xhr;\n            function observeIfDone() {\n                // If done with making changes, start watching for chagnes in DOM again\n                inProgressCount -= 1;\n                if (inProgressCount === 0) { // if all xhrs were resolved\n                    unobserveChanges(); // make sure to remove old handlers\n                    observeChanges(); // watch for changes to DOM\n                }\n            }\n            function attrUpdateFunc(spec) {\n                return function () {\n                    if (cache[spec.base] !== true) {\n                        spec.useEl.setAttributeNS(xlinkNS, 'xlink:href', '#' + spec.hash);\n                    }\n                };\n            }\n            function onloadFunc(xhr) {\n                return function () {\n                    var body = document.body;\n                    var x = document.createElement('x');\n                    var svg;\n                    xhr.onload = null;\n                    x.innerHTML = xhr.responseText;\n                    svg = x.getElementsByTagName('svg')[0];\n                    if (svg) {\n                        svg.setAttribute('aria-hidden', 'true');\n                        svg.style.position = 'absolute';\n                        svg.style.width = 0;\n                        svg.style.height = 0;\n                        svg.style.overflow = 'hidden';\n                        body.insertBefore(svg, body.firstChild);\n                    }\n                    observeIfDone();\n                };\n            }\n            function onErrorTimeout(xhr) {\n                return function () {\n                    xhr.onerror = null;\n                    xhr.ontimeout = null;\n                    observeIfDone();\n                };\n            }\n            unobserveChanges(); // stop watching for changes to DOM\n            // find all use elements\n            uses = document.getElementsByTagName('use');\n            for (i = 0; i < uses.length; i += 1) {\n                try {\n                    bcr = uses[i].getBoundingClientRect();\n                } catch (ignore) {\n                    // failed to get bounding rectangle of the use element\n                    bcr = false;\n                }\n                href = uses[i].getAttributeNS(xlinkNS, 'href');\n                if (href && href.split) {\n                    url = href.split('#');\n                } else {\n                    url = [\"\", \"\"];\n                }\n                base = url[0];\n                hash = url[1];\n                isHidden = bcr && bcr.left === 0 && bcr.right === 0 && bcr.top === 0 && bcr.bottom === 0;\n                if (bcr && bcr.width === 0 && bcr.height === 0 && !isHidden) {\n                    // the use element is empty\n                    // if there is a reference to an external SVG, try to fetch it\n                    // use the optional fallback URL if there is no reference to an external SVG\n                    if (fallback && !base.length && hash && !document.getElementById(hash)) {\n                        base = fallback;\n                    }\n                    if (base.length) {\n                        // schedule updating xlink:href\n                        xhr = cache[base];\n                        if (xhr !== true) {\n                            // true signifies that prepending the SVG was not required\n                            setTimeout(attrUpdateFunc({\n                                useEl: uses[i],\n                                base: base,\n                                hash: hash\n                            }), 0);\n                        }\n                        if (xhr === undefined) {\n                            Request = createRequest(base);\n                            if (Request !== undefined) {\n                                xhr = new Request();\n                                cache[base] = xhr;\n                                xhr.onload = onloadFunc(xhr);\n                                xhr.onerror = onErrorTimeout(xhr);\n                                xhr.ontimeout = onErrorTimeout(xhr);\n                                xhr.open('GET', base);\n                                xhr.send();\n                                inProgressCount += 1;\n                            }\n                        }\n                    }\n                } else {\n                    if (!isHidden) {\n                        if (cache[base] === undefined) {\n                            // remember this URL if the use element was not empty and no request was sent\n                            cache[base] = true;\n                        } else if (cache[base].onload) {\n                            // if it turns out that prepending the SVG is not necessary,\n                            // abort the in-progress xhr.\n                            cache[base].abort();\n                            delete cache[base].onload;\n                            cache[base] = true;\n                        }\n                    } else if (base.length && cache[base]) {\n                        attrUpdateFunc({\n                            useEl: uses[i],\n                            base: base,\n                            hash: hash\n                        })();\n                    }\n                }\n            }\n            uses = '';\n            inProgressCount += 1;\n            observeIfDone();\n        };\n        // The load event fires when all resources have finished loading, which allows detecting whether SVG use elements are empty.\n        window.addEventListener('load', function winLoad() {\n            window.removeEventListener('load', winLoad, false); // to prevent memory leaks\n            tid = setTimeout(checkUseElems, 0);\n        }, false);\n    }\n}());\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/svgxuse/svgxuse.js\n ** module id = 1\n ** module chunks = 0\n **/","import '../polyfills/element-matches';\n\nexport default class FileUploader {\n  /**\n   * File uploader.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    const labelSelector = this.options.labelSelector || element.dataset.label;\n    this.labelNode = element.parentNode.querySelector(labelSelector) || element.nextElementSibling;\n\n    this.constructor.components.set(this.element, this);\n\n    element.addEventListener('change', (event) => this.updateLabel(event));\n  }\n\n  /**\n   * Instantiates file uploader of the given element.\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates file uploader in the given node.\n   * If the given element indicates that it's an file uploader, instantiates it.\n   * Otherwise, instantiates file uploader by searching for file uploader in the given node.\n   * @param {HTMLElement} element The element working as a file uploader.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find file uploaders.\n   * @param {string} [options.labelSelector] The CSS selector to find the label for the file name.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Updates the label for the file name upon file selection.\n   * @param {Event} event The event triggering this method.\n   */\n  updateLabel(event) {\n    let fileName = '';\n    const element = this.element;\n\n    if (element.files && element.files.length > 1) {\n      fileName = (element.dataset.multipleCaption || '').replace('{count}', element.files.length);\n    } else {\n      fileName = event.target.value.split('\\\\').pop();\n    }\n\n    if (fileName) {\n      this.labelNode.textContent = fileName;\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and file uploader instance.\n * @type {WeakMap}\n */\nFileUploader.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode FileUploader.create .create()}, or {@linkcode FileUploader.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode FileUploader.init .init()} works.\n * @property {string} selectorInit The CSS selector to find file uploaders.\n * @property {string} [labelSelector] The CSS selector to find the label for the file name.\n */\nFileUploader.options = {\n  selectorInit: '[data-file-uploader]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/file-uploader.js\n **/","const matchesFuncName = [\n  'matches',\n  'webkitMatchesSelector',\n  'msMatchesSelector',\n].filter((name) => typeof Element.prototype[name] === 'function')[0];\n\nif (matchesFuncName !== 'matches') {\n  Element.prototype.matches = Element.prototype[matchesFuncName];\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/element-matches.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport on from '../misc/on';\nimport '../polyfills/element-matches';\n\nexport default class FabButton {\n  /**\n   * Floating action button.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a floting action button.\n   */\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n\n    this.constructor.components.set(this.element, this);\n\n    element.addEventListener('click', (event) => this.toggle(event));\n  }\n\n  /**\n   * Instantiates floating action buttons in the given element.\n   * If the given element indicates that it's an floating action button, instantiates it.\n   * Otherwise, instantiates floating action buttons by clicking on floating action buttons in the given node.\n   * @param {Node} target The DOM node to instantiate floating action buttons in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find floating action buttons.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target);\n    } else {\n      return on(target, 'click', (event) => {\n        const element = eventMatches(event, effectiveOptions.selectorInit);\n        if (element && !this.components.has(element)) {\n          this.create(element).toggle(event);\n        }\n      });\n    }\n  }\n\n  /**\n   * Toggles this floating action button.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    if (this.element.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    if (this.element.dataset.state === 'closed') {\n      this.element.dataset.state = 'open';\n    } else {\n      this.element.dataset.state = 'closed';\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * Instantiates floating action button of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n}\n\n/**\n * The map associating DOM element and floating action button instance.\n * @type {WeakMap}\n */\nFabButton.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode FabButton.create .create()}, or {@linkcode FabButton.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode FabButton.init .init()} works.\n * @property {string} selectorInit The CSS selector to find floating action buttons.\n */\nFabButton.options = {\n  selectorInit: '[data-fab]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/fab.js\n **/","import './element-matches';\n\nexport default function eventMatches(event, selector) {\n  // <svg> in IE does not have `Element#msMatchesSelector()` (that should be copied to `Element#matches()` by the polyfill).\n  // Also a weird behavior is seen in IE where DOM tree seems broken when `event.target` is on <svg>.\n  // Therefore this function simply returns `undefined` when `event.target` is on <svg>.\n  if (typeof event.target.matches === 'function') {\n    if (event.target.matches(selector)) {\n      // If event target itself matches the given selector, return it\n      return event.target;\n    } else if (event.target.matches(selector + ' *')) {\n      // If event target is a child node of a DOM element that matches the given selector, find the DOM element by going up the DOM tree\n      for (let traverse = event.target; traverse && traverse !== event.currentTarget; traverse = traverse.parentNode) {\n        if (traverse.matches(selector)) {\n          return traverse;\n        }\n      }\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/event-matches.js\n **/","export default function on(element, ...args) {\n  element.addEventListener(...args);\n  return {\n    release() {\n      element.removeEventListener(...args);\n      return null;\n    },\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/misc/on.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/object-assign';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class ContentSwitcher {\n  /**\n   * Set of content switcher buttons.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleClick(event));\n\n    [... element.querySelectorAll('input')].forEach((input) => {\n      if (input.checked) this._changeActive(input);\n    });\n  }\n\n  /**\n   * Instantiates a set of content switcher buttons of the given element.\n   * @param {HTMLElement} element The element working as a set of content switcher buttons.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates content switcher button sets in the given node.\n   * If the given element indicates that it's an content switcher button set, instantiates it.\n   * Otherwise, instantiates content switcher button sets by searching for content switcher button sets in the given node.\n   * @param {Node} target The DOM node to instantiate content switcher button sets in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find content switcher button set.\n   * @param {string} [options.selectorButton] The CSS selector to find switcher buttons.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected switcher button.\n   * @param {string} [options.classActive] The CSS class for switcher button's selected state.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a switcher button is selected.\n   *   Cancellation of this event stops selection of content switcher button.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... document.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Handles click on content switcher button set.\n   * If the click is on a content switcher button, activates it.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const button = eventMatches(event, this.options.selectorButton);\n\n    if (button) {\n      this.setActive(button);\n    }\n  }\n\n  /**\n   * Internal method of {@linkcode ContentSwitcher#setActive .setActive()}, to select a content switcher button.\n   * @private\n   * @param {HTMLElement} item The button to be selected.\n   */\n  _changeActive(item) {\n    // `options.selectorLink` is not defined in this class itself, code here primary is for inherited classes\n    const itemLink = item.querySelector(this.options.selectorLink);\n    if (itemLink) {\n      [... this.element.querySelectorAll(this.options.selectorLink)].forEach((link) => {\n        if (link !== itemLink) {\n          link.setAttribute('aria-selected', 'false');\n        }\n      });\n      itemLink.setAttribute('aria-selected', 'true');\n    }\n\n    const selectorButtons = [... this.element.querySelectorAll(this.options.selectorButton)];\n\n    selectorButtons.forEach((button) => {\n      if (button !== item) {\n        toggleClass(button, this.options.classActive, false);\n        [... button.ownerDocument.querySelectorAll(button.dataset.target)].forEach(element => element.setAttribute('hidden', ''));\n      }\n    });\n\n    toggleClass(item, this.options.classActive, true);\n    [... item.ownerDocument.querySelectorAll(item.dataset.target)].forEach(element => element.removeAttribute('hidden'));\n  }\n\n  /**\n   * Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n   * @typedef {Object} ContentSwitcher~cancelError\n   * @property {boolean} canceled `true` always.\n   * @property {boolean} item The content switcher button that was about to be selected.\n   */\n\n  /**\n   * The callback called once switching is finished or is canceled.\n   * @callback ContentSwitcher~setActiveCallback\n   * @param {ContentSwitcher~cancelError} error Error thrown when selection (upon clicking on a content switcher button, etc.) is canceled.\n   * @param {HTMLElement} item The newly selected button. `null` if when selection is canceled.\n   */\n\n  /**\n   * Selects a content switcher button.\n   * If the selected button has `data-target` attribute, DOM elements it points to as a CSS selector will be shown.\n   * DOM elements associated with unselected buttons in the same way will be hidden.\n   * @param {HTMLElement} item The button to be selected.\n   * @param {ContentSwitcher~setActiveCallback} callback The callback called once selection is finished or is canceled.\n   */\n  setActive(item, callback) {\n    const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n      bubbles: true,\n      cancelable: true,\n      detail: { item },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeActive(item);\n      this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { item },\n      }));\n      if (callback) {\n        callback(null, item);\n      }\n    } else {\n      const error = new Error('Switching active item has been canceled.');\n      error.canceled = true;\n      error.item = item;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and content switcher set instance.\n * @type {WeakMap}\n */\nContentSwitcher.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode ContentSwitcher.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode ContentSwitcher.init .init()} works.\n * @property {string} selectorInit The CSS selector to find content switcher button set.\n * @property {string} [selectorButton] The CSS selector to find switcher buttons.\n * @property {string} [selectorButtonSelected] The CSS selector to find the selected switcher button.\n * @property {string} [classActive] The CSS class for switcher button's selected state.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a switcher button is selected.\n *   Cancellation of this event stops selection of content switcher button.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a switcher button is selected.\n */\nContentSwitcher.options = {\n  selectorInit: '[data-content-switcher]',\n  selectorButton: 'input[type=\"radio\"], .bx--content-switcher__btn',\n  selectorButtonSelected: 'input[type=\"radio\"].bx--content-switcher--selected',\n  classActive: 'bx--content-switcher--selected',\n  eventBeforeSelected: 'content-switcher-beingselected',\n  eventAfterSelected: 'content-switcher-selected',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/content-switcher.js\n **/","Array.from = Array.from || function fromArray(a) {\n  return Array.prototype.slice.call(a);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/array-from.js\n **/","Object.assign = Object.assign || function assignObject(inDst) {\n  if (inDst == null) { // eslint-disable-line eqeqeq\n    // Throw if the given destination is null or undefined\n    throw new TypeError('Can\\'t convert to object: ${dst}');\n  }\n\n  const dst = Object(inDst);\n\n  [... arguments].slice(1).forEach((src) => {\n    Object.keys(src).forEach((prop) => {\n      dst[prop] = src[prop];\n    });\n  });\n\n  return dst;\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/object-assign.js\n **/","export default function toggleClass(element, name, add) {\n  if (element.classList.contains(name) === !add) {\n    element.classList[add ? 'add' : 'remove'](name);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/toggle-class.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/math-sign';\nimport '../polyfills/object-assign';\nimport ContentSwitcher from './content-switcher';\n\nexport default class Tab extends ContentSwitcher {\n  /**\n   * Container of tabs.\n   * @extends ContentSwitcher\n   * @param {HTMLElement} element The element working as a container of tabs.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  constructor(element, options) {\n    super(element, options);\n\n    this.element.addEventListener('keydown', (event) => this.handleKeyDown(event));\n\n    const selected = this.element.querySelector(this.options.selectorButtonSelected);\n    if (selected) {\n      this.updateTriggerText(selected);\n    }\n  }\n\n  /**\n   * Instantiates tab containers in the given node.\n   * If the given element indicates that it's an tab container, instantiates it.\n   * Otherwise, instantiates tab containers by searching for tab containers in the given node.\n   * @param {Node} target The DOM node to instantiate tab containers in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find tab containers.\n   * @param {string} [options.selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n   * @param {string} [options.selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n   * @param {string} [options.selectorButton] The CSS selector to find tab containers.\n   * @param {string} [options.selectorButtonSelected] The CSS selector to find the selected tab.\n   * @param {string} [options.selectorLink] The CSS selector to find the links in tabs.\n   * @param {string} [options.classActive] The CSS class for tab's selected state.\n   * @param {string} [options.classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a tab is selected.\n   *   Cancellation of this event stops selection of tab.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a tab is selected.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  _changeActive(item) {\n    super._changeActive(item);\n    this.updateTriggerText(item);\n  }\n\n  /**\n   * Handles click on tab container.\n   * * If the click is on a tab, activates it.\n   * * If the click is on the button to open the drop down menu, does so.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    super.handleClick(event);\n    const button = eventMatches(event, this.options.selectorButton);\n    const trigger = eventMatches(event, this.options.selectorTrigger);\n    if (button) {\n      super.handleClick(event);\n      this.updateMenuState();\n    }\n    if (trigger) {\n      this.updateMenuState();\n    }\n  }\n\n  /**\n   * Handles arrow keys on tab container.\n   * * Up/Left keys are used to go to previous tab.\n   * * Down/Right keys are used to go to next tab.\n   * @param {Event} event The event triggering this method.\n   */\n  handleKeyDown(event) {\n    const triggerNode = this.element.querySelector(this.options.selectorTrigger);\n    if (triggerNode && triggerNode.offsetParent) {\n      return;\n    }\n\n    const direction = {\n      Left: -1,\n      Right: 1,\n      ArrowLeft: -1,\n      ArrowRight: 1,\n    }[event.key || event.keyIdentifier];\n\n    if (direction) {\n      const buttons = [... this.element.querySelectorAll(this.options.selectorButton)];\n      const button = this.element.querySelector(this.options.selectorButtonSelected);\n      const nextIndex = Math.max(buttons.indexOf(button) + direction, -1 /* For `button` not found in `buttons` */);\n      const nextIndexLooped = nextIndex >= 0 && nextIndex < buttons.length ? nextIndex :\n        nextIndex - Math.sign(nextIndex) * buttons.length;\n      this.setActive(buttons[nextIndexLooped], (error, item) => {\n        if (item) {\n          const link = item.querySelector(this.options.selectorLink);\n          if (link) {\n            link.focus();\n          }\n        }\n      });\n      event.preventDefault();\n    }\n  }\n\n  /**\n   * Shows/hides the drop down menu used in narrow mode.\n   */\n  updateMenuState() {\n    this.element.querySelector(this.options.selectorMenu).classList.toggle(this.options.classHidden);\n  }\n\n  /**\n   * Updates the text indicating the currently selected tab item.\n   * @param {HTMLElement} target The newly selected tab item.\n   */\n  updateTriggerText(target) {\n    this.element.querySelector(this.options.selectorTriggerText).textContent = target.textContent;\n  }\n}\n\n/**\n * The map associating DOM element and tab container instance.\n * @type {WeakMap}\n */\nTab.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode ContentSwitcher.create .create()}, or {@linkcode Tab.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Tab.init .init()} works.\n * @property {string} selectorInit The CSS selector to find tab containers.\n * @property {string} [selectorMenu] The CSS selector to find the drop down menu used in narrow mode.\n * @property {string} [selectorTrigger] The CSS selector to find the button to open the drop down menu used in narrow mode.\n * @property {string} [selectorTriggerText] The CSS selector to find the element used in narrow mode showing the selected tab item.\n * @property {string} [selectorButton] The CSS selector to find tab containers.\n * @property {string} [selectorButtonSelected] The CSS selector to find the selected tab.\n * @property {string} [selectorLink] The CSS selector to find the links in tabs.\n * @property {string} [classActive] The CSS class for tab's selected state.\n * @property {string} [classHidden] The CSS class for the drop down menu's hidden state used in narrow mode.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a tab is selected.\n *   Cancellation of this event stops selection of tab.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a tab is selected.\n */\nTab.options = Object.assign(Object.create(ContentSwitcher.options), {\n  selectorInit: '[data-tabs]',\n  selectorMenu: '.bx--tabs__nav',\n  selectorTrigger: '.bx--tabs__trigger',\n  selectorTriggerText: '.bx--tabs__trigger-text',\n  selectorButton: '.bx--tabs__nav-item',\n  selectorButtonSelected: '.bx--tabs__nav-item.bx--tabs--selected',\n  selectorLink: '.bx--tabs__nav-link',\n  classActive: 'bx--tabs--selected',\n  classHidden: 'bx--tabs--hidden',\n  eventBeforeSelected: 'tab-beingselected',\n  eventAfterSelected: 'tab-selected',\n});\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/tabs.js\n **/","Math.sign = Math.sign || function sign(x) {\n  const n = +x;\n  return n === 0 ? n : n / Math.abs(n);\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/math-sign.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport toggleClass from '../polyfills/toggle-class';\nimport on from '../misc/on';\n\nexport default class OverflowMenu {\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.constructor.components.set(this.element, this);\n\n    /**\n     * The handle to release click event listener on document object.\n     * @member {Handle}\n     */\n    this.hDocumentClick = on(this.element.ownerDocument, 'click', (event) => this.handleDocumentClick(event));\n\n    /**\n     * The handle to release keypress event listener on document object.\n     * @member {Handle}\n     */\n    this.hDocumentKeyPress = on(this.element.ownerDocument, 'keypress', (event) => this.handleKeyPress(event));\n  }\n\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element));\n    }\n  }\n\n  handleDocumentClick(event) {\n    const isOfSelf = this.element.contains(event.target);\n    const shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\n    if (isOfSelf && this.element.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    toggleClass(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n  }\n\n  handleKeyPress(event) {\n    const key = event.key || event.which;\n    if (key === 'Enter' || key === 13) {\n      const isOfSelf = this.element.contains(event.target);\n      const shouldBeOpen = isOfSelf && !this.element.classList.contains('bx--overflow-menu--open');\n\n      if (isOfSelf && this.element.tagName === 'A') {\n        event.preventDefault();\n      }\n\n      toggleClass(this.element, 'bx--overflow-menu--open', shouldBeOpen);\n    }\n  }\n\n  release() {\n    if (this.hDocumentClick) {\n      this.hDocumentClick = this.hDocumentClick.release();\n    }\n    if (this.hDocumentKeyPress) {\n      this.hDocumentKeyPress = this.hDocumentKeyPress.release();\n    }\n    this.constructor.components.delete(this.element);\n  }\n}\n\nOverflowMenu.components = new WeakMap();\n\nOverflowMenu.options = {\n  selectorInit: '[data-overflow-menu]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/overflow-menu.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport eventMatches from '../polyfills/event-matches';\nimport toggleClass from '../polyfills/toggle-class';\nimport on from '../misc/on';\n\n/**\n * @param {Element} element The element to obtain transition duration from.\n * @returns {number} The transition duration of the given property set in the given element.\n */\nfunction getTransitionDuration(element) {\n  const computedStyle = element.ownerDocument.defaultView.getComputedStyle(element);\n  const durations = computedStyle.transitionDuration.split(/,\\s*/)\n    .map((transitionDuration) => parseFloat(transitionDuration))\n    .filter((duration) => !isNaN(duration));\n  return durations.length > 0 ? Math.max(...durations) : 0;\n}\n\nexport default class Modal {\n  /**\n   * Modal dialog.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.hookCloseActions();\n  }\n\n  /**\n   * Instantiates modal dialog of the given element.\n   * @param {HTMLElement} element The element working as a modal dialog.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates modal dialogs in the given element.\n   * If the given element indicates that it's an modal dialog, instantiates it.\n   * Otherwise, instantiates modal dialogs by clicking on launcher buttons\n   * (buttons with `data-modal-target` attribute) of modal dialogs in the given node.\n   * @implements Component\n   * @param {Node} target The DOM node to instantiate modal dialogs in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS class to find modal dialogs.\n   * @param {string} [options.attribInitTarget] The attribute name in the launcher buttons to find target modal dialogs.\n   * @param {string} [options.classVisible] The CSS class for the visible state.\n   * @param {string} [options.classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this modal is shown.\n   *   Cancellation of this event stops showing the modal.\n   * @param {string} [options.eventAfterShown]\n   *   The name of the custom event telling that modal is sure shown\n   *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this modal is hidden.\n   *   Cancellation of this event stops hiding the modal.\n   * @param {string} [options.eventAfterHidden]\n   *   The name of the custom event telling that modal is sure hidden\n   *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      return on(target, 'click', (event) => {\n        const element = eventMatches(event, `[${effectiveOptions.attribInitTarget}]`);\n\n        if (element) {\n          event.delegateTarget = element;\n\n          const modalElements = [... element.ownerDocument.querySelectorAll(element.getAttribute(effectiveOptions.attribInitTarget))];\n          if (modalElements.length > 1) {\n            throw new Error('Target modal must be unique.');\n          }\n\n          if (modalElements.length === 1) {\n            if (element.tagName === 'A') {\n              event.preventDefault();\n            }\n\n            const modal = this.create(modalElements[0], effectiveOptions);\n            modal.show(event, (error, shownAlready) => {\n              if (!error && !shownAlready && modal.element.offsetWidth > 0 && modal.element.offsetHeight > 0) {\n                modal.element.focus();\n              }\n            });\n          }\n        }\n      });\n    }\n  }\n\n  /**\n   * Adds event listeners for closing this dialog.\n   */\n  hookCloseActions() {\n    this.element.addEventListener('click', (event) => {\n      if (event.currentTarget === event.target) this.hide(event);\n    });\n\n    if (this.keydownHandler) {\n      this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n      this.keydownHandler = null;\n    }\n\n    this.keydownHandler = (event) => {\n      if (event.which === 27) {\n        this.hide(event);\n      }\n    };\n\n    this.element.ownerDocument.body.addEventListener('keydown', this.keydownHandler);\n\n    [... this.element.querySelectorAll('[data-modal-close]')].forEach((element) => {\n      element.addEventListener('click', (event) => {\n        this.hide(event);\n      });\n    });\n  }\n\n  /**\n   * Internal method of {@linkcode Modal#show .show()} and  {@linkcode Modal#hide .hide()}, to change show/hidden state.\n   * @private\n   * @param {boolean} visible `true` to make this modal dialog visible.\n   * @param {Function} callback Callback called when change in state completes.\n   */\n  _changeState(visible, callback) {\n    let finished;\n    const finishedTransition = () => {\n      if (!finished) {\n        finished = true;\n        this.element.removeEventListener('transitionend', finishedTransition);\n        callback();\n      }\n    };\n\n    this.element.addEventListener('transitionend', finishedTransition);\n    const transitionDuration = getTransitionDuration(this.element);\n    toggleClass(this.element, this.options.classVisible, visible);\n    toggleClass(this.element.ownerDocument.body, this.options.classNoScroll, visible);\n    if (transitionDuration === 0) {\n      finishedTransition();\n    }\n  }\n\n  /**\n   * The callback called once showing/hiding this dialog is finished or is canceled.\n   * @callback Modal~stateChangeCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if the showing/hiding this dialog is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before showing/hiding this dialog happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {boolean} newState The new toggle state.\n   */\n\n  /**\n   * Shows this modal dialog.\n   * @param {HTMLElement} [launchingElement] The DOM element that triggered calling this function.\n   * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n   */\n  show(launchingElementOrEvent, callback) {\n    const launchingElementOrEventOmitted = !launchingElementOrEvent || typeof launchingElementOrEvent === 'function';\n    if (launchingElementOrEventOmitted) {\n      callback = launchingElementOrEvent; // eslint-disable-line no-param-reassign\n    }\n\n    const launchingElement = launchingElementOrEventOmitted ? null :\n      launchingElementOrEvent.delegateTarget || launchingElementOrEvent.currentTarget || launchingElementOrEvent;\n\n    const launchingEvent = launchingElementOrEventOmitted ? null :\n      launchingElementOrEvent.currentTarget && launchingElementOrEvent;\n\n    if (launchingElement && !launchingElement.nodeType) {\n      throw new TypeError('DOM Node should be given for launching element.');\n    }\n\n    if (launchingEvent && !launchingEvent.type) {\n      throw new TypeError('DOM event should be given for launching event.');\n    }\n\n    if (this.element.classList.contains(this.options.classVisible)) {\n      if (callback) {\n        callback(null, true);\n      }\n      return;\n    }\n\n    const eventStart = new CustomEvent(this.options.eventBeforeShown, {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        launchingElement,\n        launchingEvent,\n      },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeState(true, () => {\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterShown, {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            launchingElement,\n            launchingEvent,\n          },\n        }));\n        if (callback) {\n          callback();\n        }\n      });\n    } else {\n      const error = new Error('Showing dialog has been canceled.');\n      error.canceled = true;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  /**\n   * Hides this modal dialog.\n   * @param {Modal~stateChangeCallback} [callback] The callback called once showing this dialog is finished or is canceled.\n   */\n  hide(launchingElementOrEvent, callback) {\n    const launchingElementOrEventOmitted = !launchingElementOrEvent || typeof launchingElementOrEvent === 'function';\n    if (launchingElementOrEventOmitted) {\n      callback = launchingElementOrEvent; // eslint-disable-line no-param-reassign\n    }\n\n    const launchingElement = launchingElementOrEventOmitted ? null :\n      launchingElementOrEvent.currentTarget || launchingElementOrEvent;\n\n    const launchingEvent = launchingElementOrEventOmitted ? null :\n      launchingElementOrEvent.currentTarget && launchingElementOrEvent;\n\n    if (launchingElement && !launchingElement.nodeType) {\n      throw new TypeError('DOM Node should be given for launching element.');\n    }\n\n    if (launchingEvent && !launchingEvent.type) {\n      throw new TypeError('DOM event should be given for launching event.');\n    }\n\n    if (!this.element.classList.contains(this.options.classVisible)) {\n      if (callback) {\n        callback(null, true);\n      }\n      return;\n    }\n\n    const eventStart = new CustomEvent(this.options.eventBeforeHidden, {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        launchingElement,\n        launchingEvent,\n      },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (this.element.dispatchEvent(eventStart)) {\n      this._changeState(false, () => {\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterHidden, {\n          bubbles: true,\n          cancelable: true,\n          detail: {\n            launchingElement,\n            launchingEvent,\n          },\n        }));\n        if (callback) {\n          callback();\n        }\n      });\n    } else {\n      const error = new Error('Hiding dialog has been canceled.');\n      error.canceled = true;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    if (this.keydownHandler) {\n      this.element.ownerDocument.body.removeEventListener('keydown', this.keydownHandler);\n      this.keydownHandler = null;\n    }\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * @deprecated\n   */\n  static hook() {\n    console.warn('Modals.hook() is deprecated. Use Modals.init() instead.'); // eslint-disable-line no-console\n  }\n}\n\n/**\n * The map associating DOM element and modal instance.\n * @type {WeakMap}\n */\nModal.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Modal.create .create()}, or {@linkcode Modal.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Modal.init .init()} works.\n * @property {string} selectorInit The CSS class to find modal dialogs.\n * @property {string} attribInitTarget The attribute name in the launcher buttons to find target modal dialogs.\n * @property {string} [classVisible] The CSS class for the visible state.\n * @property {string} [classNoScroll] The CSS class for hiding scroll bar in body element while modal is shown.\n * @property {string} [eventBeforeShown]\n *   The name of the custom event fired before this modal is shown.\n *   Cancellation of this event stops showing the modal.\n * @property {string} [eventAfterShown]\n *   The name of the custom event telling that modal is sure shown\n *   without being canceled by the event handler named by `eventBeforeShown` option (`modal-beingshown`).\n * @property {string} [eventBeforeHidden]\n *   The name of the custom event fired before this modal is hidden.\n *   Cancellation of this event stops hiding the modal.\n * @property {string} [eventAfterHidden]\n *   The name of the custom event telling that modal is sure hidden\n *   without being canceled by the event handler named by `eventBeforeHidden` option (`modal-beinghidden`).\n */\nModal.options = {\n  selectorInit: '[data-modal]',\n  attribInitTarget: 'data-modal-target',\n  classVisible: 'is-visible',\n  classNoScroll: 'bx--noscroll',\n  eventBeforeShown: 'modal-beingshown',\n  eventAfterShown: 'modal-shown',\n  eventBeforeHidden: 'modal-beinghidden',\n  eventAfterHidden: 'modal-hidden',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/modals.js\n **/","const missingNativeCustomEvent = (() => {\n  try {\n    new CustomEvent('test-event'); // eslint-disable-line no-new\n  } catch (error) {\n    return true;\n  }\n})();\nif (missingNativeCustomEvent) {\n  window.CustomEvent = function CustomEvent(type, init = {}) {\n    const event = document.createEvent('HTMLEvents');\n    event.initEvent(type, init.bubbles, init.cancelable);\n    if (init.detail) {\n      event.detail = init.detail;\n    }\n    return event;\n  };\n}\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/polyfills/custom-event.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport eventMatches from '../polyfills/event-matches';\n\nexport default class HeaderNav {\n  /**\n   * Header with taxonomy menu.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a taxonomy menu.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.menuNode = this.element.querySelector(this.options.selectorMenu);\n\n    this.element.addEventListener('keydown', (event) => this.toggleNav(event));\n\n    [... this.element.querySelectorAll(this.options.selectorItemLink)].forEach((item) => {\n      item.addEventListener('click', (e) => this.select(e));\n    });\n  }\n\n  /**\n   * Instantiates taxonomy menus in the given element.\n   * If the given element indicates that it's an taxonomy menu, instantiates it.\n   * Otherwise, instantiates taxonomy menus by clicking on launcher buttons\n   * (buttons with `data-nav-target` attribute) of taxonomy menus in the given node.\n   * @implements Component\n   * @param {Node} target The DOM node to instantiate taxonomy menus in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find taxonomy menus.\n   * @param {string} [options.attribInitTarget] The attribute name in the lancher buttons to find taxonomy menus.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      const handler = (event) => {\n        const element = eventMatches(event, `[${effectiveOptions.attribInitTarget}]`);\n\n        if (element) {\n          const headerElements = [... element.ownerDocument.querySelectorAll(element.getAttribute(effectiveOptions.attribInitTarget))];\n          if (headerElements.length > 1) {\n            throw new Error('Target header must be unique.');\n          }\n\n          if (headerElements.length === 1) {\n            if (element.tagName === 'A') {\n              event.preventDefault();\n            }\n            this.create(headerElements[0], effectiveOptions).toggleNav(event);\n          }\n        }\n      };\n\n      target.addEventListener('click', handler);\n      target.addEventListener('keydown', handler);\n\n      return {\n        release: () => {\n          target.removeEventListener('keydown', handler);\n          target.removeEventListener('click', handler);\n        },\n      };\n    }\n  }\n\n  /**\n   * Instantiates taxonomy menu of the given element.\n   * @param {HTMLElement} element The element working as a taxonomy menu.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n   * @param {string} [options.selectorMenu] The CSS selector to find the container of the menu items.\n   * @param {string} [options.selectorItem] The CSS selector to find the menu items.\n   * @param {string} [options.selectorItemLink] The CSS selector to find the link in the menu items.\n   * @param {string} [options.selectorLabel] The CSS selector to find the label of the menu items.\n   * @param {string} [options.classActive] The CSS class for the visible state.\n   * @param {string} [options.eventBeforeShown]\n   *   The name of the custom event fired before this taxonomy menu is shown.\n   *   Cancellation of this event stops showing the taxonomy menu.\n   * @param {string} [options.eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n   * @param {string} [options.eventBeforeHidden]\n   *   The name of the custom event fired before this taxonomy menu is hidden.\n   *   Cancellation of this event stops hiding the taxonomy menu.\n   * @param {string} [options.eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a menu item is selected.\n   *   Cancellation of this event stops the selection.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a menu item is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Shows/hides this taxonomy menu.\n   * @param {Event} event The event triggering this function.\n   */\n  toggleNav(event) {\n    const isActive = this.element.classList.contains(this.options.classActive);\n    let add;\n    if (event.type === 'click' || event.type === 'keydown' && event.which === 40) {\n      // Toggle button or ESC key on nav\n      add = !isActive;\n    } else if (event.type === 'keydown' && event.which === 27) {\n      // Down arrow on launch button\n      add = false;\n    } else {\n      return;\n    }\n\n    const launchingElement = eventMatches(event, '[data-nav-target]') || event.currentTarget;\n    if (launchingElement.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    const eventStart = new CustomEvent(this.options[add ? 'eventBeforeShown' : 'eventBeforeHidden'], {\n      bubbles: true,\n      cancelable: true,\n      detail: { launchingElement: launchingElement },\n    });\n    const defaultNotPrevented = this.element.dispatchEvent(eventStart);\n\n    if (add) {\n      this.triggerNode = launchingElement;\n      this.triggerLabelNode = this.triggerNode.querySelector(this.options.selectorTriggerLabel);\n    }\n\n    if (defaultNotPrevented) {\n      this.element.classList[add ? 'add' : 'remove'](this.options.classActive);\n      (this.element.classList.contains(this.options.classActive) ? this.menuNode : this.triggerNode).focus();\n      this.element.dispatchEvent(new CustomEvent(this.options[add ? 'eventAfterShown' : 'eventAfterHidden'], {\n        bubbles: true,\n        cancelable: true,\n        detail: { launchingElement: launchingElement },\n      }));\n    }\n  }\n\n  /**\n   * Selects a menu item.\n   * @param {Event} event The event triggering this function.\n   */\n  select(event) {\n    const activatedElement = event.currentTarget;\n    const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n      bubbles: true,\n      cancelable: true,\n      detail: {\n        initiatingEvent: event,\n        itemElement: activatedElement,\n      },\n    });\n\n    if (this.element.dispatchEvent(eventStart)) {\n      [... this.element.querySelectorAll(this.options.selectorItem)].forEach((element) => {\n        if (element.contains(activatedElement)) {\n          element.classList.add('selected');\n        } else if (element.classList.contains('selected')) {\n          element.classList.remove('selected');\n        }\n      });\n      activatedElement.classList.add('selected');\n      if (this.triggerLabelNode) {\n        this.triggerLabelNode.textContent = activatedElement.querySelector(this.options.selectorLabel).textContent;\n      }\n      this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { itemElement: activatedElement },\n      }));\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * @deprecated\n   */\n  static hook() {\n    console.warn('HeaderNav.hook() is deprecated. Use HeaderNav.init() instead.'); // eslint-disable-line no-console\n  }\n}\n\n/**\n * The map associating DOM element and taxonomy menu instance.\n * @type {WeakMap}\n */\nHeaderNav.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode HeaderNav.create .create()}, or {@linkcode HeaderNav.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode HeaderNav.init .init()} works.\n * @property {string} selectorInit The CSS selector to find taxonomy menus.\n * @property {string} attribInitTarget The attribute name in the lancher buttons to find taxonomy menus.\n * @property {string} [selectorTriggerLabel] The CSS selector to find the label for the selected menu item.\n * @property {string} [selectorMenu] The CSS selector to find the container of the menu items.\n * @property {string} [selectorItem] The CSS selector to find the menu items.\n * @property {string} [selectorItemLink] The CSS selector to find the link in the menu items.\n * @property {string} [selectorLabel] The CSS selector to find the label of the menu items.\n * @property {string} [classActive] The CSS class for the visible state.\n * @property {string} [eventBeforeShown]\n *   The name of the custom event fired before this taxonomy menu is shown.\n *   Cancellation of this event stops showing the taxonomy menu.\n * @property {string} [eventAfterShown] The name of the custom event fired after this taxonomy menu is shown.\n * @property {string} [eventBeforeHidden]\n *   The name of the custom event fired before this taxonomy menu is hidden.\n *   Cancellation of this event stops hiding the taxonomy menu.\n * @property {string} [eventAfterHidden] The name of the custom event fired after this taxonomy menu is hidden.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a menu item is selected.\n *   Cancellation of this event stops the selection.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a menu item is selected.\n */\nHeaderNav.options = {\n  selectorInit: '[data-nav]',\n  attribInitTarget: 'data-nav-target',\n  selectorTriggerLabel: '.current-taxonomy',\n  classActive: 'taxonomy-nav--active',\n  selectorMenu: '.taxonomy-menu',\n  selectorItem: '.taxonomy-item',\n  selectorItemLink: '.taxonomy-item--taxonomy-menu',\n  selectorLabel: '.taxonomy-item__label',\n  eventBeforeShown: 'header-beingshown',\n  eventAfterShown: 'header-shown',\n  eventBeforeHidden: 'header-beinghidden',\n  eventAfterHidden: 'header-hidden',\n  eventBeforeSelected: 'header-beingselected',\n  eventAfterSelected: 'header-selected',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/header.js\n **/","import '../polyfills/element-matches';\n\nexport default class Toolbars {\n  /**\n   * Search button in tool bar.\n   * @implements Component\n   * @param {HTMLElement} element The element working as an search button.\n   */\n  constructor(element) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.searchFieldNode = this.element.ownerDocument.querySelector(this.element.dataset.listIconsSearchActionTarget);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleActionClick(event));\n  }\n\n  /**\n   * Instantiates a search button of the given element.\n   * @param {HTMLElement} element The element working as a search button.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates search buttons in the given node.\n   * If the given element indicates that it's an search button, instantiates it.\n   * Otherwise, instantiates search buttons by searching for search buttons in the given node.\n   * @param {Node} target The DOM node to instantiate search buttons in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find search buttons.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element));\n    }\n  }\n\n  /**\n   * Show/hide search box.\n   * @param {Event} event The event triggering this method.\n   */\n  handleActionClick(event) {\n    const searchActionNode = event.currentTarget;\n\n    if (searchActionNode.tagName === 'A') {\n      event.preventDefault();\n    }\n\n    this.element.classList.toggle('show-search');\n    if (this.searchFieldNode) {\n      this.searchFieldNode.classList.toggle('show-search');\n      this.searchFieldNode.value = '';\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and search button instance.\n * @type {WeakMap}\n */\nToolbars.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Toolbars.create .create()}, or {@linkcode Toolbars.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Toolbars.init .init()} works.\n * @property {string} selectorInit The CSS selector to find search buttons.\n */\nToolbars.options = {\n  selectorInit: '[data-list-icons-search-action-target]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/toolbars.js\n **/","import toggleClass from '../polyfills/toggle-class';\nimport '../polyfills/element-matches';\n\nexport default class Loading {\n  /**\n   * Spinner indicating loading state.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} [options] The component options.\n   * @param {boolean} [options.active] `true` if this spinner should roll.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n    this.active = this.options.active;\n    this.ie = false;\n\n    // Check if browser is Internet Explorer\n    if (options.ie || window.ActiveXObject || 'ActiveXObject' in window) {\n      this.ie = true;\n      this.element.classList.add('bx--loading--ie');\n    }\n\n    this.constructor.components.set(this.element, this);\n\n    // Initialize spinner\n    this.set(this.active);\n  }\n\n  /**\n   * Instantiates spinner of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates spinner in the given node.\n   * If the given element indicates that it's an spinner, instantiates it.\n   * Otherwise, instantiates spinners by searching for spinners in the given node.\n   * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {boolean} [options.selectorInit] The CSS selector to find spinners.\n   * @param {boolean} [options.active] `true` if this spinner should roll.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Sets active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n  set(active) {\n    if (typeof active !== 'boolean') {\n      throw new TypeError('set expects a boolean.');\n    }\n\n    this.active = active;\n\n    if (this.ie) {\n      toggleClass(this.element, 'bx--loading--stop--ie', !this.active);\n    }\n    toggleClass(this.element, 'bx--loading--stop', !this.active);\n\n    return this;\n  }\n\n  /**\n   * Toggles active/inactive state.\n   * @param {boolean} active `true` if this spinner should roll.\n   */\n  toggle() {\n    return this.set(!this.active);\n  }\n\n  /**\n   * @returns {boolean} `true` if this spinner is rolling roll.\n   */\n  isActive() {\n    return this.active;\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and spinner instance.\n * @type {WeakMap}\n */\nLoading.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Loading.create .create()}, or {@linkcode Loading.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Loading.init .init()} works.\n * @property {string} selectorInit The CSS selector to find spinners.\n */\nLoading.options = {\n  selectorInit: '[data-loading]',\n  active: true,\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/loading.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport on from '../misc/on';\n\nexport default class Dropdown {\n  /**\n   * A selector with drop downs.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    if (this.element.dataset.dropdown !== 'navigation') {\n      this.element.dataset.dropdown = '';\n    }\n    this.constructor.components.set(this.element, this);\n\n    /**\n     * The handle to release click event listener on document object.\n     * @member {Handle}\n     */\n    this.hDocumentClick = on(this.element.ownerDocument, 'click', (event) => this.toggle(event));\n\n    this.element.addEventListener('keypress', (event) => this.toggle(event));\n    this.element.addEventListener('click', (event) => this.selected(event));\n  }\n\n  /**\n   * Instantiates selector of the given element.\n   * @param {HTMLElement} element The element working as a selector.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates selectors in the given node.\n   * If the given element indicates that it's an selector, instantiates it.\n   * Otherwise, instantiates selectors by searching for selectors in the given node.\n   * @param {Node} target The DOM node to instantiate selectors in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find selectors.\n   * @param {string} [options.selectorItem] The CSS selector to find clickable areas in dropdown items.\n   * @param {string} [options.selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n   * @param {string} [options.classSelected] The CSS class for the selected dropdown item.\n   * @param {string} [options.eventBeforeSelected]\n   *   The name of the custom event fired before a drop down item is selected.\n   *   Cancellation of this event stops selection of drop down item.\n   * @param {string} [options.eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  release() {\n    if (this.hDocumentClick) {\n      this.hDocumentClick = this.hDocumentClick.release();\n    }\n    this.constructor.components.delete(this.element);\n  }\n\n  /**\n   * Opens and closes the dropdown menu.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    if (event.which === 13 || event.which === 32 || event.type === 'click') {\n      const isOfSelf = this.element.contains(event.target);\n\n      if (isOfSelf) {\n        this.element.classList.toggle('bx--dropdown--open');\n      } else if (!isOfSelf && this.element.classList.contains('bx--dropdown--open')) {\n        this.element.classList.remove('bx--dropdown--open');\n      }\n    }\n  }\n\n  /**\n   * Handles clicking on the dropdown options, doing the following:\n   * * Change Dropdown text to selected option.\n   * * Remove selected option from options when selected.\n   * * Emit custom events.\n   * @param {Event} event The event triggering this method.\n   */\n  selected(event) {\n    const activatedElement = event.target;\n    if (activatedElement.parentElement.dataset.option !== undefined) {\n      const eventStart = new CustomEvent(this.options.eventBeforeSelected, {\n        bubbles: true,\n        cancelable: true,\n        detail: { item: activatedElement },\n      });\n\n      if (this.element.dispatchEvent(eventStart)) {\n        if (this.element.dataset.dropdownType !== 'navigation') {\n          this.element.firstElementChild.textContent = activatedElement.textContent;\n          activatedElement.classList.add(this.options.classSelected);\n        }\n        this.element.dataset.value = activatedElement.parentElement.dataset.value;\n        [... this.element.querySelectorAll(this.options.selectorItemSelected)].forEach((item) => {\n          if (activatedElement !== item) {\n            item.classList.remove(this.options.classSelected);\n          }\n        });\n\n        this.element.dispatchEvent(new CustomEvent(this.options.eventAfterSelected, {\n          bubbles: true,\n          cancelable: true,\n          detail: { item: activatedElement },\n        }));\n      }\n    }\n  }\n}\n\n/**\n * The map associating DOM element and selector instance.\n * @type {WeakMap}\n */\nDropdown.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Dropdown.create .create()}, or {@linkcode Dropdown.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Dropdown.init .init()} works.\n * @property {string} selectorInit The CSS selector to find selectors.\n * @property {string} [selectorItem] The CSS selector to find clickable areas in dropdown items.\n * @property {string} [selectorItemSelected] The CSS selector to find the clickable area in the selected dropdown item.\n * @property {string} [classSelected] The CSS class for the selected dropdown item.\n * @property {string} [eventBeforeSelected]\n *   The name of the custom event fired before a drop down item is selected.\n *   Cancellation of this event stops selection of drop down item.\n * @property {string} [eventAfterSelected] The name of the custom event fired after a drop down item is selected.\n */\nDropdown.options = {\n  selectorInit: '[data-dropdown]',\n  selectorItem: '[data-option] > .bx--dropdown__link',\n  selectorItemSelected: '[data-option] > .bx--dropdown__link.bx--dropdown--selected',\n  classSelected: 'bx--dropdown--selected',\n  eventBeforeSelected: 'dropdown-beingselected',\n  eventAfterSelected: 'dropdown-selected',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/dropdown.js\n **/","import eventMatches from '../polyfills/event-matches';\nimport '../polyfills/array-from';\nimport '../polyfills/element-matches';\nimport '../polyfills/object-assign';\nimport '../polyfills/math-sign';\n\nexport default class Card {\n  /**\n   * The container for cards.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a container.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n    this.constructor.components.set(this.element, this);\n    this.element.addEventListener('keydown', (event) => this.cardKeyPress(event));\n  }\n\n  /**\n   * Instantiates card container of the given element.\n   * @param {HTMLElement} element The element working as a container.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates card container in the given node.\n   * If the given element indicates that it's an card container, instantiates it.\n   * Otherwise, instantiates card containers by searching for card containers in the given node.\n   * @param {Node} target The DOM node to instantiate card containers in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find card containers.\n   * @param {string} [options.selectorCard] The CSS selector to find cards.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Goes back/forward among cards,\n   * right arrow key for going forward, left arrow key for going backward.\n   * @param {Event} event The event triggering this method.\n   */\n  cardKeyPress(event) {\n    const direction = {\n      Left: -1,\n      Right: 1,\n      ArrowLeft: -1,\n      ArrowRight: 1,\n    }[event.key || event.keyIdentifier];\n    const card = eventMatches(event, this.options.selectorCard);\n\n    if (direction && card && card === document.activeElement) {\n      const cards = [... this.element.querySelectorAll(this.options.selectorCard)];\n      const nextIndex = Math.max(cards.indexOf(card) + direction, -1 /* For `card` not found in `cards` */);\n      const nextIndexLooped = nextIndex >= 0 && nextIndex < cards.length ? nextIndex :\n        nextIndex - Math.sign(nextIndex) * cards.length;\n      cards[nextIndexLooped].focus();\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and card list instance.\n * @type {WeakMap}\n */\nCard.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Card.create .create()}, or {@linkcode Card.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Card.init .init()} works.\n * @property {string} selectorInit The CSS selector to find card containers.\n * @property {string} [selectorCard] The CSS selector to find cards.\n */\nCard.options = {\n  selectorInit: '[data-card-list]',\n  selectorCard: '.bx--card',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/card.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/custom-event';\nimport '../polyfills/element-matches';\n\nexport default class NumberInput {\n  /**\n   * Number input UI.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a number input UI.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.options = options;\n    this.options.ie = this.options.ie || 'ActiveXObject' in window;\n\n    this.element = element;\n    this.constructor.components.set(this.element, this);\n    // Broken DOM tree is seen with up/down arrows <svg> in IE, which breaks event delegation.\n    // Also <svg> does not seems to have `Element.classList`.\n    this.element.querySelector('.bx--number__arrow--up').addEventListener('click', (event) => this.handleClick(event));\n    this.element.querySelector('.bx--number__arrow--down').addEventListener('click', (event) => this.handleClick(event));\n  }\n\n  /**\n   * Instantiates number input UI of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates number input UI in the given node.\n   * If the given element indicates that it's an number input UI, instantiates it.\n   * Otherwise, instantiates number input UIs by searching for number input UIs in the given node.\n   * @param {Node} target The DOM node to instantiate number input UIs in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {boolean} [options.selectorInit] The CSS selector to find number input UIs.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element));\n    }\n  }\n\n  /**\n   * Increase/decrease number by clicking on up/down icons.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const state = event.currentTarget.classList;\n    const numberInput = this.element.querySelector('.bx--number__input');\n\n    if (state.contains('bx--number__arrow--icon-up')) {\n      if (this.options.ie) {\n        ++numberInput.value;\n      } else {\n        numberInput.stepUp();\n      }\n    } else if (state.contains('bx--number__arrow--icon-down')) {\n      if (this.options.ie) {\n        if (numberInput.value > 0) {\n          --numberInput.value;\n        }\n      } else {\n        numberInput.stepDown();\n      }\n    } else {\n      return;\n    }\n\n    // Programmatic change in value (including `stepUp()`/`stepDown()`) won't fire change event\n    numberInput.dispatchEvent(new CustomEvent('change', {\n      bubbles: true,\n      cancelable: false,\n    }));\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and number input UI instance.\n * @type {WeakMap}\n */\nNumberInput.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode NumberInput.create .create()}, or {@linkcode NumberInput.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode NumberInput.init .init()} works.\n * @property {string} selectorInit The CSS selector to find number input UIs.\n */\nNumberInput.options = {\n  selectorInit: '[data-numberinput]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/number-input.js\n **/","import '../polyfills/element-matches';\nimport eventMatches from '../polyfills/event-matches';\nimport '../polyfills/object-assign';\nimport toggleClass from '../polyfills/toggle-class';\nimport on from '../misc/on';\n\nexport default class Table {\n  /**\n   * Data table.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a data table.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n    this.element = element;\n\n    this.options = Object.assign(Object.create(this.constructor.options), options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.addEventListener('click', (event) => this.handleClick(event));\n  }\n\n  /**\n   * Instantiates a data table of the given element.\n   * @param {HTMLElement} element The element working as a data table.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Sets up the given node to instantiate data tables in.\n   * If the given element indicates that it's an data table, instantiates it.\n   * Otherwise, lazily instantiates data table when it's clicked on.\n   * @param {Node} target The DOM node to instantiate data tables in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find data tables.\n   * @param {string} [options.selectorTitle] The CSS selector to find column titles.\n   * @param {string} [options.selectorRow] The CSS selector to find rows.\n   * @param {string} [options.selectorCheckbox] The CSS selector to find check boxes.\n   * @param {string} [options.classSortState] The CSS class for the sorting state.\n   * @param {string} [options.classCheckState] The CSS class for the checked state.\n   * @param {string} [options.eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n   * @param {string} [options.eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n   * @param {string} [options.eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n   * @param {string} [options.eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n   * @returns {Handle} The handle to remove the event listener to handle clicking.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      return on(target, 'click', (event) => {\n        const element = eventMatches(event, effectiveOptions.selectorInit);\n        if (element && !this.components.has(element)) {\n          this.create(element, effectiveOptions).handleClick(event);\n        }\n      });\n    }\n  }\n\n  /**\n   * Handles click on data table.\n   * * If the click is on a column title, toggles its sorting state.\n   * * If the click is on a check box, toggles the check box.\n   * @param {Event} event The event triggering this method.\n   */\n  handleClick(event) {\n    const title = eventMatches(event, this.options.selectorTitle);\n    const row = eventMatches(event, this.options.selectorRow);\n    const checkbox = eventMatches(event, this.options.selectorCheckbox);\n    if (title) {\n      this.toggleState('Sort', title);\n    }\n    if (row && checkbox) {\n      this.toggleState('Check', row);\n    }\n  }\n\n  /**\n   * The callback called once toggling is finished or is canceled.\n   * @callback Table~toggleStateCallback\n   * @param {Error} error\n   *   An error object with `true` in its `canceled` property if the toggling is canceled.\n   *   Cancellation happens if the handler of a custom event, that is fired before toggling happens,\n   *   calls `.preventDefault()` against the event.\n   * @param {HTMLElement} element The toggled element.\n   * @param {boolean} newState The new toggle state.\n   */\n\n  /**\n   * Toggles a sorting state or a check box's state.\n   * @param {string} type\n   *   Specifies what state to toggle:\n   *   * `\"Sort\"` for toggling a sorting state.\n   *   * `\"Check\"` for toggling a check box's state.\n   * @param {HTMLElement} element The DOM element to toggle its state.\n   * @param {Table~toggleStateCallback} callback The callback called once toggling is finished or is canceled.\n   */\n  toggleState(type, element, callback) {\n    const newState = !element.classList.contains(this.options[`class${type}State`]);\n    const eventStart = new CustomEvent(this.options[`eventBefore${type}Toggled`], {\n      bubbles: true,\n      cancelable: true,\n      detail: { newState },\n    });\n\n    // https://connect.microsoft.com/IE/feedback/details/790389/event-defaultprevented-returns-false-after-preventdefault-was-called\n    if (element.dispatchEvent(eventStart)) {\n      toggleClass(element, this.options[`class${type}State`], newState);\n      // this._changeActive(item);\n      element.dispatchEvent(new CustomEvent(this.options[`eventAfter${type}Toggled`], {\n        bubbles: true,\n        cancelable: true,\n        detail: { newState },\n      }));\n      if (callback) {\n        callback(null, element, newState);\n      }\n    } else {\n      const error = new Error('Toggling on table has been canceled.');\n      error.canceled = true;\n      error.element = element;\n      error.newState = newState;\n      if (callback) {\n        callback(error);\n      }\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and data table instance.\n * @type {WeakMap}\n */\nTable.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode Table.create .create()}, or {@linkcode Table.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode Table.init .init()} works.\n * @property {string} selectorInit The CSS selector to find data tables.\n * @property {string} [selectorTitle] The CSS selector to find column titles.\n * @property {string} [selectorRow] The CSS selector to find rows.\n * @property {string} [selectorCheckbox] The CSS selector to find check boxes.\n * @property {string} [classSortState] The CSS class for the sorting state.\n * @property {string} [classCheckState] The CSS class for the checked state.\n * @property {string} [eventBeforeSortToggled] The name of the custom event fired before a column's sorting is toggled.\n * @property {string} [eventAfterSortToggled] The name of the custom event fired after a column's sorting is toggled.\n * @property {string} [eventBeforeCheckToggled] The name of the custom event fired before a check box is toggled.\n * @property {string} [eventAfterCheckToggled] The name of the custom event fired after a check box is toggled.\n */\nTable.options = {\n  selectorInit: '[data-table]',\n  selectorTitle: '.bx--table__column-title',\n  selectorRow: '.bx--table__row',\n  selectorCheckbox: '.bx--checkbox',\n  classSortState: 'bx--table__column-title--rotated',\n  classCheckState: 'bx--table__row--checked',\n  eventBeforeSortToggled: 'table-sort-beingtoggled',\n  eventAfterSortToggled: 'table-sort-toggled',\n  eventBeforeCheckToggled: 'table-check-beingtoggled',\n  eventAfterCheckToggled: 'table-check-toggled',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/table.js\n **/","import debounce from 'lodash.debounce';\n\nexport default class DetailPageHeader {\n\n  /**\n   * The Detail Page Header.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a page header.\n   * @param {Object} [options] The component options.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(this.constructor.options, options);\n\n    this.constructor.components.set(this.element, this);\n\n    // Debounce scroll event calls to handleScroll\n    const debouncedScroll = debounce(this.handleScroll.bind(this), 50);\n\n    this.element.ownerDocument.defaultView.addEventListener('scroll', debouncedScroll);\n  }\n\n  /**\n   * Instantiates detail page header of the given element.\n   * @param {HTMLElement} element The element.\n   * @param {Object} [options] The component options.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates the detail page header in the given element.\n   * If the given element indicates that it's a detail page header (animated) (having `data-detail-page-header` attribute), instantiates it.\n   * Otherwise, instantiates detail page header by searching for detail page header in the given node.\n   * @param {Node} target The DOM node to instantiate detail page header in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find detail page headers.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Adds class to header based on users position on the page\n   */\n  handleScroll() {\n    if (this.element.ownerDocument.defaultView.scrollY > 101) {\n      this.element.classList.add(this.options.slideUp);\n    } else {\n      this.element.classList.remove(this.options.slideUp);\n    }\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and detail page header instance.\n * @type {WeakMap}\n */\nDetailPageHeader.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode DetailPageHeader.create .create()}, or {@linkcode DetailPageHeader.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode DetailPageHeader.init .init()} works.\n * @property {string} selectorInit The CSS selector to find detail page headers.\n */\nDetailPageHeader.options = {\n  slideUp: 'bx--detail-page-header--with-tabs--animated-slide-up',\n  selectorInit: '[data-detail-page-header]',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/detail-page-header.js\n **/","/**\n * lodash (Custom Build) <https://lodash.com/>\n * Build: `lodash modularize exports=\"npm\" -o ./`\n * Copyright jQuery Foundation and other contributors <https://jquery.org/>\n * Released under MIT license <https://lodash.com/license>\n * Based on Underscore.js 1.8.3 <http://underscorejs.org/LICENSE>\n * Copyright Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n */\n\n/** Used as the `TypeError` message for \"Functions\" methods. */\nvar FUNC_ERROR_TEXT = 'Expected a function';\n\n/** Used as references for various `Number` constants. */\nvar NAN = 0 / 0;\n\n/** `Object#toString` result references. */\nvar symbolTag = '[object Symbol]';\n\n/** Used to match leading and trailing whitespace. */\nvar reTrim = /^\\s+|\\s+$/g;\n\n/** Used to detect bad signed hexadecimal string values. */\nvar reIsBadHex = /^[-+]0x[0-9a-f]+$/i;\n\n/** Used to detect binary string values. */\nvar reIsBinary = /^0b[01]+$/i;\n\n/** Used to detect octal string values. */\nvar reIsOctal = /^0o[0-7]+$/i;\n\n/** Built-in method references without a dependency on `root`. */\nvar freeParseInt = parseInt;\n\n/** Detect free variable `global` from Node.js. */\nvar freeGlobal = typeof global == 'object' && global && global.Object === Object && global;\n\n/** Detect free variable `self`. */\nvar freeSelf = typeof self == 'object' && self && self.Object === Object && self;\n\n/** Used as a reference to the global object. */\nvar root = freeGlobal || freeSelf || Function('return this')();\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/**\n * Used to resolve the\n * [`toStringTag`](http://ecma-international.org/ecma-262/7.0/#sec-object.prototype.tostring)\n * of values.\n */\nvar objectToString = objectProto.toString;\n\n/* Built-in method references for those with the same name as other `lodash` methods. */\nvar nativeMax = Math.max,\n    nativeMin = Math.min;\n\n/**\n * Gets the timestamp of the number of milliseconds that have elapsed since\n * the Unix epoch (1 January 1970 00:00:00 UTC).\n *\n * @static\n * @memberOf _\n * @since 2.4.0\n * @category Date\n * @returns {number} Returns the timestamp.\n * @example\n *\n * _.defer(function(stamp) {\n *   console.log(_.now() - stamp);\n * }, _.now());\n * // => Logs the number of milliseconds it took for the deferred invocation.\n */\nvar now = function() {\n  return root.Date.now();\n};\n\n/**\n * Creates a debounced function that delays invoking `func` until after `wait`\n * milliseconds have elapsed since the last time the debounced function was\n * invoked. The debounced function comes with a `cancel` method to cancel\n * delayed `func` invocations and a `flush` method to immediately invoke them.\n * Provide `options` to indicate whether `func` should be invoked on the\n * leading and/or trailing edge of the `wait` timeout. The `func` is invoked\n * with the last arguments provided to the debounced function. Subsequent\n * calls to the debounced function return the result of the last `func`\n * invocation.\n *\n * **Note:** If `leading` and `trailing` options are `true`, `func` is\n * invoked on the trailing edge of the timeout only if the debounced function\n * is invoked more than once during the `wait` timeout.\n *\n * If `wait` is `0` and `leading` is `false`, `func` invocation is deferred\n * until to the next tick, similar to `setTimeout` with a timeout of `0`.\n *\n * See [David Corbacho's article](https://css-tricks.com/debouncing-throttling-explained-examples/)\n * for details over the differences between `_.debounce` and `_.throttle`.\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Function\n * @param {Function} func The function to debounce.\n * @param {number} [wait=0] The number of milliseconds to delay.\n * @param {Object} [options={}] The options object.\n * @param {boolean} [options.leading=false]\n *  Specify invoking on the leading edge of the timeout.\n * @param {number} [options.maxWait]\n *  The maximum time `func` is allowed to be delayed before it's invoked.\n * @param {boolean} [options.trailing=true]\n *  Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new debounced function.\n * @example\n *\n * // Avoid costly calculations while the window size is in flux.\n * jQuery(window).on('resize', _.debounce(calculateLayout, 150));\n *\n * // Invoke `sendMail` when clicked, debouncing subsequent calls.\n * jQuery(element).on('click', _.debounce(sendMail, 300, {\n *   'leading': true,\n *   'trailing': false\n * }));\n *\n * // Ensure `batchLog` is invoked once after 1 second of debounced calls.\n * var debounced = _.debounce(batchLog, 250, { 'maxWait': 1000 });\n * var source = new EventSource('/stream');\n * jQuery(source).on('message', debounced);\n *\n * // Cancel the trailing debounced invocation.\n * jQuery(window).on('popstate', debounced.cancel);\n */\nfunction debounce(func, wait, options) {\n  var lastArgs,\n      lastThis,\n      maxWait,\n      result,\n      timerId,\n      lastCallTime,\n      lastInvokeTime = 0,\n      leading = false,\n      maxing = false,\n      trailing = true;\n\n  if (typeof func != 'function') {\n    throw new TypeError(FUNC_ERROR_TEXT);\n  }\n  wait = toNumber(wait) || 0;\n  if (isObject(options)) {\n    leading = !!options.leading;\n    maxing = 'maxWait' in options;\n    maxWait = maxing ? nativeMax(toNumber(options.maxWait) || 0, wait) : maxWait;\n    trailing = 'trailing' in options ? !!options.trailing : trailing;\n  }\n\n  function invokeFunc(time) {\n    var args = lastArgs,\n        thisArg = lastThis;\n\n    lastArgs = lastThis = undefined;\n    lastInvokeTime = time;\n    result = func.apply(thisArg, args);\n    return result;\n  }\n\n  function leadingEdge(time) {\n    // Reset any `maxWait` timer.\n    lastInvokeTime = time;\n    // Start the timer for the trailing edge.\n    timerId = setTimeout(timerExpired, wait);\n    // Invoke the leading edge.\n    return leading ? invokeFunc(time) : result;\n  }\n\n  function remainingWait(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime,\n        result = wait - timeSinceLastCall;\n\n    return maxing ? nativeMin(result, maxWait - timeSinceLastInvoke) : result;\n  }\n\n  function shouldInvoke(time) {\n    var timeSinceLastCall = time - lastCallTime,\n        timeSinceLastInvoke = time - lastInvokeTime;\n\n    // Either this is the first call, activity has stopped and we're at the\n    // trailing edge, the system time has gone backwards and we're treating\n    // it as the trailing edge, or we've hit the `maxWait` limit.\n    return (lastCallTime === undefined || (timeSinceLastCall >= wait) ||\n      (timeSinceLastCall < 0) || (maxing && timeSinceLastInvoke >= maxWait));\n  }\n\n  function timerExpired() {\n    var time = now();\n    if (shouldInvoke(time)) {\n      return trailingEdge(time);\n    }\n    // Restart the timer.\n    timerId = setTimeout(timerExpired, remainingWait(time));\n  }\n\n  function trailingEdge(time) {\n    timerId = undefined;\n\n    // Only invoke if we have `lastArgs` which means `func` has been\n    // debounced at least once.\n    if (trailing && lastArgs) {\n      return invokeFunc(time);\n    }\n    lastArgs = lastThis = undefined;\n    return result;\n  }\n\n  function cancel() {\n    if (timerId !== undefined) {\n      clearTimeout(timerId);\n    }\n    lastInvokeTime = 0;\n    lastArgs = lastCallTime = lastThis = timerId = undefined;\n  }\n\n  function flush() {\n    return timerId === undefined ? result : trailingEdge(now());\n  }\n\n  function debounced() {\n    var time = now(),\n        isInvoking = shouldInvoke(time);\n\n    lastArgs = arguments;\n    lastThis = this;\n    lastCallTime = time;\n\n    if (isInvoking) {\n      if (timerId === undefined) {\n        return leadingEdge(lastCallTime);\n      }\n      if (maxing) {\n        // Handle invocations in a tight loop.\n        timerId = setTimeout(timerExpired, wait);\n        return invokeFunc(lastCallTime);\n      }\n    }\n    if (timerId === undefined) {\n      timerId = setTimeout(timerExpired, wait);\n    }\n    return result;\n  }\n  debounced.cancel = cancel;\n  debounced.flush = flush;\n  return debounced;\n}\n\n/**\n * Checks if `value` is the\n * [language type](http://www.ecma-international.org/ecma-262/7.0/#sec-ecmascript-language-types)\n * of `Object`. (e.g. arrays, functions, objects, regexes, `new Number(0)`, and `new String('')`)\n *\n * @static\n * @memberOf _\n * @since 0.1.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is an object, else `false`.\n * @example\n *\n * _.isObject({});\n * // => true\n *\n * _.isObject([1, 2, 3]);\n * // => true\n *\n * _.isObject(_.noop);\n * // => true\n *\n * _.isObject(null);\n * // => false\n */\nfunction isObject(value) {\n  var type = typeof value;\n  return !!value && (type == 'object' || type == 'function');\n}\n\n/**\n * Checks if `value` is object-like. A value is object-like if it's not `null`\n * and has a `typeof` result of \"object\".\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is object-like, else `false`.\n * @example\n *\n * _.isObjectLike({});\n * // => true\n *\n * _.isObjectLike([1, 2, 3]);\n * // => true\n *\n * _.isObjectLike(_.noop);\n * // => false\n *\n * _.isObjectLike(null);\n * // => false\n */\nfunction isObjectLike(value) {\n  return !!value && typeof value == 'object';\n}\n\n/**\n * Checks if `value` is classified as a `Symbol` primitive or object.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to check.\n * @returns {boolean} Returns `true` if `value` is a symbol, else `false`.\n * @example\n *\n * _.isSymbol(Symbol.iterator);\n * // => true\n *\n * _.isSymbol('abc');\n * // => false\n */\nfunction isSymbol(value) {\n  return typeof value == 'symbol' ||\n    (isObjectLike(value) && objectToString.call(value) == symbolTag);\n}\n\n/**\n * Converts `value` to a number.\n *\n * @static\n * @memberOf _\n * @since 4.0.0\n * @category Lang\n * @param {*} value The value to process.\n * @returns {number} Returns the number.\n * @example\n *\n * _.toNumber(3.2);\n * // => 3.2\n *\n * _.toNumber(Number.MIN_VALUE);\n * // => 5e-324\n *\n * _.toNumber(Infinity);\n * // => Infinity\n *\n * _.toNumber('3.2');\n * // => 3.2\n */\nfunction toNumber(value) {\n  if (typeof value == 'number') {\n    return value;\n  }\n  if (isSymbol(value)) {\n    return NAN;\n  }\n  if (isObject(value)) {\n    var other = typeof value.valueOf == 'function' ? value.valueOf() : value;\n    value = isObject(other) ? (other + '') : other;\n  }\n  if (typeof value != 'string') {\n    return value === 0 ? value : +value;\n  }\n  value = value.replace(reTrim, '');\n  var isBinary = reIsBinary.test(value);\n  return (isBinary || reIsOctal.test(value))\n    ? freeParseInt(value.slice(2), isBinary ? 2 : 8)\n    : (reIsBadHex.test(value) ? NAN : +value);\n}\n\nmodule.exports = debounce;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/lodash.debounce/index.js\n ** module id = 24\n ** module chunks = 0\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport toggleClass from '../polyfills/toggle-class';\nimport eventMatches from '../polyfills/event-matches';\nimport on from '../misc/on';\n\nexport default class LeftNav {\n  /**\n   * Left Navigation.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a left navigation.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n   * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n   * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n   * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n   * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.leftNavSectionActive = false;\n\n    this.options = Object.assign({\n      // Data Attribute selectors\n      selectorLeftNav: '[data-left-nav]',\n      selectorLeftNavList: '[data-left-nav-list]',\n      selectorLeftNavNestedList: '[data-left-nav-nested-list]',\n      selectorLeftNavToggleOpen: '[data-left-nav-toggle=\"open\"]',\n      selectorLeftNavToggleClose: '[data-left-nav-toggle=\"close\"]',\n      selectorLeftNavListItem: '[data-left-nav-item]',\n      selectorLeftNavListItemLink: '[data-left-nav-item-link]',\n      selectorLeftNavNestedListItem: '[data-left-nav-nested-item]',\n      selectorLeftNavArrowIcon: '[data-left-nav-icon]',\n      selectorLeftNavFlyoutMenu: '[data-left-nav-flyout]',\n      selectorLeftNavFlyoutItem: '[data-left-nav-flyout-item]',\n      selectorLeftNavSections: '[data-left-nav-sections]',\n      selectorLeftNavSection: '[data-left-nav-section]',\n      selectorLeftNavSectionLink: '[data-left-nav-section-link]',\n      selectorLeftNavSectionIcon: '[data-left-nav-section-icon]',\n      selectorLeftNavCurrentSection: '[data-left-nav-current-section]',\n      selectorLeftNavCurrentSectionTitle: '[data-left-nav-current-section-title]',\n      selectorLeftNavCurrentSectionIcon: '[data-left-nav-current-section-icon]',\n      selectorLeftNavListItemHasChildren: '[data-left-nav-item-with-children]',\n      selectorLeftNavListItemHasFlyout: '[data-left-nav-has-flyout]',\n      selectorLeftNavAllListItems: '[data-left-nav-item], [data-left-nav-nested-item], [data-left-nav-flyout-item]',\n      // CSS Class Selectors\n      classActiveTrigger: 'bx--left-nav__trigger--active',\n      classActiveLeftNav: 'bx--left-nav--active',\n      classActiveLeftNavListItem: 'bx--active-list-item',\n      classExpandedLeftNavListItem: 'bx--main-nav__parent-item--expanded',\n      classFlyoutDisplayed: 'bx--nested-list__flyout-menu--displayed',\n      classItemHasChildren: 'bx--main-nav__parent-item--has-children',\n      classNavSection: 'bx--left-nav__section',\n      classNavSectionTransition: 'bx--left-nav__section--transition',\n      classNavSectionAnchor: 'bx--left-nav__section--anchor',\n      classNavSectionLink: 'bx--left-nav__section--link',\n      classNavHeaderTitle: 'bx--left-nav__header--title',\n      classItemFade: 'bx--main-nav__parent-item--fade',\n      classItemHidden: 'bx--main-nav__parent-item--hidden',\n      classListHidden: 'bx--left-nav__main-nav--hidden',\n      classListTop: 'bx--left-nav__main-nav--top',\n    }, options);\n    this.options = Object.assign(this.constructor.options, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.hookOpenActions();\n    this.hookListSectionEvents();\n    this.hookListItemsEvents();\n    this.hDocumentClick = on(this.element.ownerDocument, 'click', (evt) => this.handleDocumentClick(evt));\n  }\n\n  /**\n   * Instantiates a left navigation of the given element.\n   * @param {HTMLElement} element The element working as the left navigation.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n   * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n   * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n   * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n   * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates a left navigation in the given node.\n   * If the given element indicates that it's a left navigation (having `data-left-nav-container` attribute), instantiates it.\n   * Otherwise, instantiates left navigation by searching for left navigation in the given node.\n   * @param {Node} target The DOM node to instantiate left navigation in. Should be a document or an element.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorInit] The CSS selector to find left nav containers.\n   * @param {string} [options.selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n   * @param {string} [options.selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n   * @param {string} [options.selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n   * @param {string} [options.selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n   * @param {string} [options.selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n   * @param {string} [options.selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n   * @param {string} [options.selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n   * @param {string} [options.selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n   * @param {string} [options.selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n   * @param {string} [options.selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n   * @param {string} [options.classActiveLeftNav] The class name for when a left nav is active.\n   * @param {string} [options.classActiveLeftNavListItem] The class name for when a left nav list item is active.\n   * @param {string} [options.classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n   * @param {string} [options.classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n   * @param {string} [options.classActiveSection] The class name for an active section item in the left nav header.\n   * @param {string} [options.classItemHasChildren] The class name for when a list item has children.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [...target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Closes the menu.\n   */\n  closeMenu() {\n    this.element.classList.remove(this.options.classActiveLeftNav);\n    this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).classList.remove(this.options.classActiveTrigger);\n    this.element.querySelector(this.options.selectorLeftNav).parentNode.setAttribute('aria-expanded', 'false');\n  }\n\n  /**\n   * Toggles the menu to open and close.\n   */\n  toggleMenu() {\n    const leftNavContainer = this.element.querySelector(this.options.selectorLeftNav).parentNode;\n    this.element.classList.toggle(this.options.classActiveLeftNav);\n    this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).classList.toggle(this.options.classActiveTrigger);\n    if (leftNavContainer.getAttribute('aria-expanded') === 'false') leftNavContainer.setAttribute('aria-expanded', 'true');\n    else leftNavContainer.setAttribute('aria-expanded', 'false');\n  }\n\n  /**\n   * Adds a transitional animation to the navSection\n   */\n  animateNavSection(selectedNav) {\n    const selectedNavValue = selectedNav.dataset.leftNavSection;\n    const selectedNavLink = selectedNav.querySelector(this.options.selectorLeftNavSectionLink);\n    const leftNav = this.element.querySelector(this.options.selectorLeftNav);\n    const leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n\n    selectedNav.classList.remove(this.options.classNavSection);\n    selectedNav.classList.remove(`${this.options.classNavSection}--${selectedNavValue}`);\n    selectedNav.classList.add(this.options.classNavSectionTransition);\n    if (leftNavSections.children[0] === selectedNav) selectedNav.classList.add(`${this.options.classNavSectionTransition}--50`); // First child only move 50px\n    else selectedNav.classList.add(`${this.options.classNavSectionTransition}--100`); // Second move 100px\n    selectedNav.setAttribute('data-left-nav-section', selectedNavValue);\n    /* Not sure what trick more performant*/\n    setTimeout(() => {\n      selectedNav.classList.add(`${this.options.classNavSectionTransition}--0`);\n    }, 100); // Could probably use a promise here\n\n    selectedNavLink.classList.remove(this.options.classNavSectionLink);\n    selectedNavLink.classList.add(this.options.classNavHeaderTitle);\n    selectedNavLink.setAttribute('data-left-nav-current-section-title', '');\n    selectedNavLink.removeAttribute('data-left-nav-section-link');\n\n    this.element.insertBefore(selectedNav, leftNav);\n  }\n\n  /**\n   * Adds a transitional animation to the navigation items on nav section click\n   */\n  animateNavList(selectedNavTitle) {\n    const currentLeftNavList = this.element.querySelector(`${this.options.selectorLeftNavList}:not(.bx--left-nav__main-nav--hidden)`);\n    const newLeftNavList = this.element.querySelector(`[data-left-nav-list=${selectedNavTitle}]`);\n    const currentLeftNavItems = [...currentLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem)].reverse();\n    const newLeftNavItems = [...newLeftNavList.querySelectorAll(this.options.selectorLeftNavListItem)];\n\n    const fadeOutTime = 300;\n    let counter = 0;\n    const counterIteration = fadeOutTime / currentLeftNavItems.length; // Length of animation divided by number of items\n    currentLeftNavItems.forEach(item => {\n      item.setAttribute('tabIndex', '-1');\n      setTimeout(() => {\n        item.classList.add(this.options.classItemFade);\n      }, counter);\n      counter += counterIteration;\n    });\n\n    newLeftNavItems.forEach(item => {\n      item.setAttribute('tabIndex', '0');\n      item.classList.remove(this.options.classItemFade);\n    });\n\n    setTimeout(() => {\n      currentLeftNavList.classList.add(this.options.classListHidden);\n      currentLeftNavList.classList.add(this.options.classListTop);\n      currentLeftNavList.setAttribute('aria-hidden', 'true');\n      newLeftNavList.classList.remove(this.options.classListHidden);\n      setTimeout(() => { newLeftNavList.classList.remove(this.options.classListTop); }, 100);\n      newLeftNavList.setAttribute('aria-hidden', 'false');\n    }, fadeOutTime + 100); // Wait for items to fade out.\n  }\n\n  hookOpenActions() {\n    const openBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen);\n    const closeBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleClose);\n\n    openBtn.addEventListener('click', () => {\n      this.element.tabIndex = '0';\n      this.toggleMenu();\n    });\n\n    openBtn.addEventListener('keydown', (evt) => {\n      if (evt.which === 13) {\n        this.element.tabIndex = '0';\n        this.toggleMenu();\n      }\n    });\n\n    if (closeBtn) {\n      closeBtn.addEventListener('click', () => {\n        this.element.tabIndex = '-1';\n        this.closeMenu();\n      });\n\n      closeBtn.addEventListener('keydown', (evt) => {\n        if (evt.which === 13) {\n          this.element.tabIndex = '-1';\n          this.closeMenu();\n        }\n      });\n    }\n\n    this.element.ownerDocument.addEventListener('keydown', (evt) => {\n      if ((evt.which === 27) && this.element.classList.contains(this.options.classActiveLeftNav)) {\n        this.closeMenu();\n      }\n    });\n  }\n\n  /**\n   * Addes Event listeners to list sections\n   */\n  hookListSectionEvents() {\n    const leftNavSections = this.element.querySelector(this.options.selectorLeftNavSections);\n    leftNavSections.addEventListener('click', (evt) => {\n      this.handleSectionItemClick(evt, leftNavSections);\n    });\n\n    leftNavSections.addEventListener('keydown', (evt) => {\n      if (evt.which === 13) {\n        this.handleSectionItemClick(evt, leftNavSections);\n        this.element.querySelector(this.options.selectorLeftNavCurrentSectionTitle).focus();\n      }\n    });\n  }\n\n  /**\n   * Adds event listeners to list items\n   */\n  hookListItemsEvents() {\n    const leftNavList = [...this.element.querySelectorAll(this.options.selectorLeftNavList)];\n    leftNavList.forEach(list => {\n      list.addEventListener('click', (evt) => {\n        const leftNavItem = eventMatches(evt, this.options.selectorLeftNavListItem);\n        if (leftNavItem) {\n          const childItem = eventMatches(evt, this.options.selectorLeftNavNestedListItem);\n          const hasChildren = eventMatches(evt, this.options.selectorLeftNavListItemHasChildren);\n          const flyoutItem = eventMatches(evt, this.options.selectorLeftNavFlyoutItem);\n          if (flyoutItem) {\n            this.addActiveListItem(flyoutItem);\n          } else if (childItem) {\n            if (childItem.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n              const flyoutMenu = childItem.querySelector(this.options.selectorLeftNavFlyoutMenu);\n              flyoutMenu.classList.toggle(this.options.classFlyoutDisplayed);\n            } else {\n              this.addActiveListItem(childItem);\n            }\n          } else if (hasChildren) {\n            this.handleNestedListClick(leftNavItem);\n          } else {\n            this.addActiveListItem(leftNavItem);\n          }\n        }\n      });\n      list.addEventListener('keydown', (evt) => {\n        if (evt.which === 13) {\n          const leftNavItem = eventMatches(evt, this.options.selectorLeftNavListItem);\n          if (leftNavItem) {\n            const childItem = eventMatches(evt, this.options.selectorLeftNavNestedListItem);\n            const hasChildren = eventMatches(evt, this.options.selectorLeftNavListItemHasChildren);\n            const flyoutItem = eventMatches(evt, this.options.selectorLeftNavFlyoutItem);\n            if (flyoutItem) {\n              this.addActiveListItem(flyoutItem);\n            } else if (childItem) {\n              if (!childItem.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n                this.addActiveListItem(childItem);\n              } else {\n                childItem.querySelector(this.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false');\n                childItem.querySelector(this.options.selectorLeftNavFlyoutMenu).style.top = `${childItem.offsetTop - this.element.querySelector(this.options.selectorLeftNav).scrollTop}px`;\n                childItem.querySelector(this.options.selectorLeftNavFlyoutMenu).style.left = `${childItem.offsetLeft + Math.round(childItem.offsetWidth)}px`;\n              }\n            } else if (hasChildren) {\n              this.handleNestedListClick(leftNavItem);\n            } else {\n              this.addActiveListItem(leftNavItem);\n            }\n          }\n        }\n      });\n    });\n    const flyouts = [...this.element.ownerDocument.querySelectorAll(this.options.selectorLeftNavListItemHasFlyout)];\n    flyouts.forEach(flyout => {\n      flyout.addEventListener('mouseenter', () => {\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'false');\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).style.top = `${flyout.offsetTop - this.element.querySelector(this.options.selectorLeftNav).scrollTop}px`;\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).style.left = `${flyout.offsetLeft + Math.round(flyout.offsetWidth)}px`;\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.toggle(this.options.classFlyoutDisplayed);\n      });\n      flyout.addEventListener('mouseleave', () => {\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).setAttribute('aria-hidden', 'true');\n        flyout.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.remove(this.options.classFlyoutDisplayed);\n      });\n    });\n  }\n\n  /**\n   * Hides all flyout menus.\n   */\n  hideAllFlyoutMenus() {\n    const flyoutMenus = [...this.element.querySelectorAll(this.options.selectorLeftNavFlyoutMenu)];\n    flyoutMenus.forEach(menu => {\n      menu.setAttribute('aria-hidden', 'true');\n      menu.classList.remove(this.options.classFlyoutDisplayed);\n    });\n  }\n\n  /**\n   * Sets a list item as active.\n   * @param {Object} item The active list item.\n   */\n  addActiveListItem(item) {\n    [...this.element.querySelectorAll(this.options.selectorLeftNavAllListItems)].forEach(currentItem => {\n      if (!(item === currentItem)) {\n        if (!currentItem.contains(item)) {\n          currentItem.classList.remove(this.options.classActiveLeftNavListItem);\n        } else {\n          currentItem.classList.add(this.options.classActiveLeftNavListItem);\n        }\n      }\n    });\n    [...this.element.querySelectorAll(this.options.selectorLeftNavNestedListItem)].forEach(currentItem => {\n      if (!(item === currentItem)) {\n        currentItem.classList.remove(this.options.classActiveLeftNavListItem);\n      }\n    });\n    item.classList.add(this.options.classActiveLeftNavListItem);\n    this.closeMenu();\n    this.hideAllFlyoutMenus();\n    this.closeMenu();\n  }\n\n  /**\n   * Handles click on the document.\n   * Closes the left navigation when document is clicked outside the left navigation.\n   * @param {Event} event The event triggering this method.\n   */\n  handleDocumentClick(evt) {\n    const clickTarget = evt.target;\n    const isOfSelf = this.element.contains(clickTarget);\n    const isToggleBtn = this.element.ownerDocument.querySelector(this.options.selectorLeftNavToggleOpen).contains(clickTarget);\n    const isOpen = this.element.classList.contains(this.options.classActiveLeftNav);\n    const isUnifiedHeader = this.element.ownerDocument.querySelector('[data-unified-header]').contains(clickTarget);\n    const shouldClose = !isOfSelf && isOpen && !isToggleBtn && !isUnifiedHeader;\n    let flyoutOpen;\n    if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n      flyoutOpen = this.element.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.contains(this.options.classFlyoutDisplayed);\n    }\n    if (isOfSelf && this.element.tagName === 'A') {\n      evt.preventDefault();\n    }\n    if (shouldClose) {\n      this.closeMenu();\n    }\n    if (this.element.querySelector(this.options.selectorLeftNavFlyoutMenu)) {\n      if (flyoutOpen && !isOfSelf && isOpen) {\n        this.element.querySelector(this.options.selectorLeftNavFlyoutMenu).classList.remove(this.options.classFlyoutDisplayed);\n      }\n    }\n  }\n\n  /**\n   * Handles click on a list item that contains a nested list in the left navigation.\n   * It hides all flyout menus and switches the tab-index on the list items based on whether or not the list is expanded.\n   * @param {HTMLElement} listItem The list item that was clicked.\n   * @param {Event} event The event triggering this method.\n   */\n  handleNestedListClick(listItem) {\n    const isOpen = listItem.classList.contains(this.options.classExpandedLeftNavListItem);\n    this.hideAllFlyoutMenus();\n    toggleClass(listItem, this.options.classExpandedLeftNavListItem, !isOpen);\n    const listItems = [...listItem.querySelectorAll(this.options.selectorLeftNavNestedListItem)];\n    listItems.forEach(item => {\n      if (isOpen) {\n        listItem.querySelector(this.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'true');\n        item.querySelector(this.options.selectorLeftNavListItemLink).tabIndex = -1;\n      } else {\n        listItem.querySelector(this.options.selectorLeftNavNestedList).setAttribute('aria-hidden', 'false');\n        item.querySelector(this.options.selectorLeftNavListItemLink).tabIndex = 0;\n      }\n    });\n  }\n\n  handleSectionItemClick(evt, leftNavSections) { // Sorry\n    const leftNavSectionItem = eventMatches(evt, this.options.selectorLeftNavSection);\n    if (leftNavSectionItem) {\n\n      console.log(leftNavSectionItem);\n      // currently selected\n      const selectedLeftNavSectionItem = this.element.querySelector(this.options.selectorLeftNavCurrentSection);\n      const selectedLeftNavSectionItemTitle = selectedLeftNavSectionItem.querySelector(this.options.selectorLeftNavCurrentSectionTitle);\n      const selectedLeftNavSectionItemIcon = this.element.querySelector(this.options.selectorLeftNavCurrentSectionIcon);\n      const selectedLeftNavSectionItemUse = selectedLeftNavSectionItemIcon.querySelector('use');\n      const selectedLeftNavSectionValue = selectedLeftNavSectionItem.dataset.leftNavCurrentSection;\n\n      // clicked on item\n      const leftNavSectionItemLink = leftNavSectionItem.querySelector(this.options.selectorLeftNavSectionLink);\n      const leftNavSectionItemIcon = leftNavSectionItem.querySelector(this.options.selectorLeftNavSectionIcon);\n      const leftNavSectionItemIconUse = leftNavSectionItemIcon.querySelector('use');\n      const leftNavSectionValue = leftNavSectionItem.dataset.leftNavSection;\n\n\n      if (this.leftNavSectionActive) {\n        return;\n      }\n      this.leftNavSectionActive = true;\n\n      const newLeftNavSectionItem = document.createElement('li');\n      newLeftNavSectionItem.setAttribute('data-left-nav-section', selectedLeftNavSectionValue);\n      newLeftNavSectionItem.setAttribute('tabindex', 0);\n      newLeftNavSectionItem.classList.add(this.options.classNavSection);\n      newLeftNavSectionItem.classList.add(`${this.options.classNavSection}--${selectedLeftNavSectionValue}`);\n\n      const newLeftNavSectionItemAnchor = document.createElement('a');\n      newLeftNavSectionItemAnchor.setAttribute('href', '#');\n      newLeftNavSectionItemAnchor.classList.add(this.options.classNavSectionAnchor);\n\n      const newLeftNavSectionItemIcon = selectedLeftNavSectionItemIcon.cloneNode(true);\n      // IE11 doesn't support classList on SVG, must revert to className\n      newLeftNavSectionItemIcon.setAttribute('class', 'bx--left-nav__section--taxonomy-icon');\n      newLeftNavSectionItemIcon.removeAttribute('data-left-nav-current-section-icon');\n      newLeftNavSectionItemIcon.setAttribute('data-left-nav-section-icon', selectedLeftNavSectionValue);\n\n      const newLeftNavSectionItemLink = document.createElement('span');\n      newLeftNavSectionItemLink.setAttribute('data-left-nav-section-link', '');\n      newLeftNavSectionItemLink.classList.add(this.options.classNavSectionLink);\n      newLeftNavSectionItemLink.textContent = selectedLeftNavSectionItemTitle.textContent;\n\n      this.animateNavSection(leftNavSectionItem);\n      this.animateNavList(leftNavSectionValue);\n\n      newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemIcon);\n      newLeftNavSectionItemAnchor.appendChild(newLeftNavSectionItemLink);\n      newLeftNavSectionItem.appendChild(newLeftNavSectionItemAnchor);\n      leftNavSections.insertBefore(newLeftNavSectionItem, leftNavSections.firstChild);\n\n      setTimeout(() => {\n        selectedLeftNavSectionItemTitle.textContent = leftNavSectionItemLink.textContent;\n        selectedLeftNavSectionItem.setAttribute('data-left-nav-current-section', leftNavSectionValue);\n        selectedLeftNavSectionItemIcon.setAttribute('data-left-nav-current-section-icon', leftNavSectionValue);\n        selectedLeftNavSectionItemUse.setAttribute('xlink:href', leftNavSectionItemIconUse.getAttribute('xlink:href'));\n\n        leftNavSectionItem.parentNode.removeChild(leftNavSectionItem); // Cant use .remove() because of IE11\n        this.leftNavSectionActive = false;\n      }, 450); // Wait for nav items to animate\n    }\n  }\n\n  release() {\n    if (this.hDocumentClick) {\n      this.hDocumentClick = this.hDocumentClick.release();\n    }\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode LeftNav.create .create()}, or {@linkcode LeftNav.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode LeftNav.init .init()} works.\n * @property {string} selectorInit The CSS selector to find left nav containers.\n * @property {string} [selectorLeftNav] The data attribute selector for the nav element in the left nav container.\n * @property {string} [selectorLeftNavList] The data attribute selector for the main ul element in the left nav.\n * @property {string} [selectorLeftNavNestedList] The data attribute selector for the nested ul elements in the left nav.\n * @property {string} [selectorLeftNavToggle] The data attribute selector for the button that will show and hide the left navigation.\n * @property {string} [selectorLeftNavListItem] The data attribute selector for all list items in the left navigation.\n * @property {string} [selectorLeftNavNestedListItem] The data attribute selector for all nested list items in the left navigation.\n * @property {string} [selectorLeftNavArrowIcon] The data attribute selector for the arrow icons in the left nav.\n * @property {string} [selectorLeftNavFlyoutMenu] The data attribute selector for the flyout menus in the left nav.\n * @property {string} [selectorLeftNavFlyoutItem] The data attribute selector for the flyout menu items in the left nav.\n * @property {string} [selectorLeftNavSection] The data attribute selector for the three sections in the header of the left nav.\n * @property {string} [selectorLeftNavCurrentPage] The data attribute selector for the current section title in the left nav header.\n * @property {string} [classActiveLeftNav] The class name for when a left nav is active.\n * @property {string} [classActiveLeftNavListItem] The class name for when a left nav list item is active.\n * @property {string} [classExpandedLeftNavListItem] The class name for when a nested list is expanded.\n * @property {string} [classFlyoutDisplayed] The class name for when a flyout menu is displayed.\n * @property {string} [classActiveSection] The class name for an active section item in the left nav header.\n * @property {string} [classItemHasChildren] The class name for when a list item has children.\n */\nLeftNav.options = {\n  selectorInit: '[data-left-nav-container]',\n  // Data Attribute selectors\n  selectorLeftNav: '[data-left-nav]',\n  selectorLeftNavList: '[data-left-nav-list]',\n  selectorLeftNavNestedList: '[data-left-nav-nested-list]',\n  selectorLeftNavToggleOpen: '[data-left-nav-toggle=\"open\"]',\n  selectorLeftNavToggleClose: '[data-left-nav-toggle=\"close\"]',\n  selectorLeftNavListItem: '[data-left-nav-item]',\n  selectorLeftNavListItemLink: '[data-left-nav-item-link]',\n  selectorLeftNavNestedListItem: '[data-left-nav-nested-item]',\n  selectorLeftNavArrowIcon: '[data-left-nav-icon]',\n  selectorLeftNavFlyoutMenu: '[data-left-nav-flyout]',\n  selectorLeftNavFlyoutItem: '[data-left-nav-flyout-item]',\n  selectorLeftNavSections: '[data-left-nav-sections]',\n  selectorLeftNavSection: '[data-left-nav-section]',\n  selectorLeftNavSectionLink: '[data-left-nav-section-link]',\n  selectorLeftNavSectionIcon: '[data-left-nav-section-icon]',\n  selectorLeftNavCurrentSection: '[data-left-nav-current-section]',\n  selectorLeftNavCurrentSectionTitle: '[data-left-nav-current-section-title]',\n  selectorLeftNavCurrentSectionIcon: '[data-left-nav-current-section-icon]',\n  selectorLeftNavListItemHasChildren: '[data-left-nav-item-with-children]',\n  selectorLeftNavListItemHasFlyout: '[data-left-nav-has-flyout]',\n  selectorLeftNavAllListItems: '[data-left-nav-item], [data-left-nav-nested-item], [data-left-nav-flyout-item]',\n  // CSS Class Selectors\n  classActiveTrigger: 'bx--left-nav__trigger--active',\n  classActiveLeftNav: 'bx--left-nav--active',\n  classActiveLeftNavListItem: 'bx--active-list-item',\n  classExpandedLeftNavListItem: 'bx--main-nav__parent-item--expanded',\n  classFlyoutDisplayed: 'bx--nested-list__flyout-menu--displayed',\n  classItemHasChildren: 'bx--main-nav__parent-item--has-children',\n  classNavSection: 'bx--left-nav__section',\n  classNavSectionTransition: 'bx--left-nav__section--transition',\n  classNavSectionAnchor: 'bx--left-nav__section--anchor',\n  classNavSectionLink: 'bx--left-nav__section--link',\n  classNavHeaderTitle: 'bx--left-nav__header--title',\n  classItemFade: 'bx--main-nav__parent-item--fade',\n  classItemHidden: 'bx--main-nav__parent-item--hidden',\n  classListHidden: 'bx--left-nav__main-nav--hidden',\n  classListTop: 'bx--left-nav__main-nav--top',\n};\n\n/**\n * The map associating DOM element and left navigation instance.\n * @type {WeakMap}\n */\nLeftNav.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/left-nav.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\n\nexport default class UnifiedHeader {\n\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(this.constructor.options, options);\n    this.constructor.components.set(this.element, this);\n  }\n\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  release() {\n    if (this.handleDocumentClick) {\n      this.element.ownerDocument.removeEventListener('click', (evt) => this.handleDocumentClick(evt));\n    }\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and left navigation instance.\n * @type {WeakMap}\n */\nUnifiedHeader.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode UnifiedHeader.create .create()}, or {@linkcode UnifiedHeader.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode UnifiedHeader.init .init()} works.\n * @property {string} selectorInit The CSS selector to find unified headers.\n */\nUnifiedHeader.options = {\n  selectorInit: '[data-unified-header]',\n  // Data Attribute selectors\n  // CSS Class Selectors\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/unified-header.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport toggleClass from '../polyfills/toggle-class';\nimport eventMatches from '../polyfills/event-matches';\n\nexport default class InlineLeftNav {\n  /**\n   * Spinner indicating loading state.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a spinner.\n   * @param {Object} options The component options.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.options = Object.assign(this.constructor.options, options);\n\n    this.element = element;\n\n    this.constructor.components.set(this.element, this);\n    this.hookListItemsEvents();\n  }\n\n  /**\n   * Instantiates spinner of the given element.\n   * @param {HTMLElement} element The element.\n   */\n  static create(element) {\n    return this.components.get(element) || new this(element);\n  }\n\n  /**\n   * Instantiates spinner in the given node.\n   * If the given element indicates that it's an spinner (having `data-loading` attribute), instantiates it.\n   * Otherwise, instantiates spinners by searching for spinners in the given node.\n   * @param {Node} target The DOM node to instantiate spinners in. Should be a document or an element.\n   * @param {Object} [options] The component options.\n   * @param {string} [options.selectorInit] The CSS selector to find inline left navs.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  hookListItemsEvents() {\n    const leftNavList = this.element.querySelector(this.options.selectorLeftNavList);\n    leftNavList.addEventListener('click', (evt) => {\n      const leftNavItem = eventMatches(evt, this.options.selectorLeftNavListItem);\n      if (leftNavItem) {\n        const childItem = eventMatches(evt, this.options.selectorLeftNavNestedListItem);\n        const hasChildren = leftNavItem.classList.contains('left-nav-list__item--has-children');\n        if (childItem) {\n          this.addActiveListItem(childItem);\n        } else if (hasChildren) {\n          this.handleNestedListClick(leftNavItem, evt);\n        } else {\n          this.addActiveListItem(leftNavItem);\n        }\n      }\n    });\n    [... this.element.querySelectorAll(this.options.selectorLeftNavListItem)].forEach(item => {\n      item.addEventListener('keydown', (evt) => {\n        const leftNavItemWithChildren = eventMatches(evt, this.options.selectorLeftNavListItemHasChildren);\n        if (leftNavItemWithChildren && evt.which === 13) {\n          this.handleNestedListClick(leftNavItemWithChildren);\n        }\n      });\n    });\n  }\n\n  addActiveListItem(item) {\n    [...this.element.querySelectorAll(this.options.selectorLeftNavListItem)].forEach(currentItem => {\n      if (!(item === currentItem)) {\n        currentItem.classList.remove(this.options.classActiveLeftNavListItem);\n      }\n    });\n    [...this.element.querySelectorAll(this.options.selectorLeftNavNestedListItem)].forEach(currentItem => {\n      if (!(item === currentItem)) {\n        currentItem.classList.remove(this.options.classActiveLeftNavListItem);\n      }\n    });\n    item.classList.add(this.options.classActiveLeftNavListItem);\n  }\n\n  /**\n   * Handles click on a list item that contains a nested list in the left navigation.\n   * The nested list is expanded and the icon is rotated.\n   * @param {HTMLElement} listItem The list item that was clicked.\n   * @param {Event} event The event triggering this method.\n   */\n   handleNestedListClick(listItem, evt) {\n     const isOpen = listItem.classList.contains(this.options.classExpandedLeftNavListItem);\n     if (!('leftNavItemLink' in evt.target.dataset)) {\n       toggleClass(listItem, this.options.classExpandedLeftNavListItem, !isOpen);\n     }\n     const list = listItem.querySelector(this.options.selectorLeftNavNestedList);\n     const listItems = [... list.querySelectorAll(this.options.selectorLeftNavNestedListItem)];\n     listItems.forEach(item => {\n       if (isOpen) {\n         item.querySelector(this.options.selectorLeftNavListItemLink).tabIndex = -1;\n       } else {\n         item.querySelector(this.options.selectorLeftNavListItemLink).tabIndex = 0;\n       }\n     });\n   }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The map associating DOM element and spinner instance.\n * @type {WeakMap}\n */\nInlineLeftNav.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode InlineLeftNav.create .create()}, or {@linkcode InlineLeftNav.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode InlineLeftNav.init .init()} works.\n * @property {string} selectorInit The CSS selector to find inline left navs.\n */\nInlineLeftNav.options = {\n  selectorInit: '[data-inline-left-nav]',\n  // Data Attribute selectors\n  selectorLeftNavList: '[data-inline-left-nav-list]',\n  selectorLeftNavNestedList: '[data-inline-left-nav-nested-list]',\n  selectorLeftNavListItem: '[data-inline-left-nav-item]',\n  selectorLeftNavListItemLink: '[data-inline-left-nav-item-link]',\n  selectorLeftNavNestedListItem: '[data-inline-left-nav-nested-item]',\n  // CSS Class Selectors\n  classActiveLeftNavListItem: 'left-nav-list__item--active',\n  classExpandedLeftNavListItem: 'left-nav-list__item--expanded',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/inline-left-nav.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport on from '../misc/on';\n\nexport default class ProfileSwitcher {\n  /**\n   * Profile Switcher.\n   * @implements Component\n   * @param {HTMLElement} element The element working as a profile switcher.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorProfileSwitcher] The data attribute selector for the profile switcher.\n   * @param {string} [options.selectorAccount] The data attribute selector for the element containing the account name in the profile switcher.\n   * @param {string} [options.selectorOrg] The data attribute selector for the element containing the organization name in the profile switcher.\n   * @param {string} [options.selectorSpace] The data attribute selector for the element containing the space name in the profile switcher.\n   * @param {string} [options.selectorAccountDropdown] The data attribute selector for the dropdown item containing the current account name.\n   * @param {string} [options.selectorOrgDropdown] The data attribute selector for the dropdown item containing the current organization name.\n   * @param {string} [options.selectorSpaceDropdown] The data attribute selector for the dropdown item containing the current space name.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(this.constructor.options, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.hDocumentClick = on(this.element.ownerDocument, 'click', (evt) => this.handleDocumentClick(evt));\n    this.element.querySelector(this.options.selectorToggle).addEventListener('keydown', (event) => this.toggle(event));\n\n    this.element.querySelector(this.options.selectorToggle).addEventListener('mouseenter', () => this.determineSwitcherValues(true));\n\n    this.element.querySelector(this.options.selectorToggle).addEventListener('mouseleave', () => this.determineSwitcherValues(false));\n\n    this.element.ownerDocument.addEventListener('keyup', () => this.handleBlur());\n  }\n\n  /**\n   * Instantiates a profile switcher of the given element.\n   * @param {HTMLElement} element The element working as the profile switcher.\n   * @param {Object} [options] The component options\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates a profile switcher in the given node.\n   * If the given element indicates that it's a profile switcher (having `data-profile-switcher` attribute), instantiates it.\n   * Otherwise, instantiates profile switcher by searching for profile switcher in the given node.\n   * @param {Node} target The DOM node to instantiate profile switcher in. Should be a document or an element.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorInit] The CSS selector to find profile switchers.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Opens and closes the menu.\n   * @param {Event} event The event triggering this method.\n   */\n  toggle(event) {\n    const isOfSelf = this.element.contains(event.target);\n    if (event.which === 13 || event.which === 32) {\n      if (isOfSelf) {\n        this.element.classList.toggle(this.options.classSwitcherOpen);\n      } else if (!isOfSelf && this.element.classList.contains(this.options.classSwitcherOpen)) {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      }\n    }\n  }\n\n  handleBlur() {\n    if (!(this.element.contains(document.activeElement))) {\n      this.element.classList.remove(this.options.classSwitcherOpen);\n    }\n  }\n\n  /**\n   * Handles click on the document.\n   * Closes the profile switcherwhen document is clicked outside the left navigation or\n   * the user clicks the profile switcher while it is open.\n   * @param {Event} event The event triggering this method.\n   */\n  handleDocumentClick(evt) {\n    const clickTarget = evt.target;\n    const isOfSelf = this.element.contains(clickTarget);\n    const isToggle = this.element.ownerDocument.querySelector(this.options.selectorToggle).contains(clickTarget);\n    const isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n    if (isOfSelf) {\n      if (isToggle && isOpen) {\n        this.element.classList.remove(this.options.classSwitcherOpen);\n      } else if (isOpen) {\n        this.determineSwitcherValues();\n      } else {\n        this.element.classList.add(this.options.classSwitcherOpen);\n      }\n    } else {\n      this.element.classList.remove(this.options.classSwitcherOpen);\n    }\n  }\n\n  /**\n   * Handles logic to determine what text to display in profile switcher.\n   * If the text is over 25 characters long, truncate and add ellipses.\n   * Also adds logic to change the switcher width based on the width of the hovered\n   * profile switcher\n   * @param {boolean} isHovered boolean value passed by the event listener on bx--toggle.\n   */\n  determineSwitcherValues(isHovered) {\n    const nameElement = this.element.querySelector(this.options.selectorAccount);\n    const regionElement = this.element.querySelector(this.options.selectorRegion);\n    const orgElement = this.element.querySelector(this.options.selectorOrg);\n    const spaceElement = this.element.querySelector(this.options.selectorSpace);\n    const menuElement = this.element.querySelector(this.options.selectorMenu);\n    const isOpen = this.element.classList.contains(this.options.classSwitcherOpen);\n\n    const nameDropdownValue = this.element.querySelector(this.options.selectorAccountDropdown).textContent;\n    const regionDropdownValue = this.element.querySelector(this.options.selectorRegionDropdown).textContent;\n    const orgDropdownValue = this.element.querySelector(this.options.selectorOrgDropdown).textContent;\n    const spaceDropdownValue = this.element.querySelector(this.options.selectorSpaceDropdown).textContent;\n\n    let nameShort;\n    let orgShort;\n    let spaceShort;\n\n    if (isHovered && !isOpen) {\n      nameElement.textContent = nameDropdownValue;\n      orgElement.textContent = orgDropdownValue;\n      spaceElement.textContent = spaceDropdownValue;\n      regionElement.textContent = regionDropdownValue;\n      menuElement.style.width = this.element.getBoundingClientRect().width + 'px';\n    } else {\n      if (nameDropdownValue.length > 25) {\n        nameShort = nameDropdownValue.substr(0, 25) + '...';\n        nameElement.textContent = nameShort;\n      } else {\n        nameElement.textContent = nameDropdownValue;\n      }\n\n      if (orgDropdownValue.length > 25) {\n        orgShort = orgDropdownValue.slice(0, 12) + '...' + orgDropdownValue.slice(-13);\n        orgElement.textContent = orgShort;\n      } else {\n        orgElement.textContent = orgDropdownValue;\n      }\n\n      if (spaceDropdownValue.length > 25) {\n        spaceShort = spaceDropdownValue.substr(0, 25) + '...';\n        spaceElement.textContent = spaceShort;\n      } else {\n        spaceElement.textContent = spaceDropdownValue;\n      }\n\n      regionElement.textContent = regionDropdownValue;\n      menuElement.style.width = this.element.getBoundingClientRect().width + 'px';\n    }\n  }\n\n  release() {\n    if (this.hDocumentClick) {\n      this.hDocumentClick = this.hDocumentClick.release();\n    }\n    this.constructor.components.delete(this.element);\n  }\n}\n\n/**\n * The component options.\n * @property {string} selectorInit The CSS selector to find profile switchers.\n * @property {string} [selectorProfileSwitcher] The data attribute selector for the profile switcher.\n * @property {string} [selectorAccount] The data attribute selector for the element containing the account name in the profile switcher.\n * @property {string} [selectorOrg] The data attribute selector for the element containing the organization name in the profile switcher.\n * @property {string} [selectorSpace] The data attribute selector for the element containing the space name in the profile switcher.\n * @property {string} [selectorAccountDropdown] The data attribute selector for the dropdown item containing the current account name.\n * @property {string} [selectorOrgDropdown] The data attribute selector for the dropdown item containing the current organization name.\n * @property {string} [selectorSpaceDropdown] The data attribute selector for the dropdown item containing the current space name.\n */\nProfileSwitcher.options = {\n  selectorInit: '[data-profile-switcher]',\n  // Data Attribute selectors\n  selectorProfileSwitcher: '[data-profile-switcher]',\n  selectorToggle: '[data-profile-switcher-toggle]',\n  selectorMenu: '[data-switcher-menu]',\n  selectorAccount: '[data-switcher-account]',\n  selectorRegion: '[data-switcher-region]',\n  selectorOrg: '[data-switcher-org]',\n  selectorSpace: '[data-switcher-space]',\n  selectorDropdown: '[data-dropdown]',\n  selectorAccountDropdown: '[data-dropdown-account]',\n  selectorRegionDropdown: '[data-dropdown-region]',\n  selectorOrgDropdown: '[data-dropdown-org]',\n  selectorSpaceDropdown: '[data-dropdown-space]',\n  classSwitcherOpen: 'bx--account-switcher--open',\n};\n\n/**\n * The map associating DOM element and profile switcher instance.\n * @type {WeakMap}\n */\nProfileSwitcher.components = new WeakMap();\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/profile-switcher.js\n **/","import '../polyfills/array-from';\nimport '../polyfills/object-assign';\nimport '../polyfills/custom-event';\nimport toggleClass from '../polyfills/toggle-class';\n\nexport default class SearchWithOptions {\n  /**\n   * Search with Options.\n   * @implements Component\n   * @param {HTMLElement} element The element working as the search component.\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorToggleLayoutBtn] The data attribute selector for the button that toggles between the layouts.\n   * @param {string} [options.selectorIconContainer] The data attribute selector for the icon layout container.\n   * @param {string} [options.classHiddenContainer] The class selector for a hidden container.\n   */\n  constructor(element, options = {}) {\n    if (!element || element.nodeType !== Node.ELEMENT_NODE) {\n      throw new TypeError('DOM element should be given to initialize this widget.');\n    }\n\n    this.element = element;\n\n    this.options = Object.assign(this.constructor.options, options);\n\n    this.constructor.components.set(this.element, this);\n\n    this.element.querySelector(this.options.selectorToggleLayoutBtn).addEventListener('click', (evt) => this.toggleLayout(evt));\n  }\n\n  /**\n   * Instantiates a search component of the given element.\n   * @param {HTMLElement} element The element working as the search component.\n   * @param {Object} [options] The component options\n   */\n  static create(element, options) {\n    return this.components.get(element) || new this(element, options);\n  }\n\n  /**\n   * Instantiates a search component in the given node.\n   * If the given element indicates that it's a search component (having `data-search-with-options` attribute), instantiates it.\n   * Otherwise, instantiates the search component by searching for the search component in the given node.\n   * @param {Node} target The DOM node to instantiate the search component in. Should be a document or an element..\n   * @param {Object} [options] The component options\n   * @param {string} [options.selectorInit] The CSS selector to find unified headers.\n   */\n  static init(target = document, options = {}) {\n    const effectiveOptions = Object.assign(Object.create(this.options), options);\n    if (target.nodeType !== Node.ELEMENT_NODE && target.nodeType !== Node.DOCUMENT_NODE) {\n      throw new Error('DOM document or DOM element should be given to search for and initialize this widget.');\n    }\n    if (target.nodeType === Node.ELEMENT_NODE && target.matches(effectiveOptions.selectorInit)) {\n      this.create(target, effectiveOptions);\n    } else {\n      [... target.querySelectorAll(effectiveOptions.selectorInit)].forEach(element => this.create(element, effectiveOptions));\n    }\n  }\n\n  /**\n   * Toggles between the grid and list layout.\n   * @param {Event} event The event triggering this method.\n   */\n  toggleLayout(evt) {\n    const btn = evt.currentTarget;\n    const iconContainers = [... btn.querySelectorAll(this.options.selectorIconContainer)];\n    iconContainers.forEach(container => {\n      const isHidden = container.classList.contains(this.options.classHiddenContainer);\n      toggleClass(container, this.options.classHiddenContainer, !isHidden);\n    });\n  }\n\n  release() {\n    this.constructor.components.delete(this.element);\n  }\n}\n\nSearchWithOptions.components = new WeakMap();\n\n/**\n * The component options.\n * If `options` is specified in the constructor, {@linkcode SearchWithOptions.create .create()}, or {@linkcode SearchWithOptions.init .init()},\n * properties in this object are overriden for the instance being create and how {@linkcode SearchWithOptions.init .init()} works.\n * @property {string} selectorInit The CSS selector to find search UIs with options.\n */\nSearchWithOptions.options = {\n  selectorInit: '[data-search-with-options]',\n  selectorToggleLayoutBtn: '[data-search-toggle-btn]',\n  selectorIconContainer: '[data-search-toggle-layout]',\n  classHiddenContainer: 'bx--search__toggle-layout__container--hidden',\n};\n\n\n\n/** WEBPACK FOOTER **\n ** ./consumables/js/es2015/search-with-options.js\n **/"],"sourceRoot":""}